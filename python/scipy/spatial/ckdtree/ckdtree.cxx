/* Generated by Cython 0.22.1 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22_1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__ckdtree
#define __PYX_HAVE_API__ckdtree
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "limits.h"
#include "ckdtree_cpp_methods.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "ckdtree_cpp_decl.h"
#include "ckdtree_cpp_utils.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "ckdtree.pyx",
  "__init__.pxd",
  "type.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":729
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":736
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":741
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_7ckdtree_coo_entries;
struct __pyx_obj_7ckdtree_Rectangle;
struct __pyx_obj_7ckdtree_RectRectDistanceTracker;
struct __pyx_obj_7ckdtree_PointRectDistanceTracker;
struct __pyx_obj_7ckdtree_cKDTreeNode;
struct ckdtree;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_7ckdtree_RR_stack_item;
struct __pyx_t_7ckdtree_RP_stack_item;

/* "ckdtree.pyx":298
 * # dist_tracker.pop()
 * 
 * cdef struct RR_stack_item:             # <<<<<<<<<<<<<<
 *     np.intp_t which
 *     np.intp_t split_dim
 */
struct __pyx_t_7ckdtree_RR_stack_item {
  __pyx_t_5numpy_intp_t which;
  __pyx_t_5numpy_intp_t split_dim;
  double min_along_dim;
  double max_along_dim;
  __pyx_t_5numpy_float64_t min_distance;
  __pyx_t_5numpy_float64_t max_distance;
};

/* "ckdtree.pyx":480
 * # dist_tracker.pop()
 * 
 * cdef struct RP_stack_item:             # <<<<<<<<<<<<<<
 *     np.intp_t split_dim
 *     double min_along_dim, max_along_dim
 */
struct __pyx_t_7ckdtree_RP_stack_item {
  __pyx_t_5numpy_intp_t split_dim;
  double min_along_dim;
  double max_along_dim;
  __pyx_t_5numpy_float64_t min_distance;
  __pyx_t_5numpy_float64_t max_distance;
};

/* "ckdtree.pyx":123
 * 
 * # Utility for building a coo matrix incrementally
 * cdef class coo_entries:             # <<<<<<<<<<<<<<
 *     cdef:
 *         np.intp_t n, n_max
 */
struct __pyx_obj_7ckdtree_coo_entries {
  PyObject_HEAD
  struct __pyx_vtabstruct_7ckdtree_coo_entries *__pyx_vtab;
  __pyx_t_5numpy_intp_t n;
  __pyx_t_5numpy_intp_t n_max;
  PyArrayObject *i;
  PyArrayObject *j;
  PyArrayObject *v;
  __pyx_t_5numpy_intp_t *i_data;
  __pyx_t_5numpy_intp_t *j_data;
  __pyx_t_5numpy_float64_t *v_data;
};


/* "ckdtree.pyx":176
 * # ===================
 * 
 * cdef class Rectangle:             # <<<<<<<<<<<<<<
 *     cdef np.intp_t m
 *     cdef np.float64_t *mins
 */
struct __pyx_obj_7ckdtree_Rectangle {
  PyObject_HEAD
  __pyx_t_5numpy_intp_t m;
  __pyx_t_5numpy_float64_t *mins;
  __pyx_t_5numpy_float64_t *maxes;
  PyArrayObject *mins_arr;
  PyArrayObject *maxes_arr;
};


/* "ckdtree.pyx":307
 * cdef np.intp_t GREATER = 2
 * 
 * cdef class RectRectDistanceTracker(object):             # <<<<<<<<<<<<<<
 *     cdef Rectangle rect1, rect2
 *     cdef np.float64_t p, epsfac, upper_bound
 */
struct __pyx_obj_7ckdtree_RectRectDistanceTracker {
  PyObject_HEAD
  struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *__pyx_vtab;
  struct __pyx_obj_7ckdtree_Rectangle *rect1;
  struct __pyx_obj_7ckdtree_Rectangle *rect2;
  __pyx_t_5numpy_float64_t p;
  __pyx_t_5numpy_float64_t epsfac;
  __pyx_t_5numpy_float64_t upper_bound;
  __pyx_t_5numpy_float64_t min_distance;
  __pyx_t_5numpy_float64_t max_distance;
  __pyx_t_5numpy_intp_t stack_size;
  __pyx_t_5numpy_intp_t stack_max_size;
  struct __pyx_t_7ckdtree_RR_stack_item *stack;
};


/* "ckdtree.pyx":485
 *     np.float64_t min_distance, max_distance
 * 
 * cdef class PointRectDistanceTracker(object):             # <<<<<<<<<<<<<<
 *     cdef Rectangle rect
 *     cdef np.float64_t *pt
 */
struct __pyx_obj_7ckdtree_PointRectDistanceTracker {
  PyObject_HEAD
  struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *__pyx_vtab;
  struct __pyx_obj_7ckdtree_Rectangle *rect;
  __pyx_t_5numpy_float64_t *pt;
  __pyx_t_5numpy_float64_t p;
  __pyx_t_5numpy_float64_t epsfac;
  __pyx_t_5numpy_float64_t upper_bound;
  __pyx_t_5numpy_float64_t min_distance;
  __pyx_t_5numpy_float64_t max_distance;
  __pyx_t_5numpy_intp_t stack_size;
  __pyx_t_5numpy_intp_t stack_max_size;
  struct __pyx_t_7ckdtree_RP_stack_item *stack;
};


/* "ckdtree.pyx":700
 * # ================================
 * 
 * cdef class cKDTreeNode:             # <<<<<<<<<<<<<<
 *     """
 *     class cKDTreeNode
 */
struct __pyx_obj_7ckdtree_cKDTreeNode {
  PyObject_HEAD
  struct __pyx_vtabstruct_7ckdtree_cKDTreeNode *__pyx_vtab;
  __pyx_t_5numpy_intp_t level;
  __pyx_t_5numpy_intp_t split_dim;
  __pyx_t_5numpy_intp_t children;
  __pyx_t_5numpy_float64_t split;
  struct ckdtreenode *_node;
  PyArrayObject *_data;
  PyArrayObject *_indices;
};


/* "ckdtree.pyx":811
 * 
 * 
 * cdef public class cKDTree [object ckdtree, type ckdtree_type]:             # <<<<<<<<<<<<<<
 *     """
 *     cKDTree(data, leafsize=16, compact_nodes=True, copy_data=False,
 */
struct ckdtree {
  PyObject_HEAD
  struct __pyx_vtabstruct_7ckdtree_cKDTree *__pyx_vtab;
  std::vector<struct ckdtreenode>  *tree_buffer;
  struct ckdtreenode *ctree;
  struct __pyx_obj_7ckdtree_cKDTreeNode *tree;
  PyArrayObject *data;
  __pyx_t_5numpy_float64_t *raw_data;
  __pyx_t_5numpy_intp_t n;
  __pyx_t_5numpy_intp_t m;
  __pyx_t_5numpy_intp_t leafsize;
  PyArrayObject *maxes;
  __pyx_t_5numpy_float64_t *raw_maxes;
  PyArrayObject *mins;
  __pyx_t_5numpy_float64_t *raw_mins;
  PyArrayObject *indices;
  __pyx_t_5numpy_intp_t *raw_indices;
  PyArrayObject *_median_workspace;
};

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) ckdtree_type;


/* "ckdtree.pyx":123
 * 
 * # Utility for building a coo matrix incrementally
 * cdef class coo_entries:             # <<<<<<<<<<<<<<
 *     cdef:
 *         np.intp_t n, n_max
 */

struct __pyx_vtabstruct_7ckdtree_coo_entries {
  int (*add)(struct __pyx_obj_7ckdtree_coo_entries *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t);
};
static struct __pyx_vtabstruct_7ckdtree_coo_entries *__pyx_vtabptr_7ckdtree_coo_entries;


/* "ckdtree.pyx":307
 * cdef np.intp_t GREATER = 2
 * 
 * cdef class RectRectDistanceTracker(object):             # <<<<<<<<<<<<<<
 *     cdef Rectangle rect1, rect2
 *     cdef np.float64_t p, epsfac, upper_bound
 */

struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker {
  int (*_init_stack)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
  int (*_resize_stack)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t);
  int (*_free_stack)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
  int (*push)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t);
  int (*push_less_of)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, struct ckdtreenode *);
  int (*push_greater_of)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, struct ckdtreenode *);
  int (*pop)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
};
static struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *__pyx_vtabptr_7ckdtree_RectRectDistanceTracker;
static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, struct ckdtreenode *);
static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, struct ckdtreenode *);
static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);


/* "ckdtree.pyx":485
 *     np.float64_t min_distance, max_distance
 * 
 * cdef class PointRectDistanceTracker(object):             # <<<<<<<<<<<<<<
 *     cdef Rectangle rect
 *     cdef np.float64_t *pt
 */

struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker {
  int (*_init_stack)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *);
  int (*_resize_stack)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, __pyx_t_5numpy_intp_t);
  int (*_free_stack)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *);
  PyObject *(*init)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, __pyx_t_5numpy_float64_t *, struct __pyx_obj_7ckdtree_Rectangle *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t);
  int (*push)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t);
  int (*push_less_of)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, struct ckdtreenode *);
  int (*push_greater_of)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, struct ckdtreenode *);
  int (*pop)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *);
};
static struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *__pyx_vtabptr_7ckdtree_PointRectDistanceTracker;
static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_push_less_of(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, struct ckdtreenode *);
static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_push_greater_of(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, struct ckdtreenode *);
static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_pop(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *);


/* "ckdtree.pyx":700
 * # ================================
 * 
 * cdef class cKDTreeNode:             # <<<<<<<<<<<<<<
 *     """
 *     class cKDTreeNode
 */

struct __pyx_vtabstruct_7ckdtree_cKDTreeNode {
  void (*_setup)(struct __pyx_obj_7ckdtree_cKDTreeNode *);
};
static struct __pyx_vtabstruct_7ckdtree_cKDTreeNode *__pyx_vtabptr_7ckdtree_cKDTreeNode;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) ckdtree_type;

/* "ckdtree.pyx":811
 * 
 * 
 * cdef public class cKDTree [object ckdtree, type ckdtree_type]:             # <<<<<<<<<<<<<<
 *     """
 *     cKDTree(data, leafsize=16, compact_nodes=True, copy_data=False,
 */

struct __pyx_vtabstruct_7ckdtree_cKDTree {
  int (*_post_init)(struct ckdtree *, struct ckdtreenode *);
  __pyx_t_5numpy_intp_t (*__pyx___build)(struct ckdtree *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int);
  __pyx_t_5numpy_intp_t (*__pyx___build_compact)(struct ckdtree *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int);
  int (*__pyx___query_ball_point_traverse_no_checking)(struct ckdtree *, PyObject *, struct ckdtreenode *);
  int (*__pyx___query_ball_point_traverse_checking)(struct ckdtree *, PyObject *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_PointRectDistanceTracker *);
  PyObject *(*__pyx___query_ball_point)(struct ckdtree *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t);
  int (*__pyx___query_ball_tree_traverse_no_checking)(struct ckdtree *, struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *);
  int (*__pyx___query_ball_tree_traverse_checking)(struct ckdtree *, struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
  int (*__pyx___query_pairs_traverse_no_checking)(struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *);
  int (*__pyx___query_pairs_traverse_checking)(struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
  int (*__pyx___count_neighbors_traverse)(struct ckdtree *, struct ckdtree *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_intp_t *, __pyx_t_5numpy_intp_t *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
  int (*__pyx___sparse_distance_matrix_traverse)(struct ckdtree *, struct ckdtree *, struct __pyx_obj_7ckdtree_coo_entries *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *);
};
static struct __pyx_vtabstruct_7ckdtree_cKDTree *__pyx_vtabptr_7ckdtree_cKDTree;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferFallbackError(void);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
static CYTHON_INLINE int __Pyx_div_int(int, int); /* proto */

#define UNARY_NEG_WOULD_OVERFLOW(x)            (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrCContig1d(type, buf, i0, s0) ((type)buf + i0)
#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_7ckdtree_11coo_entries_add(struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_i, __pyx_t_5numpy_intp_t __pyx_v_j, __pyx_t_5numpy_float64_t __pyx_v_v); /* proto*/
static int __pyx_f_7ckdtree_23RectRectDistanceTracker__init_stack(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self); /* proto*/
static int __pyx_f_7ckdtree_23RectRectDistanceTracker__resize_stack(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_new_max_size); /* proto*/
static int __pyx_f_7ckdtree_23RectRectDistanceTracker__free_stack(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self); /* proto*/
static int __pyx_f_7ckdtree_23RectRectDistanceTracker_push(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_which, __pyx_t_5numpy_intp_t __pyx_v_direction, __pyx_t_5numpy_intp_t __pyx_v_split_dim, __pyx_t_5numpy_float64_t __pyx_v_split_val); /* proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_which, struct ckdtreenode *__pyx_v_node); /* proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_which, struct ckdtreenode *__pyx_v_node); /* proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self); /* proto*/
static int __pyx_f_7ckdtree_24PointRectDistanceTracker__init_stack(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self); /* proto*/
static int __pyx_f_7ckdtree_24PointRectDistanceTracker__resize_stack(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_new_max_size); /* proto*/
static int __pyx_f_7ckdtree_24PointRectDistanceTracker__free_stack(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7ckdtree_24PointRectDistanceTracker_init(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_pt, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps, __pyx_t_5numpy_float64_t __pyx_v_upper_bound); /* proto*/
static int __pyx_f_7ckdtree_24PointRectDistanceTracker_push(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_direction, __pyx_t_5numpy_intp_t __pyx_v_split_dim, __pyx_t_5numpy_float64_t __pyx_v_split_val); /* proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_push_less_of(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, struct ckdtreenode *__pyx_v_node); /* proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_push_greater_of(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, struct ckdtreenode *__pyx_v_node); /* proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_pop(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self); /* proto*/
static void __pyx_f_7ckdtree_11cKDTreeNode__setup(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree__post_init(struct ckdtree *__pyx_v_self, struct ckdtreenode *__pyx_v_node); /* proto*/
static __pyx_t_5numpy_intp_t __pyx_f_7ckdtree_7cKDTree___build(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_start_idx, __pyx_t_5numpy_intp_t __pyx_v_end_idx, __pyx_t_5numpy_float64_t *__pyx_v_maxes, __pyx_t_5numpy_float64_t *__pyx_v_mins, int __pyx_v__median); /* proto*/
static __pyx_t_5numpy_intp_t __pyx_f_7ckdtree_7cKDTree___build_compact(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_start_idx, __pyx_t_5numpy_intp_t __pyx_v_end_idx, __pyx_t_5numpy_float64_t *__pyx_v_mins, __pyx_t_5numpy_float64_t *__pyx_v_maxes, int __pyx_v__median); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___query_ball_point_traverse_no_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___query_ball_point_traverse_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node, struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_tracker); /* proto*/
static PyObject *__pyx_f_7ckdtree_7cKDTree___query_ball_point(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___query_ball_tree_traverse_no_checking(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___query_ball_tree_traverse_checking(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___query_pairs_traverse_no_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___query_pairs_traverse_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___count_neighbors_traverse(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, __pyx_t_5numpy_intp_t __pyx_v_n_queries, __pyx_t_5numpy_float64_t *__pyx_v_r, __pyx_t_5numpy_intp_t *__pyx_v_results, __pyx_t_5numpy_intp_t *__pyx_v_idx, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker); /* proto*/
static int __pyx_f_7ckdtree_7cKDTree___sparse_distance_matrix_traverse(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'ckdtree' */
static PyTypeObject *__pyx_ptype_7ckdtree_coo_entries = 0;
static PyTypeObject *__pyx_ptype_7ckdtree_Rectangle = 0;
static PyTypeObject *__pyx_ptype_7ckdtree_RectRectDistanceTracker = 0;
static PyTypeObject *__pyx_ptype_7ckdtree_PointRectDistanceTracker = 0;
static PyTypeObject *__pyx_ptype_7ckdtree_cKDTreeNode = 0;
static PyTypeObject *__pyx_ptype_7ckdtree_cKDTree = 0;
static __pyx_t_5numpy_intp_t __pyx_v_7ckdtree_LESS;
static __pyx_t_5numpy_intp_t __pyx_v_7ckdtree_GREATER;
static CYTHON_INLINE int __pyx_f_7ckdtree_set_add_ordered_pair(PyObject *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t); /*proto*/
static CYTHON_INLINE int __pyx_f_7ckdtree_list_append(PyObject *, __pyx_t_5numpy_intp_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_point_interval_p(__pyx_t_5numpy_float64_t *, struct __pyx_obj_7ckdtree_Rectangle *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_point_interval_p(__pyx_t_5numpy_float64_t *, struct __pyx_obj_7ckdtree_Rectangle *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_interval_interval_p(struct __pyx_obj_7ckdtree_Rectangle *, struct __pyx_obj_7ckdtree_Rectangle *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_interval_interval_p(struct __pyx_obj_7ckdtree_Rectangle *, struct __pyx_obj_7ckdtree_Rectangle *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_point_rect_p_inf(__pyx_t_5numpy_float64_t *, struct __pyx_obj_7ckdtree_Rectangle *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_point_rect_p_inf(__pyx_t_5numpy_float64_t *, struct __pyx_obj_7ckdtree_Rectangle *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_rect_rect_p_inf(struct __pyx_obj_7ckdtree_Rectangle *, struct __pyx_obj_7ckdtree_Rectangle *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_rect_rect_p_inf(struct __pyx_obj_7ckdtree_Rectangle *, struct __pyx_obj_7ckdtree_Rectangle *); /*proto*/
static CYTHON_INLINE void __pyx_f_7ckdtree_index_swap(__pyx_t_5numpy_intp_t *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t); /*proto*/
static int __pyx_f_7ckdtree_partition_node_indices(__pyx_t_5numpy_float64_t *, __pyx_t_5numpy_intp_t *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t = { "intp_t", NULL, sizeof(__pyx_t_5numpy_intp_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_intp_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_intp_t), 0 };
#define __Pyx_MODULE_NAME "ckdtree"
int __pyx_module_is_main_ckdtree = 0;

/* Implementation of 'ckdtree' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_pf_7ckdtree_new_object(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static int __pyx_pf_7ckdtree_11coo_entries___init__(struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11coo_entries_2to_matrix(struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_self, PyObject *__pyx_v_shape); /* proto */
static int __pyx_pf_7ckdtree_9Rectangle___init__(struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_self, PyObject *__pyx_v_mins_arr, PyObject *__pyx_v_maxes_arr); /* proto */
static int __pyx_pf_7ckdtree_23RectRectDistanceTracker___init__(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps, __pyx_t_5numpy_float64_t __pyx_v_upper_bound); /* proto */
static void __pyx_pf_7ckdtree_23RectRectDistanceTracker_2__dealloc__(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self); /* proto */
static void __pyx_pf_7ckdtree_24PointRectDistanceTracker___dealloc__(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_11data_points___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_7indices___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_6lesser___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_7greater___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_5level___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_9split_dim___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_8children___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_5split___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_7ckdtree_7cKDTree___init__(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_data, __pyx_t_5numpy_intp_t __pyx_v_leafsize, PyObject *__pyx_v_compact_nodes, PyObject *__pyx_v_copy_data, PyObject *__pyx_v_balanced_tree); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_2__deallocate__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_5query__thread_func(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__dd, PyObject *__pyx_v__ii, PyObject *__pyx_v__xx, PyObject *__pyx_v__j, PyObject *__pyx_v_n, PyObject *__pyx_v_CHUNK, PyObject *__pyx_v_p, PyObject *__pyx_v_k, PyObject *__pyx_v_eps, PyObject *__pyx_v_dub); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_4query(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_x, __pyx_t_5numpy_intp_t __pyx_v_k, __pyx_t_5numpy_float64_t __pyx_v_eps, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_distance_upper_bound, __pyx_t_5numpy_intp_t __pyx_v_n_jobs); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_6query_ball_point(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_8query_ball_tree(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_10query_pairs(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_12count_neighbors(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, PyObject *__pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_14sparse_distance_matrix(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, __pyx_t_5numpy_float64_t __pyx_v_max_distance, __pyx_t_5numpy_float64_t __pyx_v_p); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_16__reduce__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_18__getstate__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_20__setstate__(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_4tree___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_4data___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_1n___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_1m___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_8leafsize___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_5maxes___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_4mins___get__(struct ckdtree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7ckdtree_7cKDTree_7indices___get__(struct ckdtree *__pyx_v_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_7ckdtree_coo_entries(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ckdtree_Rectangle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ckdtree_RectRectDistanceTracker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ckdtree_PointRectDistanceTracker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ckdtree_cKDTreeNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7ckdtree_cKDTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_B[] = "B";
static char __pyx_k_C[] = "C";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "_j";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_n[] = "n";
static char __pyx_k_p[] = "p";
static char __pyx_k_q[] = "q";
static char __pyx_k_r[] = "r";
static char __pyx_k_x[] = "x";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_dd[] = "_dd";
static char __pyx_k_ii[] = "_ii";
static char __pyx_k_np[] = "np";
static char __pyx_k_xx[] = "_xx";
static char __pyx_k_all[] = "__all__";
static char __pyx_k_dub[] = "dub";
static char __pyx_k_eps[] = "eps";
static char __pyx_k_inf[] = "inf";
static char __pyx_k_j_2[] = "j";
static char __pyx_k_new[] = "__new__";
static char __pyx_k_obj[] = "obj";
static char __pyx_k_amax[] = "amax";
static char __pyx_k_amin[] = "amin";
static char __pyx_k_args[] = "args";
static char __pyx_k_axis[] = "axis";
static char __pyx_k_copy[] = "copy";
static char __pyx_k_data[] = "data";
static char __pyx_k_dd_2[] = "dd";
static char __pyx_k_fill[] = "fill";
static char __pyx_k_ii_2[] = "ii";
static char __pyx_k_intp[] = "intp";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_ndim[] = "ndim";
static char __pyx_k_prod[] = "prod";
static char __pyx_k_self[] = "self";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_xx_2[] = "xx";
static char __pyx_k_CHUNK[] = "CHUNK";
static char __pyx_k_array[] = "array";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_ndmin[] = "ndmin";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_order[] = "order";
static char __pyx_k_other[] = "other";
static char __pyx_k_range[] = "range";
static char __pyx_k_rect1[] = "rect1";
static char __pyx_k_rect2[] = "rect2";
static char __pyx_k_scipy[] = "scipy";
static char __pyx_k_shape[] = "shape";
static char __pyx_k_start[] = "start";
static char __pyx_k_todok[] = "todok";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_Thread[] = "Thread";
static char __pyx_k_arange[] = "arange";
static char __pyx_k_astype[] = "astype";
static char __pyx_k_daemon[] = "daemon";
static char __pyx_k_hstack[] = "hstack";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_lesser[] = "lesser";
static char __pyx_k_n_jobs[] = "n_jobs";
static char __pyx_k_object[] = "object";
static char __pyx_k_resize[] = "resize";
static char __pyx_k_sparse[] = "sparse";
static char __pyx_k_target[] = "target";
static char __pyx_k_asarray[] = "asarray";
static char __pyx_k_cKDTree[] = "cKDTree";
static char __pyx_k_ckdtree[] = "ckdtree";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_greater[] = "greater";
static char __pyx_k_indices[] = "indices";
static char __pyx_k_ndindex[] = "ndindex";
static char __pyx_k_newaxis[] = "newaxis";
static char __pyx_k_reshape[] = "reshape";
static char __pyx_k_getstate[] = "__getstate__";
static char __pyx_k_leafsize[] = "leafsize";
static char __pyx_k_mins_arr[] = "mins_arr";
static char __pyx_k_copy_data[] = "copy_data";
static char __pyx_k_cpu_count[] = "cpu_count";
static char __pyx_k_maxes_arr[] = "maxes_arr";
static char __pyx_k_threading[] = "threading";
static char __pyx_k_to_matrix[] = "to_matrix";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_coo_matrix[] = "coo_matrix";
static char __pyx_k_new_object[] = "new_object";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_thread_func[] = "_thread_func";
static char __pyx_k_upper_bound[] = "upper_bound";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_max_distance[] = "max_distance";
static char __pyx_k_scipy_sparse[] = "scipy.sparse";
static char __pyx_k_balanced_tree[] = "balanced_tree";
static char __pyx_k_compact_nodes[] = "compact_nodes";
static char __pyx_k_multiprocessing[] = "multiprocessing";
static char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static char __pyx_k_distance_upper_bound[] = "distance_upper_bound";
static char __pyx_k_query_locals__thread_func[] = "query.<locals>._thread_func";
static char __pyx_k_leafsize_must_be_at_least_1[] = "leafsize must be at least 1";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_home_rgommers_Code_scipy_scipy[] = "/home/rgommers/Code/scipy/scipy/spatial/ckdtree/ckdtree.pyx";
static char __pyx_k_Trees_passed_to_count_neighbors[] = "Trees passed to count_neighbors have different dimensionality";
static char __pyx_k_Trees_passed_to_query_ball_tree[] = "Trees passed to query_ball_tree have different dimensionality";
static char __pyx_k_Trees_passed_to_sparse_distance[] = "Trees passed to sparse_distance_matrix have different dimensionality";
static char __pyx_k_query_ball_point_self_x_r_p_2_e[] = "\n        query_ball_point(self, x, r, p=2., eps=0)\n        \n        Find all points within distance r of point(s) x.\n\n        Parameters\n        ----------\n        x : array_like, shape tuple + (self.m,)\n            The point or points to search for neighbors of.\n        r : positive float\n            The radius of points to return.\n        p : float, optional\n            Which Minkowski p-norm to use.  Should be in the range [1, inf].\n        eps : nonnegative float, optional\n            Approximate search. Branches of the tree are not explored if their\n            nearest points are further than ``r / (1 + eps)``, and branches are\n            added in bulk if their furthest points are nearer than\n            ``r * (1 + eps)``.\n\n        Returns\n        -------\n        results : list or array of lists\n            If `x` is a single point, returns a list of the indices of the\n            neighbors of `x`. If `x` is an array of points, returns an object\n            array of shape tuple containing lists of neighbors.\n\n        Notes\n        -----\n        If you have many points whose neighbors you want to find, you may save\n        substantial amounts of time by putting them in a cKDTree and using\n        query_ball_tree.\n\n        Examples\n        --------\n        >>> from scipy import spatial\n        >>> x, y = np.mgrid[0:4, 0:4]\n        >>> points = zip(x.ravel(), y.ravel())\n        >>> tree = spatial.cKDTree(points)\n        >>> tree.query_ball_point([2, 0], 1)\n        [4, 8, 9, 12]\n\n        ";
static char __pyx_k_r_must_be_either_a_single_value[] = "r must be either a single value or a one-dimensional array of values";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Only_p_norms_with_1_p_infinity_p[] = "Only p-norms with 1<=p<=infinity permitted";
static char __pyx_k_Searching_for_a_d_dimensional_po[] = "Searching for a %d-dimensional point in a %d-dimensional KDTree";
static char __pyx_k_cKDTree_query_ball_point_line_14[] = "cKDTree.query_ball_point (line 1466)";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_rect1_and_rect2_have_different_d[] = "rect1 and rect2 have different dimensions";
static char __pyx_k_x_must_consist_of_vectors_of_len[] = "x must consist of vectors of length %d but has shape %s";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_CHUNK;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_Only_p_norms_with_1_p_infinity_p;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Searching_for_a_d_dimensional_po;
static PyObject *__pyx_n_s_Thread;
static PyObject *__pyx_kp_s_Trees_passed_to_count_neighbors;
static PyObject *__pyx_kp_s_Trees_passed_to_query_ball_tree;
static PyObject *__pyx_kp_s_Trees_passed_to_sparse_distance;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_amax;
static PyObject *__pyx_n_s_amin;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_ascontiguousarray;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_balanced_tree;
static PyObject *__pyx_n_s_cKDTree;
static PyObject *__pyx_kp_u_cKDTree_query_ball_point_line_14;
static PyObject *__pyx_n_s_ckdtree;
static PyObject *__pyx_n_s_compact_nodes;
static PyObject *__pyx_n_s_coo_matrix;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_copy_data;
static PyObject *__pyx_n_s_cpu_count;
static PyObject *__pyx_n_s_daemon;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_dd;
static PyObject *__pyx_n_s_dd_2;
static PyObject *__pyx_n_s_distance_upper_bound;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dub;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_eps;
static PyObject *__pyx_n_s_fill;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_greater;
static PyObject *__pyx_kp_s_home_rgommers_Code_scipy_scipy;
static PyObject *__pyx_n_s_hstack;
static PyObject *__pyx_n_s_ii;
static PyObject *__pyx_n_s_ii_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_intp;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_j_2;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_leafsize;
static PyObject *__pyx_kp_s_leafsize_must_be_at_least_1;
static PyObject *__pyx_n_s_lesser;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_distance;
static PyObject *__pyx_n_s_maxes_arr;
static PyObject *__pyx_n_s_mins_arr;
static PyObject *__pyx_n_s_multiprocessing;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_jobs;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_ndindex;
static PyObject *__pyx_n_s_ndmin;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_object;
static PyObject *__pyx_n_s_newaxis;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_prod;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_u_query_ball_point_self_x_r_p_2_e;
static PyObject *__pyx_n_s_query_locals__thread_func;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_kp_s_r_must_be_either_a_single_value;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rect1;
static PyObject *__pyx_kp_s_rect1_and_rect2_have_different_d;
static PyObject *__pyx_n_s_rect2;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_scipy;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sparse;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thread_func;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_to_matrix;
static PyObject *__pyx_n_s_todok;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_upper_bound;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_kp_s_x_must_consist_of_vectors_of_len;
static PyObject *__pyx_n_s_xx;
static PyObject *__pyx_n_s_xx_2;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static __pyx_t_5numpy_float64_t __pyx_k__4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_slice__7;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_slice__16;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__28;

/* "ckdtree.pyx":63
 * # ======================
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_1new_object(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
static PyMethodDef __pyx_mdef_7ckdtree_1new_object = {"new_object", (PyCFunction)__pyx_pw_7ckdtree_1new_object, METH_O, 0};
static PyObject *__pyx_pw_7ckdtree_1new_object(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_object (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_new_object(__pyx_self, ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_new_object(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_object", 0);

  /* "ckdtree.pyx":64
 * 
 * def new_object(obj):
 *     return obj.__new__(obj)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "ckdtree_cpp_utils.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_new); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_obj);
    __Pyx_GIVEREF(__pyx_v_obj);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_obj);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":63
 * # ======================
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ckdtree.new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":96
 * # test is optimized away.
 * 
 * cdef inline int set_add_ordered_pair(set results,             # <<<<<<<<<<<<<<
 *                                      np.intp_t i, np.intp_t j) except -1:
 *     if i > j:
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_set_add_ordered_pair(PyObject *__pyx_v_results, __pyx_t_5numpy_intp_t __pyx_v_i, __pyx_t_5numpy_intp_t __pyx_v_j) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_add_ordered_pair", 0);

  /* "ckdtree.pyx":98
 * cdef inline int set_add_ordered_pair(set results,
 *                                      np.intp_t i, np.intp_t j) except -1:
 *     if i > j:             # <<<<<<<<<<<<<<
 *         i, j = j, i
 *     if sizeof(long) < sizeof(np.intp_t):
 */
  __pyx_t_1 = ((__pyx_v_i > __pyx_v_j) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":99
 *                                      np.intp_t i, np.intp_t j) except -1:
 *     if i > j:
 *         i, j = j, i             # <<<<<<<<<<<<<<
 *     if sizeof(long) < sizeof(np.intp_t):
 *         # Win 64
 */
    __pyx_t_2 = __pyx_v_j;
    __pyx_t_3 = __pyx_v_i;
    __pyx_v_i = __pyx_t_2;
    __pyx_v_j = __pyx_t_3;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":100
 *     if i > j:
 *         i, j = j, i
 *     if sizeof(long) < sizeof(np.intp_t):             # <<<<<<<<<<<<<<
 *         # Win 64
 *         results.add((int(i), int(j)))
 */
  __pyx_t_1 = (((sizeof(long)) < (sizeof(__pyx_t_5numpy_intp_t))) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":102
 *     if sizeof(long) < sizeof(np.intp_t):
 *         # Win 64
 *         results.add((int(i), int(j)))             # <<<<<<<<<<<<<<
 *     else:
 *         # Other platforms
 */
    if (unlikely(__pyx_v_results == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_j); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = PySet_Add(__pyx_v_results, __pyx_t_6); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "ckdtree.pyx":105
 *     else:
 *         # Other platforms
 *         results.add((i, j))             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    if (unlikely(__pyx_v_results == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_i); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_j); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = PySet_Add(__pyx_v_results, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "ckdtree.pyx":106
 *         # Other platforms
 *         results.add((i, j))
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int list_append(list results, np.intp_t i) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":96
 * # test is optimized away.
 * 
 * cdef inline int set_add_ordered_pair(set results,             # <<<<<<<<<<<<<<
 *                                      np.intp_t i, np.intp_t j) except -1:
 *     if i > j:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ckdtree.set_add_ordered_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":108
 *     return 0
 * 
 * cdef inline int list_append(list results, np.intp_t i) except -1:             # <<<<<<<<<<<<<<
 *     if sizeof(long) < sizeof(np.intp_t):
 *         # Win 64
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_list_append(PyObject *__pyx_v_results, __pyx_t_5numpy_intp_t __pyx_v_i) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_append", 0);

  /* "ckdtree.pyx":109
 * 
 * cdef inline int list_append(list results, np.intp_t i) except -1:
 *     if sizeof(long) < sizeof(np.intp_t):             # <<<<<<<<<<<<<<
 *         # Win 64
 *         if i <= <np.intp_t>LONG_MAX:  # CHECK COMPARISON DIRECTION
 */
  __pyx_t_1 = (((sizeof(long)) < (sizeof(__pyx_t_5numpy_intp_t))) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":111
 *     if sizeof(long) < sizeof(np.intp_t):
 *         # Win 64
 *         if i <= <np.intp_t>LONG_MAX:  # CHECK COMPARISON DIRECTION             # <<<<<<<<<<<<<<
 *             results.append(int(i))
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_i <= ((__pyx_t_5numpy_intp_t)LONG_MAX)) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":112
 *         # Win 64
 *         if i <= <np.intp_t>LONG_MAX:  # CHECK COMPARISON DIRECTION
 *             results.append(int(i))             # <<<<<<<<<<<<<<
 *         else:
 *             results.append(i)
 */
      if (unlikely(__pyx_v_results == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_results, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "ckdtree.pyx":114
 *             results.append(int(i))
 *         else:
 *             results.append(i)             # <<<<<<<<<<<<<<
 *     else:
 *         # Other platforms
 */
      if (unlikely(__pyx_v_results == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_results, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":117
 *     else:
 *         # Other platforms
 *         results.append(i)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    if (unlikely(__pyx_v_results == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_results, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":118
 *         # Other platforms
 *         results.append(i)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":108
 *     return 0
 * 
 * cdef inline int list_append(list results, np.intp_t i) except -1:             # <<<<<<<<<<<<<<
 *     if sizeof(long) < sizeof(np.intp_t):
 *         # Win 64
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ckdtree.list_append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":132
 *         np.float64_t *v_data
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.n = 0
 *         self.n_max = 10
 */

/* Python wrapper */
static int __pyx_pw_7ckdtree_11coo_entries_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7ckdtree_11coo_entries_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7ckdtree_11coo_entries___init__(((struct __pyx_obj_7ckdtree_coo_entries *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7ckdtree_11coo_entries___init__(struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ckdtree.pyx":133
 * 
 *     def __init__(self):
 *         self.n = 0             # <<<<<<<<<<<<<<
 *         self.n_max = 10
 *         self.i = np.empty(self.n_max, dtype=np.intp)
 */
  __pyx_v_self->n = 0;

  /* "ckdtree.pyx":134
 *     def __init__(self):
 *         self.n = 0
 *         self.n_max = 10             # <<<<<<<<<<<<<<
 *         self.i = np.empty(self.n_max, dtype=np.intp)
 *         self.j = np.empty(self.n_max, dtype=np.intp)
 */
  __pyx_v_self->n_max = 10;

  /* "ckdtree.pyx":135
 *         self.n = 0
 *         self.n_max = 10
 *         self.i = np.empty(self.n_max, dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.j = np.empty(self.n_max, dtype=np.intp)
 *         self.v = np.empty(self.n_max, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_max); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->i);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->i));
  __pyx_v_self->i = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":136
 *         self.n_max = 10
 *         self.i = np.empty(self.n_max, dtype=np.intp)
 *         self.j = np.empty(self.n_max, dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.v = np.empty(self.n_max, dtype=np.float64)
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_max); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_intp); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->j);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->j));
  __pyx_v_self->j = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ckdtree.pyx":137
 *         self.i = np.empty(self.n_max, dtype=np.intp)
 *         self.j = np.empty(self.n_max, dtype=np.intp)
 *         self.v = np.empty(self.n_max, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_max); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->v);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->v));
  __pyx_v_self->v = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":138
 *         self.j = np.empty(self.n_max, dtype=np.intp)
 *         self.v = np.empty(self.n_max, dtype=np.float64)
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)             # <<<<<<<<<<<<<<
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->i);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->i_data = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":139
 *         self.v = np.empty(self.n_max, dtype=np.float64)
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)             # <<<<<<<<<<<<<<
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->j);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->j_data = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":140
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)             # <<<<<<<<<<<<<<
 * 
 *     cdef int add(coo_entries self, np.intp_t i, np.intp_t j,
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->v);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->v_data = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":132
 *         np.float64_t *v_data
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.n = 0
 *         self.n_max = 10
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ckdtree.coo_entries.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":142
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 * 
 *     cdef int add(coo_entries self, np.intp_t i, np.intp_t j,             # <<<<<<<<<<<<<<
 *                  np.float64_t v) except -1:
 *         cdef np.intp_t k
 */

static int __pyx_f_7ckdtree_11coo_entries_add(struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_i, __pyx_t_5numpy_intp_t __pyx_v_j, __pyx_t_5numpy_float64_t __pyx_v_v) {
  __pyx_t_5numpy_intp_t __pyx_v_k;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "ckdtree.pyx":145
 *                  np.float64_t v) except -1:
 *         cdef np.intp_t k
 *         if self.n == self.n_max:             # <<<<<<<<<<<<<<
 *             self.n_max *= 2
 *             self.i.resize(self.n_max)
 */
  __pyx_t_1 = ((__pyx_v_self->n == __pyx_v_self->n_max) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":146
 *         cdef np.intp_t k
 *         if self.n == self.n_max:
 *             self.n_max *= 2             # <<<<<<<<<<<<<<
 *             self.i.resize(self.n_max)
 *             self.j.resize(self.n_max)
 */
    __pyx_v_self->n_max = (__pyx_v_self->n_max * 2);

    /* "ckdtree.pyx":147
 *         if self.n == self.n_max:
 *             self.n_max *= 2
 *             self.i.resize(self.n_max)             # <<<<<<<<<<<<<<
 *             self.j.resize(self.n_max)
 *             self.v.resize(self.n_max)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->i), __pyx_n_s_resize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_max); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ckdtree.pyx":148
 *             self.n_max *= 2
 *             self.i.resize(self.n_max)
 *             self.j.resize(self.n_max)             # <<<<<<<<<<<<<<
 *             self.v.resize(self.n_max)
 *             self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->j), __pyx_n_s_resize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_max); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ckdtree.pyx":149
 *             self.i.resize(self.n_max)
 *             self.j.resize(self.n_max)
 *             self.v.resize(self.n_max)             # <<<<<<<<<<<<<<
 *             self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *             self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->v), __pyx_n_s_resize); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n_max); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ckdtree.pyx":150
 *             self.j.resize(self.n_max)
 *             self.v.resize(self.n_max)
 *             self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)             # <<<<<<<<<<<<<<
 *             self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *             self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->i);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_self->i_data = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ckdtree.pyx":151
 *             self.v.resize(self.n_max)
 *             self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *             self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)             # <<<<<<<<<<<<<<
 *             self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 * 
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->j);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_self->j_data = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ckdtree.pyx":152
 *             self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *             self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *             self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)             # <<<<<<<<<<<<<<
 * 
 *         k = self.n
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->v);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_self->v_data = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":154
 *             self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 * 
 *         k = self.n             # <<<<<<<<<<<<<<
 *         self.i_data[k] = i
 *         self.j_data[k] = j
 */
  __pyx_t_7 = __pyx_v_self->n;
  __pyx_v_k = __pyx_t_7;

  /* "ckdtree.pyx":155
 * 
 *         k = self.n
 *         self.i_data[k] = i             # <<<<<<<<<<<<<<
 *         self.j_data[k] = j
 *         self.v_data[k] = v
 */
  (__pyx_v_self->i_data[__pyx_v_k]) = __pyx_v_i;

  /* "ckdtree.pyx":156
 *         k = self.n
 *         self.i_data[k] = i
 *         self.j_data[k] = j             # <<<<<<<<<<<<<<
 *         self.v_data[k] = v
 *         self.n += 1
 */
  (__pyx_v_self->j_data[__pyx_v_k]) = __pyx_v_j;

  /* "ckdtree.pyx":157
 *         self.i_data[k] = i
 *         self.j_data[k] = j
 *         self.v_data[k] = v             # <<<<<<<<<<<<<<
 *         self.n += 1
 * 
 */
  (__pyx_v_self->v_data[__pyx_v_k]) = __pyx_v_v;

  /* "ckdtree.pyx":158
 *         self.j_data[k] = j
 *         self.v_data[k] = v
 *         self.n += 1             # <<<<<<<<<<<<<<
 * 
 *     def to_matrix(coo_entries self, shape=None):
 */
  __pyx_v_self->n = (__pyx_v_self->n + 1);

  /* "ckdtree.pyx":142
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 * 
 *     cdef int add(coo_entries self, np.intp_t i, np.intp_t j,             # <<<<<<<<<<<<<<
 *                  np.float64_t v) except -1:
 *         cdef np.intp_t k
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ckdtree.coo_entries.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":160
 *         self.n += 1
 * 
 *     def to_matrix(coo_entries self, shape=None):             # <<<<<<<<<<<<<<
 *         # Shrink arrays to size
 *         self.i.resize(self.n)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11coo_entries_3to_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11coo_entries_3to_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_matrix") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_matrix", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.coo_entries.to_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_11coo_entries_2to_matrix(((struct __pyx_obj_7ckdtree_coo_entries *)__pyx_v_self), __pyx_v_shape);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11coo_entries_2to_matrix(struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_self, PyObject *__pyx_v_shape) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_matrix", 0);

  /* "ckdtree.pyx":162
 *     def to_matrix(coo_entries self, shape=None):
 *         # Shrink arrays to size
 *         self.i.resize(self.n)             # <<<<<<<<<<<<<<
 *         self.j.resize(self.n)
 *         self.v.resize(self.n)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->i), __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":163
 *         # Shrink arrays to size
 *         self.i.resize(self.n)
 *         self.j.resize(self.n)             # <<<<<<<<<<<<<<
 *         self.v.resize(self.n)
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->j), __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":164
 *         self.i.resize(self.n)
 *         self.j.resize(self.n)
 *         self.v.resize(self.n)             # <<<<<<<<<<<<<<
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->v), __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":165
 *         self.j.resize(self.n)
 *         self.v.resize(self.n)
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)             # <<<<<<<<<<<<<<
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->i);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self->i_data = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_1)));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":166
 *         self.v.resize(self.n)
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)             # <<<<<<<<<<<<<<
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 *         self.n_max = self.n
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->j);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self->j_data = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_1)));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":167
 *         self.i_data = <np.intp_t *>np.PyArray_DATA(self.i)
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)             # <<<<<<<<<<<<<<
 *         self.n_max = self.n
 *         return scipy.sparse.coo_matrix((self.v, (self.i, self.j)),
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->v);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self->v_data = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_1)));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":168
 *         self.j_data = <np.intp_t *>np.PyArray_DATA(self.j)
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 *         self.n_max = self.n             # <<<<<<<<<<<<<<
 *         return scipy.sparse.coo_matrix((self.v, (self.i, self.j)),
 *                                        shape=shape)
 */
  __pyx_t_6 = __pyx_v_self->n;
  __pyx_v_self->n_max = __pyx_t_6;

  /* "ckdtree.pyx":169
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 *         self.n_max = self.n
 *         return scipy.sparse.coo_matrix((self.v, (self.i, self.j)),             # <<<<<<<<<<<<<<
 *                                        shape=shape)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_scipy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sparse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_coo_matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->i));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->i));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->i));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->j));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->j));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->j));
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->v));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->v));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self->v));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "ckdtree.pyx":170
 *         self.n_max = self.n
 *         return scipy.sparse.coo_matrix((self.v, (self.i, self.j)),
 *                                        shape=shape)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_shape, __pyx_v_shape) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":169
 *         self.v_data = <np.float64_t*>np.PyArray_DATA(self.v)
 *         self.n_max = self.n
 *         return scipy.sparse.coo_matrix((self.v, (self.i, self.j)),             # <<<<<<<<<<<<<<
 *                                        shape=shape)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":160
 *         self.n += 1
 * 
 *     def to_matrix(coo_entries self, shape=None):             # <<<<<<<<<<<<<<
 *         # Shrink arrays to size
 *         self.i.resize(self.n)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ckdtree.coo_entries.to_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":182
 *     cdef np.ndarray mins_arr, maxes_arr
 * 
 *     def __init__(self, mins_arr, maxes_arr):             # <<<<<<<<<<<<<<
 *         # Copy array data
 *         self.mins_arr = np.array(mins_arr, dtype=np.float64, order='C')
 */

/* Python wrapper */
static int __pyx_pw_7ckdtree_9Rectangle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7ckdtree_9Rectangle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mins_arr = 0;
  PyObject *__pyx_v_maxes_arr = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mins_arr,&__pyx_n_s_maxes_arr,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mins_arr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxes_arr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mins_arr = values[0];
    __pyx_v_maxes_arr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.Rectangle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_9Rectangle___init__(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_v_self), __pyx_v_mins_arr, __pyx_v_maxes_arr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7ckdtree_9Rectangle___init__(struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_self, PyObject *__pyx_v_mins_arr, PyObject *__pyx_v_maxes_arr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ckdtree.pyx":184
 *     def __init__(self, mins_arr, maxes_arr):
 *         # Copy array data
 *         self.mins_arr = np.array(mins_arr, dtype=np.float64, order='C')             # <<<<<<<<<<<<<<
 *         self.maxes_arr = np.array(maxes_arr, dtype=np.float64, order='C')
 *         self.mins = <np.float64_t*>np.PyArray_DATA(self.mins_arr)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_mins_arr);
  __Pyx_GIVEREF(__pyx_v_mins_arr);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_mins_arr);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_s_C) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->mins_arr);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mins_arr));
  __pyx_v_self->mins_arr = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":185
 *         # Copy array data
 *         self.mins_arr = np.array(mins_arr, dtype=np.float64, order='C')
 *         self.maxes_arr = np.array(maxes_arr, dtype=np.float64, order='C')             # <<<<<<<<<<<<<<
 *         self.mins = <np.float64_t*>np.PyArray_DATA(self.mins_arr)
 *         self.maxes = <np.float64_t*>np.PyArray_DATA(self.maxes_arr)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_maxes_arr);
  __Pyx_GIVEREF(__pyx_v_maxes_arr);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_maxes_arr);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_C) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->maxes_arr);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->maxes_arr));
  __pyx_v_self->maxes_arr = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ckdtree.pyx":186
 *         self.mins_arr = np.array(mins_arr, dtype=np.float64, order='C')
 *         self.maxes_arr = np.array(maxes_arr, dtype=np.float64, order='C')
 *         self.mins = <np.float64_t*>np.PyArray_DATA(self.mins_arr)             # <<<<<<<<<<<<<<
 *         self.maxes = <np.float64_t*>np.PyArray_DATA(self.maxes_arr)
 *         self.m = self.mins_arr.shape[0]
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->mins_arr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_self->mins = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_4)));
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ckdtree.pyx":187
 *         self.maxes_arr = np.array(maxes_arr, dtype=np.float64, order='C')
 *         self.mins = <np.float64_t*>np.PyArray_DATA(self.mins_arr)
 *         self.maxes = <np.float64_t*>np.PyArray_DATA(self.maxes_arr)             # <<<<<<<<<<<<<<
 *         self.m = self.mins_arr.shape[0]
 * 
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->maxes_arr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_self->maxes = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_4)));
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ckdtree.pyx":188
 *         self.mins = <np.float64_t*>np.PyArray_DATA(self.mins_arr)
 *         self.maxes = <np.float64_t*>np.PyArray_DATA(self.maxes_arr)
 *         self.m = self.mins_arr.shape[0]             # <<<<<<<<<<<<<<
 * 
 * # 1-d pieces
 */
  __pyx_v_self->m = (__pyx_v_self->mins_arr->dimensions[0]);

  /* "ckdtree.pyx":182
 *     cdef np.ndarray mins_arr, maxes_arr
 * 
 *     def __init__(self, mins_arr, maxes_arr):             # <<<<<<<<<<<<<<
 *         # Copy array data
 *         self.mins_arr = np.array(mins_arr, dtype=np.float64, order='C')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ckdtree.Rectangle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":192
 * # 1-d pieces
 * # These should only be used if p != infinity
 * cdef inline np.float64_t min_dist_point_interval_p(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect,
 *                                                    np.intp_t k,
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_point_interval_p(__pyx_t_5numpy_float64_t *__pyx_v_x, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect, __pyx_t_5numpy_intp_t __pyx_v_k, __pyx_t_5numpy_float64_t __pyx_v_p) {
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min_dist_point_interval_p", 0);

  /* "ckdtree.pyx":199
 *     a point in the hyperrectangle.
 *     """
 *     return dmax(0, dmax(rect.mins[k] - x[k], x[k] - rect.maxes[k])) ** p             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t max_dist_point_interval_p(np.float64_t* x,
 */
  __pyx_r = pow(dmax(0.0, dmax(((__pyx_v_rect->mins[__pyx_v_k]) - (__pyx_v_x[__pyx_v_k])), ((__pyx_v_x[__pyx_v_k]) - (__pyx_v_rect->maxes[__pyx_v_k])))), __pyx_v_p);
  goto __pyx_L0;

  /* "ckdtree.pyx":192
 * # 1-d pieces
 * # These should only be used if p != infinity
 * cdef inline np.float64_t min_dist_point_interval_p(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect,
 *                                                    np.intp_t k,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":201
 *     return dmax(0, dmax(rect.mins[k] - x[k], x[k] - rect.maxes[k])) ** p
 * 
 * cdef inline np.float64_t max_dist_point_interval_p(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect,
 *                                                    np.intp_t k,
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_point_interval_p(__pyx_t_5numpy_float64_t *__pyx_v_x, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect, __pyx_t_5numpy_intp_t __pyx_v_k, __pyx_t_5numpy_float64_t __pyx_v_p) {
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max_dist_point_interval_p", 0);

  /* "ckdtree.pyx":208
 *     a point in the hyperrectangle.
 *     """
 *     return dmax(rect.maxes[k] - x[k], x[k] - rect.mins[k]) ** p             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t min_dist_interval_interval_p(Rectangle rect1,
 */
  __pyx_r = pow(dmax(((__pyx_v_rect->maxes[__pyx_v_k]) - (__pyx_v_x[__pyx_v_k])), ((__pyx_v_x[__pyx_v_k]) - (__pyx_v_rect->mins[__pyx_v_k]))), __pyx_v_p);
  goto __pyx_L0;

  /* "ckdtree.pyx":201
 *     return dmax(0, dmax(rect.mins[k] - x[k], x[k] - rect.maxes[k])) ** p
 * 
 * cdef inline np.float64_t max_dist_point_interval_p(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect,
 *                                                    np.intp_t k,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":210
 *     return dmax(rect.maxes[k] - x[k], x[k] - rect.mins[k]) ** p
 * 
 * cdef inline np.float64_t min_dist_interval_interval_p(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                       Rectangle rect2,
 *                                                       np.intp_t k,
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_interval_interval_p(struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2, __pyx_t_5numpy_intp_t __pyx_v_k, __pyx_t_5numpy_float64_t __pyx_v_p) {
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min_dist_interval_interval_p", 0);

  /* "ckdtree.pyx":218
 *     """
 *     return dmax(0, dmax(rect1.mins[k] - rect2.maxes[k],
 *                         rect2.mins[k] - rect1.maxes[k])) ** p             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t max_dist_interval_interval_p(Rectangle rect1,
 */
  __pyx_r = pow(dmax(0.0, dmax(((__pyx_v_rect1->mins[__pyx_v_k]) - (__pyx_v_rect2->maxes[__pyx_v_k])), ((__pyx_v_rect2->mins[__pyx_v_k]) - (__pyx_v_rect1->maxes[__pyx_v_k])))), __pyx_v_p);
  goto __pyx_L0;

  /* "ckdtree.pyx":210
 *     return dmax(rect.maxes[k] - x[k], x[k] - rect.mins[k]) ** p
 * 
 * cdef inline np.float64_t min_dist_interval_interval_p(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                       Rectangle rect2,
 *                                                       np.intp_t k,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":220
 *                         rect2.mins[k] - rect1.maxes[k])) ** p
 * 
 * cdef inline np.float64_t max_dist_interval_interval_p(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                       Rectangle rect2,
 *                                                       np.intp_t k,
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_interval_interval_p(struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2, __pyx_t_5numpy_intp_t __pyx_v_k, __pyx_t_5numpy_float64_t __pyx_v_p) {
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max_dist_interval_interval_p", 0);

  /* "ckdtree.pyx":227
 *     two hyperrectangles.
 *     """
 *     return dmax(rect1.maxes[k] - rect2.mins[k], rect2.maxes[k] - rect1.mins[k]) ** p             # <<<<<<<<<<<<<<
 * 
 * # Interval arithmetic in m-D
 */
  __pyx_r = pow(dmax(((__pyx_v_rect1->maxes[__pyx_v_k]) - (__pyx_v_rect2->mins[__pyx_v_k])), ((__pyx_v_rect2->maxes[__pyx_v_k]) - (__pyx_v_rect1->mins[__pyx_v_k]))), __pyx_v_p);
  goto __pyx_L0;

  /* "ckdtree.pyx":220
 *                         rect2.mins[k] - rect1.maxes[k])) ** p
 * 
 * cdef inline np.float64_t max_dist_interval_interval_p(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                       Rectangle rect2,
 *                                                       np.intp_t k,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":233
 * 
 * # These should be used only for p == infinity
 * cdef inline np.float64_t min_dist_point_rect_p_inf(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect):
 *     """Compute the minimum distance between x and the given hyperrectangle."""
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_point_rect_p_inf(__pyx_t_5numpy_float64_t *__pyx_v_x, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect) {
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_min_dist;
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __Pyx_RefNannySetupContext("min_dist_point_rect_p_inf", 0);

  /* "ckdtree.pyx":237
 *     """Compute the minimum distance between x and the given hyperrectangle."""
 *     cdef np.intp_t i
 *     cdef np.float64_t min_dist = 0.             # <<<<<<<<<<<<<<
 *     for i in range(rect.m):
 *         min_dist = dmax(min_dist, dmax(rect.mins[i]-x[i], x[i]-rect.maxes[i]))
 */
  __pyx_v_min_dist = 0.;

  /* "ckdtree.pyx":238
 *     cdef np.intp_t i
 *     cdef np.float64_t min_dist = 0.
 *     for i in range(rect.m):             # <<<<<<<<<<<<<<
 *         min_dist = dmax(min_dist, dmax(rect.mins[i]-x[i], x[i]-rect.maxes[i]))
 *     return min_dist
 */
  __pyx_t_1 = __pyx_v_rect->m;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "ckdtree.pyx":239
 *     cdef np.float64_t min_dist = 0.
 *     for i in range(rect.m):
 *         min_dist = dmax(min_dist, dmax(rect.mins[i]-x[i], x[i]-rect.maxes[i]))             # <<<<<<<<<<<<<<
 *     return min_dist
 * 
 */
    __pyx_v_min_dist = dmax(__pyx_v_min_dist, dmax(((__pyx_v_rect->mins[__pyx_v_i]) - (__pyx_v_x[__pyx_v_i])), ((__pyx_v_x[__pyx_v_i]) - (__pyx_v_rect->maxes[__pyx_v_i]))));
  }

  /* "ckdtree.pyx":240
 *     for i in range(rect.m):
 *         min_dist = dmax(min_dist, dmax(rect.mins[i]-x[i], x[i]-rect.maxes[i]))
 *     return min_dist             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t max_dist_point_rect_p_inf(np.float64_t* x,
 */
  __pyx_r = __pyx_v_min_dist;
  goto __pyx_L0;

  /* "ckdtree.pyx":233
 * 
 * # These should be used only for p == infinity
 * cdef inline np.float64_t min_dist_point_rect_p_inf(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect):
 *     """Compute the minimum distance between x and the given hyperrectangle."""
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":242
 *     return min_dist
 * 
 * cdef inline np.float64_t max_dist_point_rect_p_inf(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect):
 *     """Compute the maximum distance between x and the given hyperrectangle."""
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_point_rect_p_inf(__pyx_t_5numpy_float64_t *__pyx_v_x, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect) {
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_max_dist;
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __Pyx_RefNannySetupContext("max_dist_point_rect_p_inf", 0);

  /* "ckdtree.pyx":246
 *     """Compute the maximum distance between x and the given hyperrectangle."""
 *     cdef np.intp_t i
 *     cdef np.float64_t max_dist = 0.             # <<<<<<<<<<<<<<
 *     for i in range(rect.m):
 *         max_dist = dmax(max_dist, dmax(rect.maxes[i]-x[i], x[i]-rect.mins[i]))
 */
  __pyx_v_max_dist = 0.;

  /* "ckdtree.pyx":247
 *     cdef np.intp_t i
 *     cdef np.float64_t max_dist = 0.
 *     for i in range(rect.m):             # <<<<<<<<<<<<<<
 *         max_dist = dmax(max_dist, dmax(rect.maxes[i]-x[i], x[i]-rect.mins[i]))
 *     return max_dist
 */
  __pyx_t_1 = __pyx_v_rect->m;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "ckdtree.pyx":248
 *     cdef np.float64_t max_dist = 0.
 *     for i in range(rect.m):
 *         max_dist = dmax(max_dist, dmax(rect.maxes[i]-x[i], x[i]-rect.mins[i]))             # <<<<<<<<<<<<<<
 *     return max_dist
 * 
 */
    __pyx_v_max_dist = dmax(__pyx_v_max_dist, dmax(((__pyx_v_rect->maxes[__pyx_v_i]) - (__pyx_v_x[__pyx_v_i])), ((__pyx_v_x[__pyx_v_i]) - (__pyx_v_rect->mins[__pyx_v_i]))));
  }

  /* "ckdtree.pyx":249
 *     for i in range(rect.m):
 *         max_dist = dmax(max_dist, dmax(rect.maxes[i]-x[i], x[i]-rect.mins[i]))
 *     return max_dist             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t min_dist_rect_rect_p_inf(Rectangle rect1,
 */
  __pyx_r = __pyx_v_max_dist;
  goto __pyx_L0;

  /* "ckdtree.pyx":242
 *     return min_dist
 * 
 * cdef inline np.float64_t max_dist_point_rect_p_inf(np.float64_t* x,             # <<<<<<<<<<<<<<
 *                                                    Rectangle rect):
 *     """Compute the maximum distance between x and the given hyperrectangle."""
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":251
 *     return max_dist
 * 
 * cdef inline np.float64_t min_dist_rect_rect_p_inf(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                   Rectangle rect2):
 *     """Compute the minimum distance between points in two hyperrectangles."""
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_min_dist_rect_rect_p_inf(struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2) {
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_min_dist;
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __Pyx_RefNannySetupContext("min_dist_rect_rect_p_inf", 0);

  /* "ckdtree.pyx":255
 *     """Compute the minimum distance between points in two hyperrectangles."""
 *     cdef np.intp_t i
 *     cdef np.float64_t min_dist = 0.             # <<<<<<<<<<<<<<
 *     for i in range(rect1.m):
 *         min_dist = dmax(min_dist, dmax(rect1.mins[i] - rect2.maxes[i],
 */
  __pyx_v_min_dist = 0.;

  /* "ckdtree.pyx":256
 *     cdef np.intp_t i
 *     cdef np.float64_t min_dist = 0.
 *     for i in range(rect1.m):             # <<<<<<<<<<<<<<
 *         min_dist = dmax(min_dist, dmax(rect1.mins[i] - rect2.maxes[i],
 *                                        rect2.mins[i] - rect1.maxes[i]))
 */
  __pyx_t_1 = __pyx_v_rect1->m;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "ckdtree.pyx":257
 *     cdef np.float64_t min_dist = 0.
 *     for i in range(rect1.m):
 *         min_dist = dmax(min_dist, dmax(rect1.mins[i] - rect2.maxes[i],             # <<<<<<<<<<<<<<
 *                                        rect2.mins[i] - rect1.maxes[i]))
 *     return min_dist
 */
    __pyx_v_min_dist = dmax(__pyx_v_min_dist, dmax(((__pyx_v_rect1->mins[__pyx_v_i]) - (__pyx_v_rect2->maxes[__pyx_v_i])), ((__pyx_v_rect2->mins[__pyx_v_i]) - (__pyx_v_rect1->maxes[__pyx_v_i]))));
  }

  /* "ckdtree.pyx":259
 *         min_dist = dmax(min_dist, dmax(rect1.mins[i] - rect2.maxes[i],
 *                                        rect2.mins[i] - rect1.maxes[i]))
 *     return min_dist             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t max_dist_rect_rect_p_inf(Rectangle rect1,
 */
  __pyx_r = __pyx_v_min_dist;
  goto __pyx_L0;

  /* "ckdtree.pyx":251
 *     return max_dist
 * 
 * cdef inline np.float64_t min_dist_rect_rect_p_inf(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                   Rectangle rect2):
 *     """Compute the minimum distance between points in two hyperrectangles."""
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":261
 *     return min_dist
 * 
 * cdef inline np.float64_t max_dist_rect_rect_p_inf(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                   Rectangle rect2):
 *     """Compute the maximum distance between points in two hyperrectangles."""
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_7ckdtree_max_dist_rect_rect_p_inf(struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2) {
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_max_dist;
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __Pyx_RefNannySetupContext("max_dist_rect_rect_p_inf", 0);

  /* "ckdtree.pyx":265
 *     """Compute the maximum distance between points in two hyperrectangles."""
 *     cdef np.intp_t i
 *     cdef np.float64_t max_dist = 0.             # <<<<<<<<<<<<<<
 *     for i in range(rect1.m):
 *         max_dist = dmax(max_dist, dmax(rect1.maxes[i] - rect2.mins[i],
 */
  __pyx_v_max_dist = 0.;

  /* "ckdtree.pyx":266
 *     cdef np.intp_t i
 *     cdef np.float64_t max_dist = 0.
 *     for i in range(rect1.m):             # <<<<<<<<<<<<<<
 *         max_dist = dmax(max_dist, dmax(rect1.maxes[i] - rect2.mins[i],
 *                                        rect2.maxes[i] - rect1.mins[i]))
 */
  __pyx_t_1 = __pyx_v_rect1->m;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "ckdtree.pyx":267
 *     cdef np.float64_t max_dist = 0.
 *     for i in range(rect1.m):
 *         max_dist = dmax(max_dist, dmax(rect1.maxes[i] - rect2.mins[i],             # <<<<<<<<<<<<<<
 *                                        rect2.maxes[i] - rect1.mins[i]))
 *     return max_dist
 */
    __pyx_v_max_dist = dmax(__pyx_v_max_dist, dmax(((__pyx_v_rect1->maxes[__pyx_v_i]) - (__pyx_v_rect2->mins[__pyx_v_i])), ((__pyx_v_rect2->maxes[__pyx_v_i]) - (__pyx_v_rect1->mins[__pyx_v_i]))));
  }

  /* "ckdtree.pyx":269
 *         max_dist = dmax(max_dist, dmax(rect1.maxes[i] - rect2.mins[i],
 *                                        rect2.maxes[i] - rect1.mins[i]))
 *     return max_dist             # <<<<<<<<<<<<<<
 * 
 * # Rectangle-to-rectangle distance tracker
 */
  __pyx_r = __pyx_v_max_dist;
  goto __pyx_L0;

  /* "ckdtree.pyx":261
 *     return min_dist
 * 
 * cdef inline np.float64_t max_dist_rect_rect_p_inf(Rectangle rect1,             # <<<<<<<<<<<<<<
 *                                                   Rectangle rect2):
 *     """Compute the maximum distance between points in two hyperrectangles."""
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":316
 * 
 *     # Stack handling
 *     cdef int _init_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = 10
 */

static int __pyx_f_7ckdtree_23RectRectDistanceTracker__init_stack(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self) {
  void *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_stack", 0);

  /* "ckdtree.pyx":318
 *     cdef int _init_stack(self) except -1:
 *         cdef void *tmp
 *         self.stack_max_size = 10             # <<<<<<<<<<<<<<
 *         tmp = PyMem_Malloc(sizeof(RR_stack_item) *
 *                             self.stack_max_size)
 */
  __pyx_v_self->stack_max_size = 10;

  /* "ckdtree.pyx":319
 *         cdef void *tmp
 *         self.stack_max_size = 10
 *         tmp = PyMem_Malloc(sizeof(RR_stack_item) *             # <<<<<<<<<<<<<<
 *                             self.stack_max_size)
 *         if tmp == NULL:
 */
  __pyx_v_tmp = PyMem_Malloc(((sizeof(struct __pyx_t_7ckdtree_RR_stack_item)) * __pyx_v_self->stack_max_size));

  /* "ckdtree.pyx":321
 *         tmp = PyMem_Malloc(sizeof(RR_stack_item) *
 *                             self.stack_max_size)
 *         if tmp == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         self.stack = <RR_stack_item*> tmp
 */
  __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":322
 *                             self.stack_max_size)
 *         if tmp == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         self.stack = <RR_stack_item*> tmp
 *         self.stack_size = 0
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":323
 *         if tmp == NULL:
 *             raise MemoryError
 *         self.stack = <RR_stack_item*> tmp             # <<<<<<<<<<<<<<
 *         self.stack_size = 0
 *         return 0
 */
  __pyx_v_self->stack = ((struct __pyx_t_7ckdtree_RR_stack_item *)__pyx_v_tmp);

  /* "ckdtree.pyx":324
 *             raise MemoryError
 *         self.stack = <RR_stack_item*> tmp
 *         self.stack_size = 0             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->stack_size = 0;

  /* "ckdtree.pyx":325
 *         self.stack = <RR_stack_item*> tmp
 *         self.stack_size = 0
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":316
 * 
 *     # Stack handling
 *     cdef int _init_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = 10
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker._init_stack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":327
 *         return 0
 * 
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size
 */

static int __pyx_f_7ckdtree_23RectRectDistanceTracker__resize_stack(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_new_max_size) {
  void *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resize_stack", 0);

  /* "ckdtree.pyx":329
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size             # <<<<<<<<<<<<<<
 *         tmp = PyMem_Realloc(<RR_stack_item*> self.stack,
 *                              new_max_size * sizeof(RR_stack_item))
 */
  __pyx_v_self->stack_max_size = __pyx_v_new_max_size;

  /* "ckdtree.pyx":330
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size
 *         tmp = PyMem_Realloc(<RR_stack_item*> self.stack,             # <<<<<<<<<<<<<<
 *                              new_max_size * sizeof(RR_stack_item))
 *         if tmp == NULL:
 */
  __pyx_v_tmp = PyMem_Realloc(((struct __pyx_t_7ckdtree_RR_stack_item *)__pyx_v_self->stack), (__pyx_v_new_max_size * (sizeof(struct __pyx_t_7ckdtree_RR_stack_item))));

  /* "ckdtree.pyx":332
 *         tmp = PyMem_Realloc(<RR_stack_item*> self.stack,
 *                              new_max_size * sizeof(RR_stack_item))
 *         if tmp == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         self.stack = <RR_stack_item*> tmp
 */
  __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":333
 *                              new_max_size * sizeof(RR_stack_item))
 *         if tmp == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         self.stack = <RR_stack_item*> tmp
 *         return 0
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":334
 *         if tmp == NULL:
 *             raise MemoryError
 *         self.stack = <RR_stack_item*> tmp             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->stack = ((struct __pyx_t_7ckdtree_RR_stack_item *)__pyx_v_tmp);

  /* "ckdtree.pyx":335
 *             raise MemoryError
 *         self.stack = <RR_stack_item*> tmp
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef int _free_stack(self) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":327
 *         return 0
 * 
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker._resize_stack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":337
 *         return 0
 * 
 *     cdef int _free_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.stack)
 *         return 0
 */

static int __pyx_f_7ckdtree_23RectRectDistanceTracker__free_stack(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_free_stack", 0);

  /* "ckdtree.pyx":338
 * 
 *     cdef int _free_stack(self) except -1:
 *         PyMem_Free(self.stack)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  PyMem_Free(__pyx_v_self->stack);

  /* "ckdtree.pyx":339
 *     cdef int _free_stack(self) except -1:
 *         PyMem_Free(self.stack)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":337
 *         return 0
 * 
 *     cdef int _free_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.stack)
 *         return 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":342
 * 
 * 
 *     def __init__(self, Rectangle rect1, Rectangle rect2,             # <<<<<<<<<<<<<<
 *                  np.float64_t p, np.float64_t eps, np.float64_t upper_bound):
 * 
 */

/* Python wrapper */
static int __pyx_pw_7ckdtree_23RectRectDistanceTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7ckdtree_23RectRectDistanceTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1 = 0;
  struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2 = 0;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  __pyx_t_5numpy_float64_t __pyx_v_eps;
  __pyx_t_5numpy_float64_t __pyx_v_upper_bound;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rect1,&__pyx_n_s_rect2,&__pyx_n_s_p,&__pyx_n_s_eps,&__pyx_n_s_upper_bound,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rect1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rect2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper_bound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_rect1 = ((struct __pyx_obj_7ckdtree_Rectangle *)values[0]);
    __pyx_v_rect2 = ((struct __pyx_obj_7ckdtree_Rectangle *)values[1]);
    __pyx_v_p = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_eps = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_eps == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_upper_bound = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_upper_bound == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rect1), __pyx_ptype_7ckdtree_Rectangle, 1, "rect1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rect2), __pyx_ptype_7ckdtree_Rectangle, 1, "rect2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7ckdtree_23RectRectDistanceTracker___init__(((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)__pyx_v_self), __pyx_v_rect1, __pyx_v_rect2, __pyx_v_p, __pyx_v_eps, __pyx_v_upper_bound);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7ckdtree_23RectRectDistanceTracker___init__(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect1, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect2, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps, __pyx_t_5numpy_float64_t __pyx_v_upper_bound) {
  __pyx_t_5numpy_intp_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_5numpy_intp_t __pyx_t_6;
  __pyx_t_5numpy_intp_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ckdtree.pyx":345
 *                  np.float64_t p, np.float64_t eps, np.float64_t upper_bound):
 * 
 *         if rect1.m != rect2.m:             # <<<<<<<<<<<<<<
 *             raise ValueError("rect1 and rect2 have different dimensions")
 * 
 */
  __pyx_t_1 = ((__pyx_v_rect1->m != __pyx_v_rect2->m) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":346
 * 
 *         if rect1.m != rect2.m:
 *             raise ValueError("rect1 and rect2 have different dimensions")             # <<<<<<<<<<<<<<
 * 
 *         self.rect1 = rect1
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":348
 *             raise ValueError("rect1 and rect2 have different dimensions")
 * 
 *         self.rect1 = rect1             # <<<<<<<<<<<<<<
 *         self.rect2 = rect2
 *         self.p = p
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_rect1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rect1));
  __Pyx_GOTREF(__pyx_v_self->rect1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rect1));
  __pyx_v_self->rect1 = __pyx_v_rect1;

  /* "ckdtree.pyx":349
 * 
 *         self.rect1 = rect1
 *         self.rect2 = rect2             # <<<<<<<<<<<<<<
 *         self.p = p
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_rect2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rect2));
  __Pyx_GOTREF(__pyx_v_self->rect2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rect2));
  __pyx_v_self->rect2 = __pyx_v_rect2;

  /* "ckdtree.pyx":350
 *         self.rect1 = rect1
 *         self.rect2 = rect2
 *         self.p = p             # <<<<<<<<<<<<<<
 * 
 *         # internally we represent all distances as distance ** p
 */
  __pyx_v_self->p = __pyx_v_p;

  /* "ckdtree.pyx":353
 * 
 *         # internally we represent all distances as distance ** p
 *         if p != infinity and upper_bound != infinity:             # <<<<<<<<<<<<<<
 *             self.upper_bound = upper_bound ** p
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_p != infinity) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_upper_bound != infinity) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ckdtree.pyx":354
 *         # internally we represent all distances as distance ** p
 *         if p != infinity and upper_bound != infinity:
 *             self.upper_bound = upper_bound ** p             # <<<<<<<<<<<<<<
 *         else:
 *             self.upper_bound = upper_bound
 */
    __pyx_v_self->upper_bound = pow(__pyx_v_upper_bound, __pyx_v_p);
    goto __pyx_L4;
  }
  /*else*/ {

    /* "ckdtree.pyx":356
 *             self.upper_bound = upper_bound ** p
 *         else:
 *             self.upper_bound = upper_bound             # <<<<<<<<<<<<<<
 * 
 *         # fiddle approximation factor
 */
    __pyx_v_self->upper_bound = __pyx_v_upper_bound;
  }
  __pyx_L4:;

  /* "ckdtree.pyx":359
 * 
 *         # fiddle approximation factor
 *         if eps == 0:             # <<<<<<<<<<<<<<
 *             self.epsfac = 1
 *         elif p == infinity:
 */
  __pyx_t_1 = ((__pyx_v_eps == 0.0) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":360
 *         # fiddle approximation factor
 *         if eps == 0:
 *             self.epsfac = 1             # <<<<<<<<<<<<<<
 *         elif p == infinity:
 *             self.epsfac = 1 / (1 + eps)
 */
    __pyx_v_self->epsfac = 1.0;
    goto __pyx_L7;
  }

  /* "ckdtree.pyx":361
 *         if eps == 0:
 *             self.epsfac = 1
 *         elif p == infinity:             # <<<<<<<<<<<<<<
 *             self.epsfac = 1 / (1 + eps)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_p == infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":362
 *             self.epsfac = 1
 *         elif p == infinity:
 *             self.epsfac = 1 / (1 + eps)             # <<<<<<<<<<<<<<
 *         else:
 *             self.epsfac = 1 / (1 + eps) ** p
 */
    __pyx_t_4 = (1.0 + __pyx_v_eps);
    if (unlikely(__pyx_t_4 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->epsfac = (1.0 / __pyx_t_4);
    goto __pyx_L7;
  }
  /*else*/ {

    /* "ckdtree.pyx":364
 *             self.epsfac = 1 / (1 + eps)
 *         else:
 *             self.epsfac = 1 / (1 + eps) ** p             # <<<<<<<<<<<<<<
 * 
 *         self._init_stack()
 */
    __pyx_t_4 = pow((1.0 + __pyx_v_eps), __pyx_v_p);
    if (unlikely(__pyx_t_4 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->epsfac = (1.0 / __pyx_t_4);
  }
  __pyx_L7:;

  /* "ckdtree.pyx":366
 *             self.epsfac = 1 / (1 + eps) ** p
 * 
 *         self._init_stack()             # <<<<<<<<<<<<<<
 * 
 *         # Compute initial min and max distances
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->_init_stack(__pyx_v_self); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":369
 * 
 *         # Compute initial min and max distances
 *         if self.p == infinity:             # <<<<<<<<<<<<<<
 *             self.min_distance = min_dist_rect_rect_p_inf(rect1, rect2)
 *             self.max_distance = max_dist_rect_rect_p_inf(rect1, rect2)
 */
  __pyx_t_1 = ((__pyx_v_self->p == infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":370
 *         # Compute initial min and max distances
 *         if self.p == infinity:
 *             self.min_distance = min_dist_rect_rect_p_inf(rect1, rect2)             # <<<<<<<<<<<<<<
 *             self.max_distance = max_dist_rect_rect_p_inf(rect1, rect2)
 *         else:
 */
    __pyx_v_self->min_distance = __pyx_f_7ckdtree_min_dist_rect_rect_p_inf(__pyx_v_rect1, __pyx_v_rect2);

    /* "ckdtree.pyx":371
 *         if self.p == infinity:
 *             self.min_distance = min_dist_rect_rect_p_inf(rect1, rect2)
 *             self.max_distance = max_dist_rect_rect_p_inf(rect1, rect2)             # <<<<<<<<<<<<<<
 *         else:
 *             self.min_distance = 0.
 */
    __pyx_v_self->max_distance = __pyx_f_7ckdtree_max_dist_rect_rect_p_inf(__pyx_v_rect1, __pyx_v_rect2);
    goto __pyx_L8;
  }
  /*else*/ {

    /* "ckdtree.pyx":373
 *             self.max_distance = max_dist_rect_rect_p_inf(rect1, rect2)
 *         else:
 *             self.min_distance = 0.             # <<<<<<<<<<<<<<
 *             self.max_distance = 0.
 *             for i in range(rect1.m):
 */
    __pyx_v_self->min_distance = 0.;

    /* "ckdtree.pyx":374
 *         else:
 *             self.min_distance = 0.
 *             self.max_distance = 0.             # <<<<<<<<<<<<<<
 *             for i in range(rect1.m):
 *                 self.min_distance += min_dist_interval_interval_p(rect1, rect2, i, p)
 */
    __pyx_v_self->max_distance = 0.;

    /* "ckdtree.pyx":375
 *             self.min_distance = 0.
 *             self.max_distance = 0.
 *             for i in range(rect1.m):             # <<<<<<<<<<<<<<
 *                 self.min_distance += min_dist_interval_interval_p(rect1, rect2, i, p)
 *                 self.max_distance += max_dist_interval_interval_p(rect1, rect2, i, p)
 */
    __pyx_t_6 = __pyx_v_rect1->m;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "ckdtree.pyx":376
 *             self.max_distance = 0.
 *             for i in range(rect1.m):
 *                 self.min_distance += min_dist_interval_interval_p(rect1, rect2, i, p)             # <<<<<<<<<<<<<<
 *                 self.max_distance += max_dist_interval_interval_p(rect1, rect2, i, p)
 * 
 */
      __pyx_v_self->min_distance = (__pyx_v_self->min_distance + __pyx_f_7ckdtree_min_dist_interval_interval_p(__pyx_v_rect1, __pyx_v_rect2, __pyx_v_i, __pyx_v_p));

      /* "ckdtree.pyx":377
 *             for i in range(rect1.m):
 *                 self.min_distance += min_dist_interval_interval_p(rect1, rect2, i, p)
 *                 self.max_distance += max_dist_interval_interval_p(rect1, rect2, i, p)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->max_distance = (__pyx_v_self->max_distance + __pyx_f_7ckdtree_max_dist_interval_interval_p(__pyx_v_rect1, __pyx_v_rect2, __pyx_v_i, __pyx_v_p));
    }
  }
  __pyx_L8:;

  /* "ckdtree.pyx":342
 * 
 * 
 *     def __init__(self, Rectangle rect1, Rectangle rect2,             # <<<<<<<<<<<<<<
 *                  np.float64_t p, np.float64_t eps, np.float64_t upper_bound):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":379
 *                 self.max_distance += max_dist_interval_interval_p(rect1, rect2, i, p)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self._free_stack()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7ckdtree_23RectRectDistanceTracker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7ckdtree_23RectRectDistanceTracker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7ckdtree_23RectRectDistanceTracker_2__dealloc__(((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7ckdtree_23RectRectDistanceTracker_2__dealloc__(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ckdtree.pyx":380
 * 
 *     def __dealloc__(self):
 *         self._free_stack()             # <<<<<<<<<<<<<<
 * 
 *     cdef int push(self, np.intp_t which, np.intp_t direction,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->_free_stack(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":379
 *                 self.max_distance += max_dist_interval_interval_p(rect1, rect2, i, p)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self._free_stack()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("ckdtree.RectRectDistanceTracker.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "ckdtree.pyx":382
 *         self._free_stack()
 * 
 *     cdef int push(self, np.intp_t which, np.intp_t direction,             # <<<<<<<<<<<<<<
 *                   np.intp_t split_dim,
 *                   np.float64_t split_val) except -1:
 */

static int __pyx_f_7ckdtree_23RectRectDistanceTracker_push(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_which, __pyx_t_5numpy_intp_t __pyx_v_direction, __pyx_t_5numpy_intp_t __pyx_v_split_dim, __pyx_t_5numpy_float64_t __pyx_v_split_val) {
  struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect = 0;
  struct __pyx_t_7ckdtree_RR_stack_item *__pyx_v_item;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push", 0);

  /* "ckdtree.pyx":387
 * 
 *         cdef Rectangle rect
 *         if which == 1:             # <<<<<<<<<<<<<<
 *             rect = self.rect1
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_which == 1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":388
 *         cdef Rectangle rect
 *         if which == 1:
 *             rect = self.rect1             # <<<<<<<<<<<<<<
 *         else:
 *             rect = self.rect2
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_rect = ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":390
 *             rect = self.rect1
 *         else:
 *             rect = self.rect2             # <<<<<<<<<<<<<<
 * 
 *         # Push onto stack
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_rect = ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":393
 * 
 *         # Push onto stack
 *         if self.stack_size == self.stack_max_size:             # <<<<<<<<<<<<<<
 *             self._resize_stack(self.stack_max_size * 2)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->stack_size == __pyx_v_self->stack_max_size) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":394
 *         # Push onto stack
 *         if self.stack_size == self.stack_max_size:
 *             self._resize_stack(self.stack_max_size * 2)             # <<<<<<<<<<<<<<
 * 
 *         cdef RR_stack_item *item = &self.stack[self.stack_size]
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->_resize_stack(__pyx_v_self, (__pyx_v_self->stack_max_size * 2)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "ckdtree.pyx":396
 *             self._resize_stack(self.stack_max_size * 2)
 * 
 *         cdef RR_stack_item *item = &self.stack[self.stack_size]             # <<<<<<<<<<<<<<
 *         self.stack_size += 1
 *         item.which = which
 */
  __pyx_v_item = (&(__pyx_v_self->stack[__pyx_v_self->stack_size]));

  /* "ckdtree.pyx":397
 * 
 *         cdef RR_stack_item *item = &self.stack[self.stack_size]
 *         self.stack_size += 1             # <<<<<<<<<<<<<<
 *         item.which = which
 *         item.split_dim = split_dim
 */
  __pyx_v_self->stack_size = (__pyx_v_self->stack_size + 1);

  /* "ckdtree.pyx":398
 *         cdef RR_stack_item *item = &self.stack[self.stack_size]
 *         self.stack_size += 1
 *         item.which = which             # <<<<<<<<<<<<<<
 *         item.split_dim = split_dim
 *         item.min_distance = self.min_distance
 */
  __pyx_v_item->which = __pyx_v_which;

  /* "ckdtree.pyx":399
 *         self.stack_size += 1
 *         item.which = which
 *         item.split_dim = split_dim             # <<<<<<<<<<<<<<
 *         item.min_distance = self.min_distance
 *         item.max_distance = self.max_distance
 */
  __pyx_v_item->split_dim = __pyx_v_split_dim;

  /* "ckdtree.pyx":400
 *         item.which = which
 *         item.split_dim = split_dim
 *         item.min_distance = self.min_distance             # <<<<<<<<<<<<<<
 *         item.max_distance = self.max_distance
 *         item.min_along_dim = rect.mins[split_dim]
 */
  __pyx_t_4 = __pyx_v_self->min_distance;
  __pyx_v_item->min_distance = __pyx_t_4;

  /* "ckdtree.pyx":401
 *         item.split_dim = split_dim
 *         item.min_distance = self.min_distance
 *         item.max_distance = self.max_distance             # <<<<<<<<<<<<<<
 *         item.min_along_dim = rect.mins[split_dim]
 *         item.max_along_dim = rect.maxes[split_dim]
 */
  __pyx_t_4 = __pyx_v_self->max_distance;
  __pyx_v_item->max_distance = __pyx_t_4;

  /* "ckdtree.pyx":402
 *         item.min_distance = self.min_distance
 *         item.max_distance = self.max_distance
 *         item.min_along_dim = rect.mins[split_dim]             # <<<<<<<<<<<<<<
 *         item.max_along_dim = rect.maxes[split_dim]
 * 
 */
  __pyx_v_item->min_along_dim = (__pyx_v_rect->mins[__pyx_v_split_dim]);

  /* "ckdtree.pyx":403
 *         item.max_distance = self.max_distance
 *         item.min_along_dim = rect.mins[split_dim]
 *         item.max_along_dim = rect.maxes[split_dim]             # <<<<<<<<<<<<<<
 * 
 *         # Update min/max distances
 */
  __pyx_v_item->max_along_dim = (__pyx_v_rect->maxes[__pyx_v_split_dim]);

  /* "ckdtree.pyx":406
 * 
 *         # Update min/max distances
 *         if self.p != infinity:             # <<<<<<<<<<<<<<
 *             self.min_distance -= min_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 *             self.max_distance -= max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 */
  __pyx_t_1 = ((__pyx_v_self->p != infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":407
 *         # Update min/max distances
 *         if self.p != infinity:
 *             self.min_distance -= min_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)             # <<<<<<<<<<<<<<
 *             self.max_distance -= max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 * 
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_self->min_distance = (__pyx_v_self->min_distance - __pyx_f_7ckdtree_min_dist_interval_interval_p(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2), ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_5), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ckdtree.pyx":408
 *         if self.p != infinity:
 *             self.min_distance -= min_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 *             self.max_distance -= max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)             # <<<<<<<<<<<<<<
 * 
 *         if direction == LESS:
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_self->max_distance = (__pyx_v_self->max_distance - __pyx_f_7ckdtree_max_dist_interval_interval_p(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_5), ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "ckdtree.pyx":410
 *             self.max_distance -= max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 * 
 *         if direction == LESS:             # <<<<<<<<<<<<<<
 *             rect.maxes[split_dim] = split_val
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_direction == __pyx_v_7ckdtree_LESS) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":411
 * 
 *         if direction == LESS:
 *             rect.maxes[split_dim] = split_val             # <<<<<<<<<<<<<<
 *         else:
 *             rect.mins[split_dim] = split_val
 */
    (__pyx_v_rect->maxes[__pyx_v_split_dim]) = __pyx_v_split_val;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "ckdtree.pyx":413
 *             rect.maxes[split_dim] = split_val
 *         else:
 *             rect.mins[split_dim] = split_val             # <<<<<<<<<<<<<<
 * 
 *         if self.p != infinity:
 */
    (__pyx_v_rect->mins[__pyx_v_split_dim]) = __pyx_v_split_val;
  }
  __pyx_L6:;

  /* "ckdtree.pyx":415
 *             rect.mins[split_dim] = split_val
 * 
 *         if self.p != infinity:             # <<<<<<<<<<<<<<
 *             self.min_distance += min_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 *             self.max_distance += max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 */
  __pyx_t_1 = ((__pyx_v_self->p != infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":416
 * 
 *         if self.p != infinity:
 *             self.min_distance += min_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)             # <<<<<<<<<<<<<<
 *             self.max_distance += max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 *         else:
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_self->min_distance = (__pyx_v_self->min_distance + __pyx_f_7ckdtree_min_dist_interval_interval_p(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2), ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_5), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ckdtree.pyx":417
 *         if self.p != infinity:
 *             self.min_distance += min_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 *             self.max_distance += max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)             # <<<<<<<<<<<<<<
 *         else:
 *             self.min_distance = min_dist_rect_rect_p_inf(self.rect1, self.rect2)
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_self->max_distance = (__pyx_v_self->max_distance + __pyx_f_7ckdtree_max_dist_interval_interval_p(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_5), ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L7;
  }
  /*else*/ {

    /* "ckdtree.pyx":419
 *             self.max_distance += max_dist_interval_interval_p(self.rect1, self.rect2, split_dim, self.p)
 *         else:
 *             self.min_distance = min_dist_rect_rect_p_inf(self.rect1, self.rect2)             # <<<<<<<<<<<<<<
 *             self.max_distance = max_dist_rect_rect_p_inf(self.rect1, self.rect2)
 * 
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_self->min_distance = __pyx_f_7ckdtree_min_dist_rect_rect_p_inf(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2), ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_5));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ckdtree.pyx":420
 *         else:
 *             self.min_distance = min_dist_rect_rect_p_inf(self.rect1, self.rect2)
 *             self.max_distance = max_dist_rect_rect_p_inf(self.rect1, self.rect2)             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->rect1);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = ((PyObject *)__pyx_v_self->rect2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_self->max_distance = __pyx_f_7ckdtree_max_dist_rect_rect_p_inf(((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_5), ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2));
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L7:;

  /* "ckdtree.pyx":422
 *             self.max_distance = max_dist_rect_rect_p_inf(self.rect1, self.rect2)
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":382
 *         self._free_stack()
 * 
 *     cdef int push(self, np.intp_t which, np.intp_t direction,             # <<<<<<<<<<<<<<
 *                   np.intp_t split_dim,
 *                   np.float64_t split_val) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rect);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":425
 * 
 * 
 *     cdef inline int push_less_of(self, np.intp_t which,             # <<<<<<<<<<<<<<
 *                                  ckdtreenode *node) except -1:
 *         return self.push(which, LESS, node.split_dim, node.split)
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_which, struct ckdtreenode *__pyx_v_node) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_less_of", 0);

  /* "ckdtree.pyx":427
 *     cdef inline int push_less_of(self, np.intp_t which,
 *                                  ckdtreenode *node) except -1:
 *         return self.push(which, LESS, node.split_dim, node.split)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->push(__pyx_v_self, __pyx_v_which, __pyx_v_7ckdtree_LESS, __pyx_v_node->split_dim, __pyx_v_node->split); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ckdtree.pyx":425
 * 
 * 
 *     cdef inline int push_less_of(self, np.intp_t which,             # <<<<<<<<<<<<<<
 *                                  ckdtreenode *node) except -1:
 *         return self.push(which, LESS, node.split_dim, node.split)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker.push_less_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":430
 * 
 * 
 *     cdef inline int push_greater_of(self, np.intp_t which,             # <<<<<<<<<<<<<<
 *                                     ckdtreenode *node) except -1:
 *         return self.push(which, GREATER, node.split_dim, node.split)
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_which, struct ckdtreenode *__pyx_v_node) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_greater_of", 0);

  /* "ckdtree.pyx":432
 *     cdef inline int push_greater_of(self, np.intp_t which,
 *                                     ckdtreenode *node) except -1:
 *         return self.push(which, GREATER, node.split_dim, node.split)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->push(__pyx_v_self, __pyx_v_which, __pyx_v_7ckdtree_GREATER, __pyx_v_node->split_dim, __pyx_v_node->split); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ckdtree.pyx":430
 * 
 * 
 *     cdef inline int push_greater_of(self, np.intp_t which,             # <<<<<<<<<<<<<<
 *                                     ckdtreenode *node) except -1:
 *         return self.push(which, GREATER, node.split_dim, node.split)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker.push_greater_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":435
 * 
 * 
 *     cdef inline int pop(self) except -1:             # <<<<<<<<<<<<<<
 *         # Pop from stack
 *         self.stack_size -= 1
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_self) {
  struct __pyx_t_7ckdtree_RR_stack_item *__pyx_v_item;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_float64_t __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop", 0);

  /* "ckdtree.pyx":437
 *     cdef inline int pop(self) except -1:
 *         # Pop from stack
 *         self.stack_size -= 1             # <<<<<<<<<<<<<<
 *         assert self.stack_size >= 0
 * 
 */
  __pyx_v_self->stack_size = (__pyx_v_self->stack_size - 1);

  /* "ckdtree.pyx":438
 *         # Pop from stack
 *         self.stack_size -= 1
 *         assert self.stack_size >= 0             # <<<<<<<<<<<<<<
 * 
 *         cdef RR_stack_item* item = &self.stack[self.stack_size]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->stack_size >= 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "ckdtree.pyx":440
 *         assert self.stack_size >= 0
 * 
 *         cdef RR_stack_item* item = &self.stack[self.stack_size]             # <<<<<<<<<<<<<<
 *         self.min_distance = item.min_distance
 *         self.max_distance = item.max_distance
 */
  __pyx_v_item = (&(__pyx_v_self->stack[__pyx_v_self->stack_size]));

  /* "ckdtree.pyx":441
 * 
 *         cdef RR_stack_item* item = &self.stack[self.stack_size]
 *         self.min_distance = item.min_distance             # <<<<<<<<<<<<<<
 *         self.max_distance = item.max_distance
 * 
 */
  __pyx_t_1 = __pyx_v_item->min_distance;
  __pyx_v_self->min_distance = __pyx_t_1;

  /* "ckdtree.pyx":442
 *         cdef RR_stack_item* item = &self.stack[self.stack_size]
 *         self.min_distance = item.min_distance
 *         self.max_distance = item.max_distance             # <<<<<<<<<<<<<<
 * 
 *         if item.which == 1:
 */
  __pyx_t_1 = __pyx_v_item->max_distance;
  __pyx_v_self->max_distance = __pyx_t_1;

  /* "ckdtree.pyx":444
 *         self.max_distance = item.max_distance
 * 
 *         if item.which == 1:             # <<<<<<<<<<<<<<
 *             self.rect1.mins[item.split_dim] = item.min_along_dim
 *             self.rect1.maxes[item.split_dim] = item.max_along_dim
 */
  __pyx_t_2 = ((__pyx_v_item->which == 1) != 0);
  if (__pyx_t_2) {

    /* "ckdtree.pyx":445
 * 
 *         if item.which == 1:
 *             self.rect1.mins[item.split_dim] = item.min_along_dim             # <<<<<<<<<<<<<<
 *             self.rect1.maxes[item.split_dim] = item.max_along_dim
 *         else:
 */
    __pyx_t_3 = __pyx_v_item->min_along_dim;
    (__pyx_v_self->rect1->mins[__pyx_v_item->split_dim]) = __pyx_t_3;

    /* "ckdtree.pyx":446
 *         if item.which == 1:
 *             self.rect1.mins[item.split_dim] = item.min_along_dim
 *             self.rect1.maxes[item.split_dim] = item.max_along_dim             # <<<<<<<<<<<<<<
 *         else:
 *             self.rect2.mins[item.split_dim] = item.min_along_dim
 */
    __pyx_t_3 = __pyx_v_item->max_along_dim;
    (__pyx_v_self->rect1->maxes[__pyx_v_item->split_dim]) = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":448
 *             self.rect1.maxes[item.split_dim] = item.max_along_dim
 *         else:
 *             self.rect2.mins[item.split_dim] = item.min_along_dim             # <<<<<<<<<<<<<<
 *             self.rect2.maxes[item.split_dim] = item.max_along_dim
 * 
 */
    __pyx_t_3 = __pyx_v_item->min_along_dim;
    (__pyx_v_self->rect2->mins[__pyx_v_item->split_dim]) = __pyx_t_3;

    /* "ckdtree.pyx":449
 *         else:
 *             self.rect2.mins[item.split_dim] = item.min_along_dim
 *             self.rect2.maxes[item.split_dim] = item.max_along_dim             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_t_3 = __pyx_v_item->max_along_dim;
    (__pyx_v_self->rect2->maxes[__pyx_v_item->split_dim]) = __pyx_t_3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":451
 *             self.rect2.maxes[item.split_dim] = item.max_along_dim
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * # Point-to-rectangle distance tracker
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":435
 * 
 * 
 *     cdef inline int pop(self) except -1:             # <<<<<<<<<<<<<<
 *         # Pop from stack
 *         self.stack_size -= 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.RectRectDistanceTracker.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":495
 * 
 *     # Stack handling
 *     cdef int _init_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = 10
 */

static int __pyx_f_7ckdtree_24PointRectDistanceTracker__init_stack(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self) {
  void *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_stack", 0);

  /* "ckdtree.pyx":497
 *     cdef int _init_stack(self) except -1:
 *         cdef void *tmp
 *         self.stack_max_size = 10             # <<<<<<<<<<<<<<
 *         tmp = PyMem_Malloc(sizeof(RP_stack_item) *
 *                             self.stack_max_size)
 */
  __pyx_v_self->stack_max_size = 10;

  /* "ckdtree.pyx":498
 *         cdef void *tmp
 *         self.stack_max_size = 10
 *         tmp = PyMem_Malloc(sizeof(RP_stack_item) *             # <<<<<<<<<<<<<<
 *                             self.stack_max_size)
 *         if tmp == NULL:
 */
  __pyx_v_tmp = PyMem_Malloc(((sizeof(struct __pyx_t_7ckdtree_RP_stack_item)) * __pyx_v_self->stack_max_size));

  /* "ckdtree.pyx":500
 *         tmp = PyMem_Malloc(sizeof(RP_stack_item) *
 *                             self.stack_max_size)
 *         if tmp == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         self.stack = <RP_stack_item*> tmp
 */
  __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":501
 *                             self.stack_max_size)
 *         if tmp == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         self.stack = <RP_stack_item*> tmp
 *         self.stack_size = 0
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":502
 *         if tmp == NULL:
 *             raise MemoryError
 *         self.stack = <RP_stack_item*> tmp             # <<<<<<<<<<<<<<
 *         self.stack_size = 0
 *         return 0
 */
  __pyx_v_self->stack = ((struct __pyx_t_7ckdtree_RP_stack_item *)__pyx_v_tmp);

  /* "ckdtree.pyx":503
 *             raise MemoryError
 *         self.stack = <RP_stack_item*> tmp
 *         self.stack_size = 0             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->stack_size = 0;

  /* "ckdtree.pyx":504
 *         self.stack = <RP_stack_item*> tmp
 *         self.stack_size = 0
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":495
 * 
 *     # Stack handling
 *     cdef int _init_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = 10
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker._init_stack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":506
 *         return 0
 * 
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size
 */

static int __pyx_f_7ckdtree_24PointRectDistanceTracker__resize_stack(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_new_max_size) {
  void *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resize_stack", 0);

  /* "ckdtree.pyx":508
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size             # <<<<<<<<<<<<<<
 *         tmp = PyMem_Realloc(<RP_stack_item*> self.stack,
 *                               new_max_size * sizeof(RP_stack_item))
 */
  __pyx_v_self->stack_max_size = __pyx_v_new_max_size;

  /* "ckdtree.pyx":509
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size
 *         tmp = PyMem_Realloc(<RP_stack_item*> self.stack,             # <<<<<<<<<<<<<<
 *                               new_max_size * sizeof(RP_stack_item))
 *         if tmp == NULL:
 */
  __pyx_v_tmp = PyMem_Realloc(((struct __pyx_t_7ckdtree_RP_stack_item *)__pyx_v_self->stack), (__pyx_v_new_max_size * (sizeof(struct __pyx_t_7ckdtree_RP_stack_item))));

  /* "ckdtree.pyx":511
 *         tmp = PyMem_Realloc(<RP_stack_item*> self.stack,
 *                               new_max_size * sizeof(RP_stack_item))
 *         if tmp == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         self.stack = <RP_stack_item*> tmp
 */
  __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":512
 *                               new_max_size * sizeof(RP_stack_item))
 *         if tmp == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         self.stack = <RP_stack_item*> tmp
 *         return 0
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":513
 *         if tmp == NULL:
 *             raise MemoryError
 *         self.stack = <RP_stack_item*> tmp             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->stack = ((struct __pyx_t_7ckdtree_RP_stack_item *)__pyx_v_tmp);

  /* "ckdtree.pyx":514
 *             raise MemoryError
 *         self.stack = <RP_stack_item*> tmp
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef int _free_stack(self) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":506
 *         return 0
 * 
 *     cdef int _resize_stack(self, np.intp_t new_max_size) except -1:             # <<<<<<<<<<<<<<
 *         cdef void *tmp
 *         self.stack_max_size = new_max_size
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker._resize_stack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":516
 *         return 0
 * 
 *     cdef int _free_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.stack)
 *         return 0
 */

static int __pyx_f_7ckdtree_24PointRectDistanceTracker__free_stack(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_free_stack", 0);

  /* "ckdtree.pyx":517
 * 
 *     cdef int _free_stack(self) except -1:
 *         PyMem_Free(self.stack)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  PyMem_Free(__pyx_v_self->stack);

  /* "ckdtree.pyx":518
 *     cdef int _free_stack(self) except -1:
 *         PyMem_Free(self.stack)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, np.float64_t *pt, Rectangle rect,
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":516
 *         return 0
 * 
 *     cdef int _free_stack(self) except -1:             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.stack)
 *         return 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":520
 *         return 0
 * 
 *     cdef init(self, np.float64_t *pt, Rectangle rect,             # <<<<<<<<<<<<<<
 *               np.float64_t p, np.float64_t eps, np.float64_t upper_bound):
 * 
 */

static PyObject *__pyx_f_7ckdtree_24PointRectDistanceTracker_init(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_pt, struct __pyx_obj_7ckdtree_Rectangle *__pyx_v_rect, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps, __pyx_t_5numpy_float64_t __pyx_v_upper_bound) {
  __pyx_t_5numpy_intp_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_5numpy_float64_t __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  __pyx_t_5numpy_intp_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "ckdtree.pyx":523
 *               np.float64_t p, np.float64_t eps, np.float64_t upper_bound):
 * 
 *         self.pt = pt             # <<<<<<<<<<<<<<
 *         self.rect = rect
 *         self.p = p
 */
  __pyx_v_self->pt = __pyx_v_pt;

  /* "ckdtree.pyx":524
 * 
 *         self.pt = pt
 *         self.rect = rect             # <<<<<<<<<<<<<<
 *         self.p = p
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_rect));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rect));
  __Pyx_GOTREF(__pyx_v_self->rect);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rect));
  __pyx_v_self->rect = __pyx_v_rect;

  /* "ckdtree.pyx":525
 *         self.pt = pt
 *         self.rect = rect
 *         self.p = p             # <<<<<<<<<<<<<<
 * 
 *         # internally we represent all distances as distance ** p
 */
  __pyx_v_self->p = __pyx_v_p;

  /* "ckdtree.pyx":528
 * 
 *         # internally we represent all distances as distance ** p
 *         if p != infinity and upper_bound != infinity:             # <<<<<<<<<<<<<<
 *             self.upper_bound = upper_bound ** p
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_p != infinity) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_upper_bound != infinity) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ckdtree.pyx":529
 *         # internally we represent all distances as distance ** p
 *         if p != infinity and upper_bound != infinity:
 *             self.upper_bound = upper_bound ** p             # <<<<<<<<<<<<<<
 *         else:
 *             self.upper_bound = upper_bound
 */
    __pyx_v_self->upper_bound = pow(__pyx_v_upper_bound, __pyx_v_p);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":531
 *             self.upper_bound = upper_bound ** p
 *         else:
 *             self.upper_bound = upper_bound             # <<<<<<<<<<<<<<
 * 
 *         # fiddle approximation factor
 */
    __pyx_v_self->upper_bound = __pyx_v_upper_bound;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":534
 * 
 *         # fiddle approximation factor
 *         if eps == 0:             # <<<<<<<<<<<<<<
 *             self.epsfac = 1
 *         elif p == infinity:
 */
  __pyx_t_1 = ((__pyx_v_eps == 0.0) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":535
 *         # fiddle approximation factor
 *         if eps == 0:
 *             self.epsfac = 1             # <<<<<<<<<<<<<<
 *         elif p == infinity:
 *             self.epsfac = 1 / (1 + eps)
 */
    __pyx_v_self->epsfac = 1.0;
    goto __pyx_L6;
  }

  /* "ckdtree.pyx":536
 *         if eps == 0:
 *             self.epsfac = 1
 *         elif p == infinity:             # <<<<<<<<<<<<<<
 *             self.epsfac = 1 / (1 + eps)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_p == infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":537
 *             self.epsfac = 1
 *         elif p == infinity:
 *             self.epsfac = 1 / (1 + eps)             # <<<<<<<<<<<<<<
 *         else:
 *             self.epsfac = 1 / (1 + eps) ** p
 */
    __pyx_t_3 = (1.0 + __pyx_v_eps);
    if (unlikely(__pyx_t_3 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->epsfac = (1.0 / __pyx_t_3);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "ckdtree.pyx":539
 *             self.epsfac = 1 / (1 + eps)
 *         else:
 *             self.epsfac = 1 / (1 + eps) ** p             # <<<<<<<<<<<<<<
 * 
 *         self._init_stack()
 */
    __pyx_t_3 = pow((1.0 + __pyx_v_eps), __pyx_v_p);
    if (unlikely(__pyx_t_3 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->epsfac = (1.0 / __pyx_t_3);
  }
  __pyx_L6:;

  /* "ckdtree.pyx":541
 *             self.epsfac = 1 / (1 + eps) ** p
 * 
 *         self._init_stack()             # <<<<<<<<<<<<<<
 * 
 *         # Compute initial min and max distances
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->_init_stack(__pyx_v_self); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":544
 * 
 *         # Compute initial min and max distances
 *         if self.p == infinity:             # <<<<<<<<<<<<<<
 *             self.min_distance = min_dist_point_rect_p_inf(pt, rect)
 *             self.max_distance = max_dist_point_rect_p_inf(pt, rect)
 */
  __pyx_t_1 = ((__pyx_v_self->p == infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":545
 *         # Compute initial min and max distances
 *         if self.p == infinity:
 *             self.min_distance = min_dist_point_rect_p_inf(pt, rect)             # <<<<<<<<<<<<<<
 *             self.max_distance = max_dist_point_rect_p_inf(pt, rect)
 *         else:
 */
    __pyx_v_self->min_distance = __pyx_f_7ckdtree_min_dist_point_rect_p_inf(__pyx_v_pt, __pyx_v_rect);

    /* "ckdtree.pyx":546
 *         if self.p == infinity:
 *             self.min_distance = min_dist_point_rect_p_inf(pt, rect)
 *             self.max_distance = max_dist_point_rect_p_inf(pt, rect)             # <<<<<<<<<<<<<<
 *         else:
 *             self.min_distance = 0.
 */
    __pyx_v_self->max_distance = __pyx_f_7ckdtree_max_dist_point_rect_p_inf(__pyx_v_pt, __pyx_v_rect);
    goto __pyx_L7;
  }
  /*else*/ {

    /* "ckdtree.pyx":548
 *             self.max_distance = max_dist_point_rect_p_inf(pt, rect)
 *         else:
 *             self.min_distance = 0.             # <<<<<<<<<<<<<<
 *             self.max_distance = 0.
 *             for i in range(rect.m):
 */
    __pyx_v_self->min_distance = 0.;

    /* "ckdtree.pyx":549
 *         else:
 *             self.min_distance = 0.
 *             self.max_distance = 0.             # <<<<<<<<<<<<<<
 *             for i in range(rect.m):
 *                 self.min_distance += min_dist_point_interval_p(pt, rect, i, p)
 */
    __pyx_v_self->max_distance = 0.;

    /* "ckdtree.pyx":550
 *             self.min_distance = 0.
 *             self.max_distance = 0.
 *             for i in range(rect.m):             # <<<<<<<<<<<<<<
 *                 self.min_distance += min_dist_point_interval_p(pt, rect, i, p)
 *                 self.max_distance += max_dist_point_interval_p(pt, rect, i, p)
 */
    __pyx_t_5 = __pyx_v_rect->m;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "ckdtree.pyx":551
 *             self.max_distance = 0.
 *             for i in range(rect.m):
 *                 self.min_distance += min_dist_point_interval_p(pt, rect, i, p)             # <<<<<<<<<<<<<<
 *                 self.max_distance += max_dist_point_interval_p(pt, rect, i, p)
 * 
 */
      __pyx_v_self->min_distance = (__pyx_v_self->min_distance + __pyx_f_7ckdtree_min_dist_point_interval_p(__pyx_v_pt, __pyx_v_rect, __pyx_v_i, __pyx_v_p));

      /* "ckdtree.pyx":552
 *             for i in range(rect.m):
 *                 self.min_distance += min_dist_point_interval_p(pt, rect, i, p)
 *                 self.max_distance += max_dist_point_interval_p(pt, rect, i, p)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->max_distance = (__pyx_v_self->max_distance + __pyx_f_7ckdtree_max_dist_point_interval_p(__pyx_v_pt, __pyx_v_rect, __pyx_v_i, __pyx_v_p));
    }
  }
  __pyx_L7:;

  /* "ckdtree.pyx":520
 *         return 0
 * 
 *     cdef init(self, np.float64_t *pt, Rectangle rect,             # <<<<<<<<<<<<<<
 *               np.float64_t p, np.float64_t eps, np.float64_t upper_bound):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":554
 *                 self.max_distance += max_dist_point_interval_p(pt, rect, i, p)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self._free_stack()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7ckdtree_24PointRectDistanceTracker_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7ckdtree_24PointRectDistanceTracker_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7ckdtree_24PointRectDistanceTracker___dealloc__(((struct __pyx_obj_7ckdtree_PointRectDistanceTracker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7ckdtree_24PointRectDistanceTracker___dealloc__(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ckdtree.pyx":555
 * 
 *     def __dealloc__(self):
 *         self._free_stack()             # <<<<<<<<<<<<<<
 * 
 *     cdef int push(self, np.intp_t direction,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->_free_stack(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":554
 *                 self.max_distance += max_dist_point_interval_p(pt, rect, i, p)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self._free_stack()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("ckdtree.PointRectDistanceTracker.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "ckdtree.pyx":557
 *         self._free_stack()
 * 
 *     cdef int push(self, np.intp_t direction,             # <<<<<<<<<<<<<<
 *                   np.intp_t split_dim,
 *                   np.float64_t split_val) except -1:
 */

static int __pyx_f_7ckdtree_24PointRectDistanceTracker_push(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_direction, __pyx_t_5numpy_intp_t __pyx_v_split_dim, __pyx_t_5numpy_float64_t __pyx_v_split_val) {
  struct __pyx_t_7ckdtree_RP_stack_item *__pyx_v_item;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_5numpy_float64_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push", 0);

  /* "ckdtree.pyx":562
 * 
 *         # Push onto stack
 *         if self.stack_size == self.stack_max_size:             # <<<<<<<<<<<<<<
 *             self._resize_stack(self.stack_max_size * 2)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->stack_size == __pyx_v_self->stack_max_size) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":563
 *         # Push onto stack
 *         if self.stack_size == self.stack_max_size:
 *             self._resize_stack(self.stack_max_size * 2)             # <<<<<<<<<<<<<<
 * 
 *         cdef RP_stack_item *item = &self.stack[self.stack_size]
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->_resize_stack(__pyx_v_self, (__pyx_v_self->stack_max_size * 2)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":565
 *             self._resize_stack(self.stack_max_size * 2)
 * 
 *         cdef RP_stack_item *item = &self.stack[self.stack_size]             # <<<<<<<<<<<<<<
 *         self.stack_size += 1
 * 
 */
  __pyx_v_item = (&(__pyx_v_self->stack[__pyx_v_self->stack_size]));

  /* "ckdtree.pyx":566
 * 
 *         cdef RP_stack_item *item = &self.stack[self.stack_size]
 *         self.stack_size += 1             # <<<<<<<<<<<<<<
 * 
 *         item.split_dim = split_dim
 */
  __pyx_v_self->stack_size = (__pyx_v_self->stack_size + 1);

  /* "ckdtree.pyx":568
 *         self.stack_size += 1
 * 
 *         item.split_dim = split_dim             # <<<<<<<<<<<<<<
 *         item.min_distance = self.min_distance
 *         item.max_distance = self.max_distance
 */
  __pyx_v_item->split_dim = __pyx_v_split_dim;

  /* "ckdtree.pyx":569
 * 
 *         item.split_dim = split_dim
 *         item.min_distance = self.min_distance             # <<<<<<<<<<<<<<
 *         item.max_distance = self.max_distance
 *         item.min_along_dim = self.rect.mins[split_dim]
 */
  __pyx_t_3 = __pyx_v_self->min_distance;
  __pyx_v_item->min_distance = __pyx_t_3;

  /* "ckdtree.pyx":570
 *         item.split_dim = split_dim
 *         item.min_distance = self.min_distance
 *         item.max_distance = self.max_distance             # <<<<<<<<<<<<<<
 *         item.min_along_dim = self.rect.mins[split_dim]
 *         item.max_along_dim = self.rect.maxes[split_dim]
 */
  __pyx_t_3 = __pyx_v_self->max_distance;
  __pyx_v_item->max_distance = __pyx_t_3;

  /* "ckdtree.pyx":571
 *         item.min_distance = self.min_distance
 *         item.max_distance = self.max_distance
 *         item.min_along_dim = self.rect.mins[split_dim]             # <<<<<<<<<<<<<<
 *         item.max_along_dim = self.rect.maxes[split_dim]
 * 
 */
  __pyx_v_item->min_along_dim = (__pyx_v_self->rect->mins[__pyx_v_split_dim]);

  /* "ckdtree.pyx":572
 *         item.max_distance = self.max_distance
 *         item.min_along_dim = self.rect.mins[split_dim]
 *         item.max_along_dim = self.rect.maxes[split_dim]             # <<<<<<<<<<<<<<
 * 
 *         if self.p != infinity:
 */
  __pyx_v_item->max_along_dim = (__pyx_v_self->rect->maxes[__pyx_v_split_dim]);

  /* "ckdtree.pyx":574
 *         item.max_along_dim = self.rect.maxes[split_dim]
 * 
 *         if self.p != infinity:             # <<<<<<<<<<<<<<
 *             self.min_distance -= min_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)
 */
  __pyx_t_1 = ((__pyx_v_self->p != infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":575
 * 
 *         if self.p != infinity:
 *             self.min_distance -= min_dist_point_interval_p(self.pt, self.rect,             # <<<<<<<<<<<<<<
 *                                                            split_dim, self.p)
 *             self.max_distance -= max_dist_point_interval_p(self.pt, self.rect,
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->rect);
    __Pyx_INCREF(__pyx_t_4);

    /* "ckdtree.pyx":576
 *         if self.p != infinity:
 *             self.min_distance -= min_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)             # <<<<<<<<<<<<<<
 *             self.max_distance -= max_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)
 */
    __pyx_v_self->min_distance = (__pyx_v_self->min_distance - __pyx_f_7ckdtree_min_dist_point_interval_p(__pyx_v_self->pt, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_4), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ckdtree.pyx":577
 *             self.min_distance -= min_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)
 *             self.max_distance -= max_dist_point_interval_p(self.pt, self.rect,             # <<<<<<<<<<<<<<
 *                                                            split_dim, self.p)
 * 
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->rect);
    __Pyx_INCREF(__pyx_t_4);

    /* "ckdtree.pyx":578
 *                                                            split_dim, self.p)
 *             self.max_distance -= max_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)             # <<<<<<<<<<<<<<
 * 
 *         if direction == LESS:
 */
    __pyx_v_self->max_distance = (__pyx_v_self->max_distance - __pyx_f_7ckdtree_max_dist_point_interval_p(__pyx_v_self->pt, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_4), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "ckdtree.pyx":580
 *                                                            split_dim, self.p)
 * 
 *         if direction == LESS:             # <<<<<<<<<<<<<<
 *             self.rect.maxes[split_dim] = split_val
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_direction == __pyx_v_7ckdtree_LESS) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":581
 * 
 *         if direction == LESS:
 *             self.rect.maxes[split_dim] = split_val             # <<<<<<<<<<<<<<
 *         else:
 *             self.rect.mins[split_dim] = split_val
 */
    (__pyx_v_self->rect->maxes[__pyx_v_split_dim]) = __pyx_v_split_val;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "ckdtree.pyx":583
 *             self.rect.maxes[split_dim] = split_val
 *         else:
 *             self.rect.mins[split_dim] = split_val             # <<<<<<<<<<<<<<
 * 
 *         if self.p != infinity:
 */
    (__pyx_v_self->rect->mins[__pyx_v_split_dim]) = __pyx_v_split_val;
  }
  __pyx_L5:;

  /* "ckdtree.pyx":585
 *             self.rect.mins[split_dim] = split_val
 * 
 *         if self.p != infinity:             # <<<<<<<<<<<<<<
 *             self.min_distance += min_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)
 */
  __pyx_t_1 = ((__pyx_v_self->p != infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":586
 * 
 *         if self.p != infinity:
 *             self.min_distance += min_dist_point_interval_p(self.pt, self.rect,             # <<<<<<<<<<<<<<
 *                                                            split_dim, self.p)
 *             self.max_distance += max_dist_point_interval_p(self.pt, self.rect,
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->rect);
    __Pyx_INCREF(__pyx_t_4);

    /* "ckdtree.pyx":587
 *         if self.p != infinity:
 *             self.min_distance += min_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)             # <<<<<<<<<<<<<<
 *             self.max_distance += max_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)
 */
    __pyx_v_self->min_distance = (__pyx_v_self->min_distance + __pyx_f_7ckdtree_min_dist_point_interval_p(__pyx_v_self->pt, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_4), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ckdtree.pyx":588
 *             self.min_distance += min_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)
 *             self.max_distance += max_dist_point_interval_p(self.pt, self.rect,             # <<<<<<<<<<<<<<
 *                                                            split_dim, self.p)
 *         else:
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->rect);
    __Pyx_INCREF(__pyx_t_4);

    /* "ckdtree.pyx":589
 *                                                            split_dim, self.p)
 *             self.max_distance += max_dist_point_interval_p(self.pt, self.rect,
 *                                                            split_dim, self.p)             # <<<<<<<<<<<<<<
 *         else:
 *             self.min_distance = min_dist_point_rect_p_inf(self.pt, self.rect)
 */
    __pyx_v_self->max_distance = (__pyx_v_self->max_distance + __pyx_f_7ckdtree_max_dist_point_interval_p(__pyx_v_self->pt, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_4), __pyx_v_split_dim, __pyx_v_self->p));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "ckdtree.pyx":591
 *                                                            split_dim, self.p)
 *         else:
 *             self.min_distance = min_dist_point_rect_p_inf(self.pt, self.rect)             # <<<<<<<<<<<<<<
 *             self.max_distance = max_dist_point_rect_p_inf(self.pt, self.rect)
 * 
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->rect);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_self->min_distance = __pyx_f_7ckdtree_min_dist_point_rect_p_inf(__pyx_v_self->pt, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ckdtree.pyx":592
 *         else:
 *             self.min_distance = min_dist_point_rect_p_inf(self.pt, self.rect)
 *             self.max_distance = max_dist_point_rect_p_inf(self.pt, self.rect)             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->rect);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_self->max_distance = __pyx_f_7ckdtree_max_dist_point_rect_p_inf(__pyx_v_self->pt, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L6:;

  /* "ckdtree.pyx":594
 *             self.max_distance = max_dist_point_rect_p_inf(self.pt, self.rect)
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":557
 *         self._free_stack()
 * 
 *     cdef int push(self, np.intp_t direction,             # <<<<<<<<<<<<<<
 *                   np.intp_t split_dim,
 *                   np.float64_t split_val) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":597
 * 
 * 
 *     cdef inline int push_less_of(self, ckdtreenode* node) except -1:             # <<<<<<<<<<<<<<
 *         return self.push(LESS, node.split_dim, node.split)
 * 
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_push_less_of(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, struct ckdtreenode *__pyx_v_node) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_less_of", 0);

  /* "ckdtree.pyx":598
 * 
 *     cdef inline int push_less_of(self, ckdtreenode* node) except -1:
 *         return self.push(LESS, node.split_dim, node.split)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->push(__pyx_v_self, __pyx_v_7ckdtree_LESS, __pyx_v_node->split_dim, __pyx_v_node->split); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ckdtree.pyx":597
 * 
 * 
 *     cdef inline int push_less_of(self, ckdtreenode* node) except -1:             # <<<<<<<<<<<<<<
 *         return self.push(LESS, node.split_dim, node.split)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker.push_less_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":601
 * 
 * 
 *     cdef inline int push_greater_of(self, ckdtreenode* node) except -1:             # <<<<<<<<<<<<<<
 *         return self.push(GREATER, node.split_dim, node.split)
 * 
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_push_greater_of(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self, struct ckdtreenode *__pyx_v_node) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_greater_of", 0);

  /* "ckdtree.pyx":602
 * 
 *     cdef inline int push_greater_of(self, ckdtreenode* node) except -1:
 *         return self.push(GREATER, node.split_dim, node.split)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *)__pyx_v_self->__pyx_vtab)->push(__pyx_v_self, __pyx_v_7ckdtree_GREATER, __pyx_v_node->split_dim, __pyx_v_node->split); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "ckdtree.pyx":601
 * 
 * 
 *     cdef inline int push_greater_of(self, ckdtreenode* node) except -1:             # <<<<<<<<<<<<<<
 *         return self.push(GREATER, node.split_dim, node.split)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker.push_greater_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":605
 * 
 * 
 *     cdef inline int pop(self) except -1:             # <<<<<<<<<<<<<<
 *         self.stack_size -= 1
 *         assert self.stack_size >= 0
 */

static CYTHON_INLINE int __pyx_f_7ckdtree_24PointRectDistanceTracker_pop(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_self) {
  struct __pyx_t_7ckdtree_RP_stack_item *__pyx_v_item;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_float64_t __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop", 0);

  /* "ckdtree.pyx":606
 * 
 *     cdef inline int pop(self) except -1:
 *         self.stack_size -= 1             # <<<<<<<<<<<<<<
 *         assert self.stack_size >= 0
 * 
 */
  __pyx_v_self->stack_size = (__pyx_v_self->stack_size - 1);

  /* "ckdtree.pyx":607
 *     cdef inline int pop(self) except -1:
 *         self.stack_size -= 1
 *         assert self.stack_size >= 0             # <<<<<<<<<<<<<<
 * 
 *         cdef RP_stack_item* item = &self.stack[self.stack_size]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->stack_size >= 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "ckdtree.pyx":609
 *         assert self.stack_size >= 0
 * 
 *         cdef RP_stack_item* item = &self.stack[self.stack_size]             # <<<<<<<<<<<<<<
 *         self.min_distance = item.min_distance
 *         self.max_distance = item.max_distance
 */
  __pyx_v_item = (&(__pyx_v_self->stack[__pyx_v_self->stack_size]));

  /* "ckdtree.pyx":610
 * 
 *         cdef RP_stack_item* item = &self.stack[self.stack_size]
 *         self.min_distance = item.min_distance             # <<<<<<<<<<<<<<
 *         self.max_distance = item.max_distance
 *         self.rect.mins[item.split_dim] = item.min_along_dim
 */
  __pyx_t_1 = __pyx_v_item->min_distance;
  __pyx_v_self->min_distance = __pyx_t_1;

  /* "ckdtree.pyx":611
 *         cdef RP_stack_item* item = &self.stack[self.stack_size]
 *         self.min_distance = item.min_distance
 *         self.max_distance = item.max_distance             # <<<<<<<<<<<<<<
 *         self.rect.mins[item.split_dim] = item.min_along_dim
 *         self.rect.maxes[item.split_dim] = item.max_along_dim
 */
  __pyx_t_1 = __pyx_v_item->max_distance;
  __pyx_v_self->max_distance = __pyx_t_1;

  /* "ckdtree.pyx":612
 *         self.min_distance = item.min_distance
 *         self.max_distance = item.max_distance
 *         self.rect.mins[item.split_dim] = item.min_along_dim             # <<<<<<<<<<<<<<
 *         self.rect.maxes[item.split_dim] = item.max_along_dim
 * 
 */
  __pyx_t_2 = __pyx_v_item->min_along_dim;
  (__pyx_v_self->rect->mins[__pyx_v_item->split_dim]) = __pyx_t_2;

  /* "ckdtree.pyx":613
 *         self.max_distance = item.max_distance
 *         self.rect.mins[item.split_dim] = item.min_along_dim
 *         self.rect.maxes[item.split_dim] = item.max_along_dim             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
  __pyx_t_2 = __pyx_v_item->max_along_dim;
  (__pyx_v_self->rect->maxes[__pyx_v_item->split_dim]) = __pyx_t_2;

  /* "ckdtree.pyx":615
 *         self.rect.maxes[item.split_dim] = item.max_along_dim
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":605
 * 
 * 
 *     cdef inline int pop(self) except -1:             # <<<<<<<<<<<<<<
 *         self.stack_size -= 1
 *         assert self.stack_size >= 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.PointRectDistanceTracker.pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":622
 * # Code originally written by Jake Vanderplas for scikit-learn
 * 
 * cdef inline void index_swap(np.intp_t *arr, np.intp_t i1, np.intp_t i2):             # <<<<<<<<<<<<<<
 *     """swap the values at index i1 and i2 of arr"""
 *     cdef np.intp_t tmp = arr[i1]
 */

static CYTHON_INLINE void __pyx_f_7ckdtree_index_swap(__pyx_t_5numpy_intp_t *__pyx_v_arr, __pyx_t_5numpy_intp_t __pyx_v_i1, __pyx_t_5numpy_intp_t __pyx_v_i2) {
  __pyx_t_5numpy_intp_t __pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index_swap", 0);

  /* "ckdtree.pyx":624
 * cdef inline void index_swap(np.intp_t *arr, np.intp_t i1, np.intp_t i2):
 *     """swap the values at index i1 and i2 of arr"""
 *     cdef np.intp_t tmp = arr[i1]             # <<<<<<<<<<<<<<
 *     arr[i1] = arr[i2]
 *     arr[i2] = tmp
 */
  __pyx_v_tmp = (__pyx_v_arr[__pyx_v_i1]);

  /* "ckdtree.pyx":625
 *     """swap the values at index i1 and i2 of arr"""
 *     cdef np.intp_t tmp = arr[i1]
 *     arr[i1] = arr[i2]             # <<<<<<<<<<<<<<
 *     arr[i2] = tmp
 * 
 */
  (__pyx_v_arr[__pyx_v_i1]) = (__pyx_v_arr[__pyx_v_i2]);

  /* "ckdtree.pyx":626
 *     cdef np.intp_t tmp = arr[i1]
 *     arr[i1] = arr[i2]
 *     arr[i2] = tmp             # <<<<<<<<<<<<<<
 * 
 * cdef int partition_node_indices(np.float64_t *data,
 */
  (__pyx_v_arr[__pyx_v_i2]) = __pyx_v_tmp;

  /* "ckdtree.pyx":622
 * # Code originally written by Jake Vanderplas for scikit-learn
 * 
 * cdef inline void index_swap(np.intp_t *arr, np.intp_t i1, np.intp_t i2):             # <<<<<<<<<<<<<<
 *     """swap the values at index i1 and i2 of arr"""
 *     cdef np.intp_t tmp = arr[i1]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ckdtree.pyx":628
 *     arr[i2] = tmp
 * 
 * cdef int partition_node_indices(np.float64_t *data,             # <<<<<<<<<<<<<<
 *                                 np.intp_t *node_indices,
 *                                 np.intp_t split_dim,
 */

static int __pyx_f_7ckdtree_partition_node_indices(__pyx_t_5numpy_float64_t *__pyx_v_data, __pyx_t_5numpy_intp_t *__pyx_v_node_indices, __pyx_t_5numpy_intp_t __pyx_v_split_dim, __pyx_t_5numpy_intp_t __pyx_v_split_index, __pyx_t_5numpy_intp_t __pyx_v_n_features, __pyx_t_5numpy_intp_t __pyx_v_n_points) {
  __pyx_t_5numpy_intp_t __pyx_v_left;
  __pyx_t_5numpy_intp_t __pyx_v_right;
  __pyx_t_5numpy_intp_t __pyx_v_midindex;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_float_t __pyx_v_d1;
  __pyx_t_5numpy_float_t __pyx_v_d2;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("partition_node_indices", 0);

  /* "ckdtree.pyx":674
 *     cdef np.intp_t left, right, midindex, i
 *     cdef np.float_t d1, d2
 *     left = 0             # <<<<<<<<<<<<<<
 *     right = n_points - 1
 * 
 */
  __pyx_v_left = 0;

  /* "ckdtree.pyx":675
 *     cdef np.float_t d1, d2
 *     left = 0
 *     right = n_points - 1             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_v_right = (__pyx_v_n_points - 1);

  /* "ckdtree.pyx":677
 *     right = n_points - 1
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         midindex = left
 *         for i in range(left, right):
 */
  while (1) {

    /* "ckdtree.pyx":678
 * 
 *     while True:
 *         midindex = left             # <<<<<<<<<<<<<<
 *         for i in range(left, right):
 *             d1 = data[node_indices[i] * n_features + split_dim]
 */
    __pyx_v_midindex = __pyx_v_left;

    /* "ckdtree.pyx":679
 *     while True:
 *         midindex = left
 *         for i in range(left, right):             # <<<<<<<<<<<<<<
 *             d1 = data[node_indices[i] * n_features + split_dim]
 *             d2 = data[node_indices[right] * n_features + split_dim]
 */
    __pyx_t_1 = __pyx_v_right;
    for (__pyx_t_2 = __pyx_v_left; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "ckdtree.pyx":680
 *         midindex = left
 *         for i in range(left, right):
 *             d1 = data[node_indices[i] * n_features + split_dim]             # <<<<<<<<<<<<<<
 *             d2 = data[node_indices[right] * n_features + split_dim]
 *             if d1 < d2:
 */
      __pyx_v_d1 = (__pyx_v_data[(((__pyx_v_node_indices[__pyx_v_i]) * __pyx_v_n_features) + __pyx_v_split_dim)]);

      /* "ckdtree.pyx":681
 *         for i in range(left, right):
 *             d1 = data[node_indices[i] * n_features + split_dim]
 *             d2 = data[node_indices[right] * n_features + split_dim]             # <<<<<<<<<<<<<<
 *             if d1 < d2:
 *                 index_swap(node_indices, i, midindex)
 */
      __pyx_v_d2 = (__pyx_v_data[(((__pyx_v_node_indices[__pyx_v_right]) * __pyx_v_n_features) + __pyx_v_split_dim)]);

      /* "ckdtree.pyx":682
 *             d1 = data[node_indices[i] * n_features + split_dim]
 *             d2 = data[node_indices[right] * n_features + split_dim]
 *             if d1 < d2:             # <<<<<<<<<<<<<<
 *                 index_swap(node_indices, i, midindex)
 *                 midindex += 1
 */
      __pyx_t_3 = ((__pyx_v_d1 < __pyx_v_d2) != 0);
      if (__pyx_t_3) {

        /* "ckdtree.pyx":683
 *             d2 = data[node_indices[right] * n_features + split_dim]
 *             if d1 < d2:
 *                 index_swap(node_indices, i, midindex)             # <<<<<<<<<<<<<<
 *                 midindex += 1
 *         index_swap(node_indices, midindex, right)
 */
        __pyx_f_7ckdtree_index_swap(__pyx_v_node_indices, __pyx_v_i, __pyx_v_midindex);

        /* "ckdtree.pyx":684
 *             if d1 < d2:
 *                 index_swap(node_indices, i, midindex)
 *                 midindex += 1             # <<<<<<<<<<<<<<
 *         index_swap(node_indices, midindex, right)
 *         if midindex == split_index:
 */
        __pyx_v_midindex = (__pyx_v_midindex + 1);
        goto __pyx_L7;
      }
      __pyx_L7:;
    }

    /* "ckdtree.pyx":685
 *                 index_swap(node_indices, i, midindex)
 *                 midindex += 1
 *         index_swap(node_indices, midindex, right)             # <<<<<<<<<<<<<<
 *         if midindex == split_index:
 *             break
 */
    __pyx_f_7ckdtree_index_swap(__pyx_v_node_indices, __pyx_v_midindex, __pyx_v_right);

    /* "ckdtree.pyx":686
 *                 midindex += 1
 *         index_swap(node_indices, midindex, right)
 *         if midindex == split_index:             # <<<<<<<<<<<<<<
 *             break
 *         elif midindex < split_index:
 */
    __pyx_t_3 = ((__pyx_v_midindex == __pyx_v_split_index) != 0);
    if (__pyx_t_3) {

      /* "ckdtree.pyx":687
 *         index_swap(node_indices, midindex, right)
 *         if midindex == split_index:
 *             break             # <<<<<<<<<<<<<<
 *         elif midindex < split_index:
 *             left = midindex + 1
 */
      goto __pyx_L4_break;
    }

    /* "ckdtree.pyx":688
 *         if midindex == split_index:
 *             break
 *         elif midindex < split_index:             # <<<<<<<<<<<<<<
 *             left = midindex + 1
 *         else:
 */
    __pyx_t_3 = ((__pyx_v_midindex < __pyx_v_split_index) != 0);
    if (__pyx_t_3) {

      /* "ckdtree.pyx":689
 *             break
 *         elif midindex < split_index:
 *             left = midindex + 1             # <<<<<<<<<<<<<<
 *         else:
 *             right = midindex - 1
 */
      __pyx_v_left = (__pyx_v_midindex + 1);
      goto __pyx_L8;
    }
    /*else*/ {

      /* "ckdtree.pyx":691
 *             left = midindex + 1
 *         else:
 *             right = midindex - 1             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
      __pyx_v_right = (__pyx_v_midindex - 1);
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "ckdtree.pyx":693
 *             right = midindex - 1
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":628
 *     arr[i2] = tmp
 * 
 * cdef int partition_node_indices(np.float64_t *data,             # <<<<<<<<<<<<<<
 *                                 np.intp_t *node_indices,
 *                                 np.intp_t split_dim,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":745
 *         np.ndarray            _indices
 * 
 *     cdef void _setup(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *         self.split_dim = self._node.split_dim
 *         self.children = self._node.children
 */

static void __pyx_f_7ckdtree_11cKDTreeNode__setup(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  __pyx_t_5numpy_float64_t __pyx_t_2;
  __Pyx_RefNannySetupContext("_setup", 0);

  /* "ckdtree.pyx":746
 * 
 *     cdef void _setup(cKDTreeNode self):
 *         self.split_dim = self._node.split_dim             # <<<<<<<<<<<<<<
 *         self.children = self._node.children
 *         self.split = self._node.split
 */
  __pyx_t_1 = __pyx_v_self->_node->split_dim;
  __pyx_v_self->split_dim = __pyx_t_1;

  /* "ckdtree.pyx":747
 *     cdef void _setup(cKDTreeNode self):
 *         self.split_dim = self._node.split_dim
 *         self.children = self._node.children             # <<<<<<<<<<<<<<
 *         self.split = self._node.split
 * 
 */
  __pyx_t_1 = __pyx_v_self->_node->children;
  __pyx_v_self->children = __pyx_t_1;

  /* "ckdtree.pyx":748
 *         self.split_dim = self._node.split_dim
 *         self.children = self._node.children
 *         self.split = self._node.split             # <<<<<<<<<<<<<<
 * 
 *     property data_points:
 */
  __pyx_t_2 = __pyx_v_self->_node->split;
  __pyx_v_self->split = __pyx_t_2;

  /* "ckdtree.pyx":745
 *         np.ndarray            _indices
 * 
 *     cdef void _setup(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *         self.split_dim = self._node.split_dim
 *         self.children = self._node.children
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ckdtree.pyx":751
 * 
 *     property data_points:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             return self._data[self.indices,:]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_11data_points_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_11data_points_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_11data_points___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_11data_points___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ckdtree.pyx":752
 *     property data_points:
 *         def __get__(cKDTreeNode self):
 *             return self._data[self.indices,:]             # <<<<<<<<<<<<<<
 * 
 *     property indices:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_indices); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_slice__2);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self->_data), __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":751
 * 
 *     property data_points:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             return self._data[self.indices,:]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.data_points.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":755
 * 
 *     property indices:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             cdef np.intp_t i, start, stop
 *             if self.split_dim == -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_7indices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_7indices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_7indices___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_7indices___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  __pyx_t_5numpy_intp_t __pyx_v_start;
  __pyx_t_5numpy_intp_t __pyx_v_stop;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ckdtree.pyx":757
 *         def __get__(cKDTreeNode self):
 *             cdef np.intp_t i, start, stop
 *             if self.split_dim == -1:             # <<<<<<<<<<<<<<
 *                 start = self._node.start_idx
 *                 stop = self._node.end_idx
 */
  __pyx_t_1 = ((__pyx_v_self->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":758
 *             cdef np.intp_t i, start, stop
 *             if self.split_dim == -1:
 *                 start = self._node.start_idx             # <<<<<<<<<<<<<<
 *                 stop = self._node.end_idx
 *                 return self._indices[start:stop]
 */
    __pyx_t_2 = __pyx_v_self->_node->start_idx;
    __pyx_v_start = __pyx_t_2;

    /* "ckdtree.pyx":759
 *             if self.split_dim == -1:
 *                 start = self._node.start_idx
 *                 stop = self._node.end_idx             # <<<<<<<<<<<<<<
 *                 return self._indices[start:stop]
 *             else:
 */
    __pyx_t_2 = __pyx_v_self->_node->end_idx;
    __pyx_v_stop = __pyx_t_2;

    /* "ckdtree.pyx":760
 *                 start = self._node.start_idx
 *                 stop = self._node.end_idx
 *                 return self._indices[start:stop]             # <<<<<<<<<<<<<<
 *             else:
 *                 return np.hstack([self.lesser.indices,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_self->_indices), __pyx_v_start, __pyx_v_stop, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "ckdtree.pyx":762
 *                 return self._indices[start:stop]
 *             else:
 *                 return np.hstack([self.lesser.indices,             # <<<<<<<<<<<<<<
 *                            self.greater.indices])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_hstack); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lesser); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_indices); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ckdtree.pyx":763
 *             else:
 *                 return np.hstack([self.lesser.indices,
 *                            self.greater.indices])             # <<<<<<<<<<<<<<
 * 
 *     property lesser:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_greater); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_indices); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ckdtree.pyx":762
 *                 return self._indices[start:stop]
 *             else:
 *                 return np.hstack([self.lesser.indices,             # <<<<<<<<<<<<<<
 *                            self.greater.indices])
 * 
 */
    __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":755
 * 
 *     property indices:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             cdef np.intp_t i, start, stop
 *             if self.split_dim == -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.indices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":766
 * 
 *     property lesser:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             if self.split_dim == -1:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_6lesser_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_6lesser_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_6lesser___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_6lesser___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct ckdtreenode *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ckdtree.pyx":767
 *     property lesser:
 *         def __get__(cKDTreeNode self):
 *             if self.split_dim == -1:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":768
 *         def __get__(cKDTreeNode self):
 *             if self.split_dim == -1:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 n = cKDTreeNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "ckdtree.pyx":770
 *                 return None
 *             else:
 *                 n = cKDTreeNode()             # <<<<<<<<<<<<<<
 *                 n._node = self._node.less
 *                 n._data = self._data
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTreeNode)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_n = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ckdtree.pyx":771
 *             else:
 *                 n = cKDTreeNode()
 *                 n._node = self._node.less             # <<<<<<<<<<<<<<
 *                 n._data = self._data
 *                 n._indices = self._indices
 */
    __pyx_t_3 = __pyx_v_self->_node->less;
    __pyx_v_n->_node = __pyx_t_3;

    /* "ckdtree.pyx":772
 *                 n = cKDTreeNode()
 *                 n._node = self._node.less
 *                 n._data = self._data             # <<<<<<<<<<<<<<
 *                 n._indices = self._indices
 *                 n.level = self.level + 1
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_data);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_n->_data);
    __Pyx_DECREF(((PyObject *)__pyx_v_n->_data));
    __pyx_v_n->_data = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ckdtree.pyx":773
 *                 n._node = self._node.less
 *                 n._data = self._data
 *                 n._indices = self._indices             # <<<<<<<<<<<<<<
 *                 n.level = self.level + 1
 *                 n._setup()
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_indices);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_n->_indices);
    __Pyx_DECREF(((PyObject *)__pyx_v_n->_indices));
    __pyx_v_n->_indices = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ckdtree.pyx":774
 *                 n._data = self._data
 *                 n._indices = self._indices
 *                 n.level = self.level + 1             # <<<<<<<<<<<<<<
 *                 n._setup()
 *                 return n
 */
    __pyx_v_n->level = (__pyx_v_self->level + 1);

    /* "ckdtree.pyx":775
 *                 n._indices = self._indices
 *                 n.level = self.level + 1
 *                 n._setup()             # <<<<<<<<<<<<<<
 *                 return n
 * 
 */
    ((struct __pyx_vtabstruct_7ckdtree_cKDTreeNode *)__pyx_v_n->__pyx_vtab)->_setup(__pyx_v_n);

    /* "ckdtree.pyx":776
 *                 n.level = self.level + 1
 *                 n._setup()
 *                 return n             # <<<<<<<<<<<<<<
 * 
 *     property greater:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":766
 * 
 *     property lesser:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             if self.split_dim == -1:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.lesser.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":779
 * 
 *     property greater:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             if self.split_dim == -1:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_7greater_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_7greater_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_7greater___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_7greater___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct ckdtreenode *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "ckdtree.pyx":780
 *     property greater:
 *         def __get__(cKDTreeNode self):
 *             if self.split_dim == -1:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":781
 *         def __get__(cKDTreeNode self):
 *             if self.split_dim == -1:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 n = cKDTreeNode()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "ckdtree.pyx":783
 *                 return None
 *             else:
 *                 n = cKDTreeNode()             # <<<<<<<<<<<<<<
 *                 n._node = self._node.greater
 *                 n._data = self._data
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTreeNode)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_n = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ckdtree.pyx":784
 *             else:
 *                 n = cKDTreeNode()
 *                 n._node = self._node.greater             # <<<<<<<<<<<<<<
 *                 n._data = self._data
 *                 n._indices = self._indices
 */
    __pyx_t_3 = __pyx_v_self->_node->greater;
    __pyx_v_n->_node = __pyx_t_3;

    /* "ckdtree.pyx":785
 *                 n = cKDTreeNode()
 *                 n._node = self._node.greater
 *                 n._data = self._data             # <<<<<<<<<<<<<<
 *                 n._indices = self._indices
 *                 n.level = self.level + 1
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_data);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_n->_data);
    __Pyx_DECREF(((PyObject *)__pyx_v_n->_data));
    __pyx_v_n->_data = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ckdtree.pyx":786
 *                 n._node = self._node.greater
 *                 n._data = self._data
 *                 n._indices = self._indices             # <<<<<<<<<<<<<<
 *                 n.level = self.level + 1
 *                 n._setup()
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_indices);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_n->_indices);
    __Pyx_DECREF(((PyObject *)__pyx_v_n->_indices));
    __pyx_v_n->_indices = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "ckdtree.pyx":787
 *                 n._data = self._data
 *                 n._indices = self._indices
 *                 n.level = self.level + 1             # <<<<<<<<<<<<<<
 *                 n._setup()
 *                 return n
 */
    __pyx_v_n->level = (__pyx_v_self->level + 1);

    /* "ckdtree.pyx":788
 *                 n._indices = self._indices
 *                 n.level = self.level + 1
 *                 n._setup()             # <<<<<<<<<<<<<<
 *                 return n
 * 
 */
    ((struct __pyx_vtabstruct_7ckdtree_cKDTreeNode *)__pyx_v_n->__pyx_vtab)->_setup(__pyx_v_n);

    /* "ckdtree.pyx":789
 *                 n.level = self.level + 1
 *                 n._setup()
 *                 return n             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":779
 * 
 *     property greater:
 *         def __get__(cKDTreeNode self):             # <<<<<<<<<<<<<<
 *             if self.split_dim == -1:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.greater.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":737
 *     """
 *     cdef:
 *         readonly np.intp_t    level             # <<<<<<<<<<<<<<
 *         readonly np.intp_t    split_dim
 *         readonly np.intp_t    children
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_5level_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_5level_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_5level___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_5level___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->level); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.level.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":738
 *     cdef:
 *         readonly np.intp_t    level
 *         readonly np.intp_t    split_dim             # <<<<<<<<<<<<<<
 *         readonly np.intp_t    children
 *         readonly np.float64_t split
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_9split_dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_9split_dim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_9split_dim___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_9split_dim___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->split_dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.split_dim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":739
 *         readonly np.intp_t    level
 *         readonly np.intp_t    split_dim
 *         readonly np.intp_t    children             # <<<<<<<<<<<<<<
 *         readonly np.float64_t split
 *         ckdtreenode           *_node
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_8children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_8children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_8children___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_8children___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->children); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.children.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":740
 *         readonly np.intp_t    split_dim
 *         readonly np.intp_t    children
 *         readonly np.float64_t split             # <<<<<<<<<<<<<<
 *         ckdtreenode           *_node
 *         np.ndarray            _data
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_5split_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_11cKDTreeNode_5split_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_11cKDTreeNode_5split___get__(((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_11cKDTreeNode_5split___get__(struct __pyx_obj_7ckdtree_cKDTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTreeNode.split.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":882
 * 
 * 
 *     def __init__(cKDTree self, data, np.intp_t leafsize=16, compact_nodes=True,             # <<<<<<<<<<<<<<
 *             copy_data=False, balanced_tree=True):
 *         cdef np.ndarray[np.float64_t, ndim=2] data_arr
 */

/* Python wrapper */
static int __pyx_pw_7ckdtree_7cKDTree_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7ckdtree_7cKDTree_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  __pyx_t_5numpy_intp_t __pyx_v_leafsize;
  PyObject *__pyx_v_compact_nodes = 0;
  PyObject *__pyx_v_copy_data = 0;
  PyObject *__pyx_v_balanced_tree = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_leafsize,&__pyx_n_s_compact_nodes,&__pyx_n_s_copy_data,&__pyx_n_s_balanced_tree,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)Py_True);

    /* "ckdtree.pyx":883
 * 
 *     def __init__(cKDTree self, data, np.intp_t leafsize=16, compact_nodes=True,
 *             copy_data=False, balanced_tree=True):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float64_t, ndim=2] data_arr
 *         cdef np.float64_t *tmp
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_leafsize);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_compact_nodes);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_copy_data);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_balanced_tree);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    if (values[1]) {
      __pyx_v_leafsize = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_leafsize == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_leafsize = ((__pyx_t_5numpy_intp_t)16);
    }
    __pyx_v_compact_nodes = values[2];
    __pyx_v_copy_data = values[3];
    __pyx_v_balanced_tree = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree___init__(((struct ckdtree *)__pyx_v_self), __pyx_v_data, __pyx_v_leafsize, __pyx_v_compact_nodes, __pyx_v_copy_data, __pyx_v_balanced_tree);

  /* "ckdtree.pyx":882
 * 
 * 
 *     def __init__(cKDTree self, data, np.intp_t leafsize=16, compact_nodes=True,             # <<<<<<<<<<<<<<
 *             copy_data=False, balanced_tree=True):
 *         cdef np.ndarray[np.float64_t, ndim=2] data_arr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7ckdtree_7cKDTree___init__(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_data, __pyx_t_5numpy_intp_t __pyx_v_leafsize, PyObject *__pyx_v_compact_nodes, PyObject *__pyx_v_copy_data, PyObject *__pyx_v_balanced_tree) {
  PyArrayObject *__pyx_v_data_arr = 0;
  __pyx_t_5numpy_float64_t *__pyx_v_tmp;
  int __pyx_v__median;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data_arr;
  __Pyx_Buffer __pyx_pybuffer_data_arr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::vector<struct ckdtreenode>  *__pyx_t_16;
  __pyx_t_5numpy_intp_t __pyx_t_17;
  int __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  struct ckdtreenode *__pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_pybuffer_data_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_data_arr.refcount = 0;
  __pyx_pybuffernd_data_arr.data = NULL;
  __pyx_pybuffernd_data_arr.rcbuffer = &__pyx_pybuffer_data_arr;

  /* "ckdtree.pyx":887
 *         cdef np.float64_t *tmp
 *         cdef int _median
 *         data_arr = np.ascontiguousarray(data, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         if copy_data and (data_arr is data):
 *             data_arr = data_arr.copy()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_data);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_data_arr, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
    }
    __pyx_pybuffernd_data_arr.diminfo[0].strides = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data_arr.diminfo[0].shape = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_data_arr.diminfo[1].strides = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_data_arr.diminfo[1].shape = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = 0;
  __pyx_v_data_arr = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":888
 *         cdef int _median
 *         data_arr = np.ascontiguousarray(data, dtype=np.float64)
 *         if copy_data and (data_arr is data):             # <<<<<<<<<<<<<<
 *             data_arr = data_arr.copy()
 *         self.data = data_arr
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_copy_data); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_12 = (((PyObject *)__pyx_v_data_arr) == __pyx_v_data);
  __pyx_t_13 = (__pyx_t_12 != 0);
  __pyx_t_11 = __pyx_t_13;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_11) {

    /* "ckdtree.pyx":889
 *         data_arr = np.ascontiguousarray(data, dtype=np.float64)
 *         if copy_data and (data_arr is data):
 *             data_arr = data_arr.copy()             # <<<<<<<<<<<<<<
 *         self.data = data_arr
 *         self.n = data_arr.shape[0]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data_arr), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_data_arr, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_data_arr.diminfo[0].strides = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data_arr.diminfo[0].shape = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_data_arr.diminfo[1].strides = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_data_arr.diminfo[1].shape = __pyx_pybuffernd_data_arr.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_data_arr, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":890
 *         if copy_data and (data_arr is data):
 *             data_arr = data_arr.copy()
 *         self.data = data_arr             # <<<<<<<<<<<<<<
 *         self.n = data_arr.shape[0]
 *         self.m = data_arr.shape[1]
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_data_arr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data_arr));
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->data));
  __pyx_v_self->data = ((PyArrayObject *)__pyx_v_data_arr);

  /* "ckdtree.pyx":891
 *             data_arr = data_arr.copy()
 *         self.data = data_arr
 *         self.n = data_arr.shape[0]             # <<<<<<<<<<<<<<
 *         self.m = data_arr.shape[1]
 *         self.leafsize = leafsize
 */
  __pyx_v_self->n = (__pyx_v_data_arr->dimensions[0]);

  /* "ckdtree.pyx":892
 *         self.data = data_arr
 *         self.n = data_arr.shape[0]
 *         self.m = data_arr.shape[1]             # <<<<<<<<<<<<<<
 *         self.leafsize = leafsize
 *         if self.leafsize<1:
 */
  __pyx_v_self->m = (__pyx_v_data_arr->dimensions[1]);

  /* "ckdtree.pyx":893
 *         self.n = data_arr.shape[0]
 *         self.m = data_arr.shape[1]
 *         self.leafsize = leafsize             # <<<<<<<<<<<<<<
 *         if self.leafsize<1:
 *             raise ValueError("leafsize must be at least 1")
 */
  __pyx_v_self->leafsize = __pyx_v_leafsize;

  /* "ckdtree.pyx":894
 *         self.m = data_arr.shape[1]
 *         self.leafsize = leafsize
 *         if self.leafsize<1:             # <<<<<<<<<<<<<<
 *             raise ValueError("leafsize must be at least 1")
 * 
 */
  __pyx_t_11 = ((__pyx_v_self->leafsize < 1) != 0);
  if (__pyx_t_11) {

    /* "ckdtree.pyx":895
 *         self.leafsize = leafsize
 *         if self.leafsize<1:
 *             raise ValueError("leafsize must be at least 1")             # <<<<<<<<<<<<<<
 * 
 *         self.maxes = np.ascontiguousarray(np.amax(self.data,axis=0), dtype=np.float64)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":897
 *             raise ValueError("leafsize must be at least 1")
 * 
 *         self.maxes = np.ascontiguousarray(np.amax(self.data,axis=0), dtype=np.float64)             # <<<<<<<<<<<<<<
 *         self.mins = np.ascontiguousarray(np.amin(self.data,axis=0), dtype=np.float64)
 *         self.indices = np.ascontiguousarray(np.arange(self.n,dtype=np.intp))
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_amax); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->data));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self->data));
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->maxes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->maxes));
  __pyx_v_self->maxes = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ckdtree.pyx":898
 * 
 *         self.maxes = np.ascontiguousarray(np.amax(self.data,axis=0), dtype=np.float64)
 *         self.mins = np.ascontiguousarray(np.amin(self.data,axis=0), dtype=np.float64)             # <<<<<<<<<<<<<<
 *         self.indices = np.ascontiguousarray(np.arange(self.n,dtype=np.intp))
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_amin); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->data));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->data));
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->mins);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mins));
  __pyx_v_self->mins = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":899
 *         self.maxes = np.ascontiguousarray(np.amax(self.data,axis=0), dtype=np.float64)
 *         self.mins = np.ascontiguousarray(np.amin(self.data,axis=0), dtype=np.float64)
 *         self.indices = np.ascontiguousarray(np.arange(self.n,dtype=np.intp))             # <<<<<<<<<<<<<<
 * 
 *         self.raw_data = <np.float64_t*> np.PyArray_DATA(self.data)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_intp); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_15); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_15);
    __pyx_t_15 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->indices);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->indices));
  __pyx_v_self->indices = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":901
 *         self.indices = np.ascontiguousarray(np.arange(self.n,dtype=np.intp))
 * 
 *         self.raw_data = <np.float64_t*> np.PyArray_DATA(self.data)             # <<<<<<<<<<<<<<
 *         self.raw_maxes = <np.float64_t*> np.PyArray_DATA(self.maxes)
 *         self.raw_mins = <np.float64_t*> np.PyArray_DATA(self.mins)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->data);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->raw_data = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":902
 * 
 *         self.raw_data = <np.float64_t*> np.PyArray_DATA(self.data)
 *         self.raw_maxes = <np.float64_t*> np.PyArray_DATA(self.maxes)             # <<<<<<<<<<<<<<
 *         self.raw_mins = <np.float64_t*> np.PyArray_DATA(self.mins)
 *         self.raw_indices = <np.intp_t*> np.PyArray_DATA(self.indices)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->maxes);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->raw_maxes = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":903
 *         self.raw_data = <np.float64_t*> np.PyArray_DATA(self.data)
 *         self.raw_maxes = <np.float64_t*> np.PyArray_DATA(self.maxes)
 *         self.raw_mins = <np.float64_t*> np.PyArray_DATA(self.mins)             # <<<<<<<<<<<<<<
 *         self.raw_indices = <np.intp_t*> np.PyArray_DATA(self.indices)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mins);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->raw_mins = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":904
 *         self.raw_maxes = <np.float64_t*> np.PyArray_DATA(self.maxes)
 *         self.raw_mins = <np.float64_t*> np.PyArray_DATA(self.mins)
 *         self.raw_indices = <np.intp_t*> np.PyArray_DATA(self.indices)             # <<<<<<<<<<<<<<
 * 
 *         _median = 1 if balanced_tree else 0
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->indices);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_self->raw_indices = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":906
 *         self.raw_indices = <np.intp_t*> np.PyArray_DATA(self.indices)
 * 
 *         _median = 1 if balanced_tree else 0             # <<<<<<<<<<<<<<
 *         if _median:
 *             self._median_workspace = np.zeros(self.n)
 */
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_balanced_tree); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_11) {
    __pyx_t_7 = 1;
  } else {
    __pyx_t_7 = 0;
  }
  __pyx_v__median = __pyx_t_7;

  /* "ckdtree.pyx":907
 * 
 *         _median = 1 if balanced_tree else 0
 *         if _median:             # <<<<<<<<<<<<<<
 *             self._median_workspace = np.zeros(self.n)
 * 
 */
  __pyx_t_11 = (__pyx_v__median != 0);
  if (__pyx_t_11) {

    /* "ckdtree.pyx":908
 *         _median = 1 if balanced_tree else 0
 *         if _median:
 *             self._median_workspace = np.zeros(self.n)             # <<<<<<<<<<<<<<
 * 
 *         self.tree_buffer = NULL
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_15) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15); __pyx_t_15 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_median_workspace);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->_median_workspace));
    __pyx_v_self->_median_workspace = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "ckdtree.pyx":910
 *             self._median_workspace = np.zeros(self.n)
 * 
 *         self.tree_buffer = NULL             # <<<<<<<<<<<<<<
 *         self.tree_buffer = new vector[ckdtreenode]()
 * 
 */
  __pyx_v_self->tree_buffer = NULL;

  /* "ckdtree.pyx":911
 * 
 *         self.tree_buffer = NULL
 *         self.tree_buffer = new vector[ckdtreenode]()             # <<<<<<<<<<<<<<
 * 
 *         if not compact_nodes:
 */
  try {
    __pyx_t_16 = new std::vector<struct ckdtreenode> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->tree_buffer = __pyx_t_16;

  /* "ckdtree.pyx":913
 *         self.tree_buffer = new vector[ckdtreenode]()
 * 
 *         if not compact_nodes:             # <<<<<<<<<<<<<<
 *              self.__build(0, self.n, self.raw_maxes, self.raw_mins, _median)
 *         else:
 */
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_compact_nodes); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = ((!__pyx_t_11) != 0);
  if (__pyx_t_13) {

    /* "ckdtree.pyx":914
 * 
 *         if not compact_nodes:
 *              self.__build(0, self.n, self.raw_maxes, self.raw_mins, _median)             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
    __pyx_t_17 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___build(__pyx_v_self, 0, __pyx_v_self->n, __pyx_v_self->raw_maxes, __pyx_v_self->raw_mins, __pyx_v__median); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  /*else*/ {

    /* "ckdtree.pyx":916
 *              self.__build(0, self.n, self.raw_maxes, self.raw_mins, _median)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 tmp = <np.float64_t*> PyMem_Malloc(self.m*2*sizeof(np.float64_t))
 *                 if tmp == NULL: raise MemoryError()
 */
    /*try:*/ {

      /* "ckdtree.pyx":917
 *         else:
 *             try:
 *                 tmp = <np.float64_t*> PyMem_Malloc(self.m*2*sizeof(np.float64_t))             # <<<<<<<<<<<<<<
 *                 if tmp == NULL: raise MemoryError()
 *                 self.__build_compact(0, self.n, tmp, tmp+self.m, _median)
 */
      __pyx_v_tmp = ((__pyx_t_5numpy_float64_t *)PyMem_Malloc(((__pyx_v_self->m * 2) * (sizeof(__pyx_t_5numpy_float64_t)))));

      /* "ckdtree.pyx":918
 *             try:
 *                 tmp = <np.float64_t*> PyMem_Malloc(self.m*2*sizeof(np.float64_t))
 *                 if tmp == NULL: raise MemoryError()             # <<<<<<<<<<<<<<
 *                 self.__build_compact(0, self.n, tmp, tmp+self.m, _median)
 *             finally:
 */
      __pyx_t_13 = ((__pyx_v_tmp == NULL) != 0);
      if (__pyx_t_13) {
        PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L10_error;}
      }

      /* "ckdtree.pyx":919
 *                 tmp = <np.float64_t*> PyMem_Malloc(self.m*2*sizeof(np.float64_t))
 *                 if tmp == NULL: raise MemoryError()
 *                 self.__build_compact(0, self.n, tmp, tmp+self.m, _median)             # <<<<<<<<<<<<<<
 *             finally:
 *                 PyMem_Free(tmp)
 */
      __pyx_t_17 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___build_compact(__pyx_v_self, 0, __pyx_v_self->n, __pyx_v_tmp, (__pyx_v_tmp + __pyx_v_self->m), __pyx_v__median); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L10_error;}
    }

    /* "ckdtree.pyx":921
 *                 self.__build_compact(0, self.n, tmp, tmp+self.m, _median)
 *             finally:
 *                 PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 *         self._median_workspace = None
 * 
 */
    /*finally:*/ {
      /*normal exit:*/{
        PyMem_Free(__pyx_v_tmp);
        goto __pyx_L11;
      }
      /*exception exit:*/{
        __pyx_L10_error:;
        __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_20);
        __Pyx_XGOTREF(__pyx_t_21);
        __Pyx_XGOTREF(__pyx_t_22);
        __pyx_t_7 = __pyx_lineno; __pyx_t_18 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
        {
          PyMem_Free(__pyx_v_tmp);
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_21);
          __Pyx_XGIVEREF(__pyx_t_22);
          __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
        }
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
        __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_18; __pyx_filename = __pyx_t_19;
        goto __pyx_L1_error;
      }
      __pyx_L11:;
    }
  }
  __pyx_L8:;

  /* "ckdtree.pyx":922
 *             finally:
 *                 PyMem_Free(tmp)
 *         self._median_workspace = None             # <<<<<<<<<<<<<<
 * 
 *         # set up the tree structure pointers
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_median_workspace);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_median_workspace));
  __pyx_v_self->_median_workspace = ((PyArrayObject *)Py_None);

  /* "ckdtree.pyx":925
 * 
 *         # set up the tree structure pointers
 *         self.ctree = tree_buffer_root(self.tree_buffer)             # <<<<<<<<<<<<<<
 *         self._post_init(self.ctree)
 * 
 */
  __pyx_v_self->ctree = tree_buffer_root(__pyx_v_self->tree_buffer);

  /* "ckdtree.pyx":926
 *         # set up the tree structure pointers
 *         self.ctree = tree_buffer_root(self.tree_buffer)
 *         self._post_init(self.ctree)             # <<<<<<<<<<<<<<
 * 
 *         # make the tree viewable from Python
 */
  __pyx_t_18 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->_post_init(__pyx_v_self, __pyx_v_self->ctree); if (unlikely(__pyx_t_18 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":929
 * 
 *         # make the tree viewable from Python
 *         self.tree = cKDTreeNode()             # <<<<<<<<<<<<<<
 *         self.tree._node = self.ctree
 *         self.tree._data = self.data
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTreeNode)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->tree);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tree));
  __pyx_v_self->tree = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":930
 *         # make the tree viewable from Python
 *         self.tree = cKDTreeNode()
 *         self.tree._node = self.ctree             # <<<<<<<<<<<<<<
 *         self.tree._data = self.data
 *         self.tree._indices = self.indices
 */
  __pyx_t_23 = __pyx_v_self->ctree;
  __pyx_v_self->tree->_node = __pyx_t_23;

  /* "ckdtree.pyx":931
 *         self.tree = cKDTreeNode()
 *         self.tree._node = self.ctree
 *         self.tree._data = self.data             # <<<<<<<<<<<<<<
 *         self.tree._indices = self.indices
 *         self.tree.level = 0
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->data);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->tree->_data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tree->_data));
  __pyx_v_self->tree->_data = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":932
 *         self.tree._node = self.ctree
 *         self.tree._data = self.data
 *         self.tree._indices = self.indices             # <<<<<<<<<<<<<<
 *         self.tree.level = 0
 *         self.tree._setup()
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->indices);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->tree->_indices);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tree->_indices));
  __pyx_v_self->tree->_indices = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":933
 *         self.tree._data = self.data
 *         self.tree._indices = self.indices
 *         self.tree.level = 0             # <<<<<<<<<<<<<<
 *         self.tree._setup()
 * 
 */
  __pyx_v_self->tree->level = 0;

  /* "ckdtree.pyx":934
 *         self.tree._indices = self.indices
 *         self.tree.level = 0
 *         self.tree._setup()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_7ckdtree_cKDTreeNode *)__pyx_v_self->tree->__pyx_vtab)->_setup(__pyx_v_self->tree);

  /* "ckdtree.pyx":882
 * 
 * 
 *     def __init__(cKDTree self, data, np.intp_t leafsize=16, compact_nodes=True,             # <<<<<<<<<<<<<<
 *             copy_data=False, balanced_tree=True):
 *         cdef np.ndarray[np.float64_t, ndim=2] data_arr
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ckdtree.cKDTree.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data_arr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":937
 * 
 * 
 *     cdef int _post_init(cKDTree self, ckdtreenode *node) except -1:             # <<<<<<<<<<<<<<
 *         # recurse the tree and re-initialize
 *         # "less" and "greater" fields
 */

static int __pyx_f_7ckdtree_7cKDTree__post_init(struct ckdtree *__pyx_v_self, struct ckdtreenode *__pyx_v_node) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_post_init", 0);

  /* "ckdtree.pyx":940
 *         # recurse the tree and re-initialize
 *         # "less" and "greater" fields
 *         if node.split_dim == -1:             # <<<<<<<<<<<<<<
 *             # leafnode
 *             node.less = NULL
 */
  __pyx_t_1 = ((__pyx_v_node->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":942
 *         if node.split_dim == -1:
 *             # leafnode
 *             node.less = NULL             # <<<<<<<<<<<<<<
 *             node.greater = NULL
 *         else:
 */
    __pyx_v_node->less = NULL;

    /* "ckdtree.pyx":943
 *             # leafnode
 *             node.less = NULL
 *             node.greater = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             node.less = self.ctree + node._less
 */
    __pyx_v_node->greater = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":945
 *             node.greater = NULL
 *         else:
 *             node.less = self.ctree + node._less             # <<<<<<<<<<<<<<
 *             node.greater = self.ctree + node._greater
 *             self._post_init(node.less)
 */
    __pyx_v_node->less = (__pyx_v_self->ctree + __pyx_v_node->_less);

    /* "ckdtree.pyx":946
 *         else:
 *             node.less = self.ctree + node._less
 *             node.greater = self.ctree + node._greater             # <<<<<<<<<<<<<<
 *             self._post_init(node.less)
 *             self._post_init(node.greater)
 */
    __pyx_v_node->greater = (__pyx_v_self->ctree + __pyx_v_node->_greater);

    /* "ckdtree.pyx":947
 *             node.less = self.ctree + node._less
 *             node.greater = self.ctree + node._greater
 *             self._post_init(node.less)             # <<<<<<<<<<<<<<
 *             self._post_init(node.greater)
 *         return 0
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->_post_init(__pyx_v_self, __pyx_v_node->less); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":948
 *             node.greater = self.ctree + node._greater
 *             self._post_init(node.less)
 *             self._post_init(node.greater)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->_post_init(__pyx_v_self, __pyx_v_node->greater); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "ckdtree.pyx":949
 *             self._post_init(node.less)
 *             self._post_init(node.greater)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":937
 * 
 * 
 *     cdef int _post_init(cKDTree self, ckdtreenode *node) except -1:             # <<<<<<<<<<<<<<
 *         # recurse the tree and re-initialize
 *         # "less" and "greater" fields
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree._post_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":952
 * 
 * 
 *     def __deallocate__(cKDTree self):             # <<<<<<<<<<<<<<
 *         if self.tree_buffer != NULL:
 *             del self.tree_buffer
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_3__deallocate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_3__deallocate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deallocate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_2__deallocate__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_2__deallocate__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__deallocate__", 0);

  /* "ckdtree.pyx":953
 * 
 *     def __deallocate__(cKDTree self):
 *         if self.tree_buffer != NULL:             # <<<<<<<<<<<<<<
 *             del self.tree_buffer
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->tree_buffer != NULL) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":954
 *     def __deallocate__(cKDTree self):
 *         if self.tree_buffer != NULL:
 *             del self.tree_buffer             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete __pyx_v_self->tree_buffer;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":952
 * 
 * 
 *     def __deallocate__(cKDTree self):             # <<<<<<<<<<<<<<
 *         if self.tree_buffer != NULL:
 *             del self.tree_buffer
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":958
 * 
 *     @cython.cdivision(True)
 *     cdef np.intp_t __build(cKDTree self, np.intp_t start_idx, np.intp_t end_idx,             # <<<<<<<<<<<<<<
 *                        np.float64_t *maxes, np.float64_t *mins, int _median)\
 *                        except -1:
 */

static __pyx_t_5numpy_intp_t __pyx_f_7ckdtree_7cKDTree___build(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_start_idx, __pyx_t_5numpy_intp_t __pyx_v_end_idx, __pyx_t_5numpy_float64_t *__pyx_v_maxes, __pyx_t_5numpy_float64_t *__pyx_v_mins, int __pyx_v__median) {
  struct ckdtreenode __pyx_v_new_node;
  __pyx_t_5numpy_intp_t __pyx_v_node_index;
  __pyx_t_5numpy_intp_t __pyx_v__less;
  __pyx_t_5numpy_intp_t __pyx_v__greater;
  struct ckdtreenode *__pyx_v_n;
  struct ckdtreenode *__pyx_v_root;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  __pyx_t_5numpy_intp_t __pyx_v_t;
  __pyx_t_5numpy_intp_t __pyx_v_p;
  __pyx_t_5numpy_intp_t __pyx_v_q;
  __pyx_t_5numpy_intp_t __pyx_v_d;
  __pyx_t_5numpy_float64_t __pyx_v_size;
  __pyx_t_5numpy_float64_t __pyx_v_split;
  __pyx_t_5numpy_float64_t __pyx_v_minval;
  __pyx_t_5numpy_float64_t __pyx_v_maxval;
  __pyx_t_5numpy_float64_t *__pyx_v_mids;
  __pyx_t_5numpy_intp_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__build", 0);

  /* "ckdtree.pyx":974
 * 
 *         # put a new node into the node stack
 *         self.tree_buffer.push_back(new_node)             # <<<<<<<<<<<<<<
 *         node_index = self.tree_buffer.size() - 1
 *         root = tree_buffer_root(self.tree_buffer)
 */
  try {
    __pyx_v_self->tree_buffer->push_back(__pyx_v_new_node);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":975
 *         # put a new node into the node stack
 *         self.tree_buffer.push_back(new_node)
 *         node_index = self.tree_buffer.size() - 1             # <<<<<<<<<<<<<<
 *         root = tree_buffer_root(self.tree_buffer)
 *         n = root + node_index
 */
  __pyx_v_node_index = (__pyx_v_self->tree_buffer->size() - 1);

  /* "ckdtree.pyx":976
 *         self.tree_buffer.push_back(new_node)
 *         node_index = self.tree_buffer.size() - 1
 *         root = tree_buffer_root(self.tree_buffer)             # <<<<<<<<<<<<<<
 *         n = root + node_index
 * 
 */
  __pyx_v_root = tree_buffer_root(__pyx_v_self->tree_buffer);

  /* "ckdtree.pyx":977
 *         node_index = self.tree_buffer.size() - 1
 *         root = tree_buffer_root(self.tree_buffer)
 *         n = root + node_index             # <<<<<<<<<<<<<<
 * 
 *         if end_idx-start_idx <= self.leafsize:
 */
  __pyx_v_n = (__pyx_v_root + __pyx_v_node_index);

  /* "ckdtree.pyx":979
 *         n = root + node_index
 * 
 *         if end_idx-start_idx <= self.leafsize:             # <<<<<<<<<<<<<<
 *             # below brute force limit
 *             # return leafnode
 */
  __pyx_t_1 = (((__pyx_v_end_idx - __pyx_v_start_idx) <= __pyx_v_self->leafsize) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":982
 *             # below brute force limit
 *             # return leafnode
 *             n.split_dim = -1             # <<<<<<<<<<<<<<
 *             n.children = end_idx - start_idx
 *             n.start_idx = start_idx
 */
    __pyx_v_n->split_dim = -1;

    /* "ckdtree.pyx":983
 *             # return leafnode
 *             n.split_dim = -1
 *             n.children = end_idx - start_idx             # <<<<<<<<<<<<<<
 *             n.start_idx = start_idx
 *             n.end_idx = end_idx
 */
    __pyx_v_n->children = (__pyx_v_end_idx - __pyx_v_start_idx);

    /* "ckdtree.pyx":984
 *             n.split_dim = -1
 *             n.children = end_idx - start_idx
 *             n.start_idx = start_idx             # <<<<<<<<<<<<<<
 *             n.end_idx = end_idx
 *             return node_index
 */
    __pyx_v_n->start_idx = __pyx_v_start_idx;

    /* "ckdtree.pyx":985
 *             n.children = end_idx - start_idx
 *             n.start_idx = start_idx
 *             n.end_idx = end_idx             # <<<<<<<<<<<<<<
 *             return node_index
 *         else:
 */
    __pyx_v_n->end_idx = __pyx_v_end_idx;

    /* "ckdtree.pyx":986
 *             n.start_idx = start_idx
 *             n.end_idx = end_idx
 *             return node_index             # <<<<<<<<<<<<<<
 *         else:
 *             d = 0
 */
    __pyx_r = __pyx_v_node_index;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "ckdtree.pyx":988
 *             return node_index
 *         else:
 *             d = 0             # <<<<<<<<<<<<<<
 *             size = 0
 *             for i in range(self.m):
 */
    __pyx_v_d = 0;

    /* "ckdtree.pyx":989
 *         else:
 *             d = 0
 *             size = 0             # <<<<<<<<<<<<<<
 *             for i in range(self.m):
 *                 if maxes[i]-mins[i] > size:
 */
    __pyx_v_size = 0.0;

    /* "ckdtree.pyx":990
 *             d = 0
 *             size = 0
 *             for i in range(self.m):             # <<<<<<<<<<<<<<
 *                 if maxes[i]-mins[i] > size:
 *                     d = i
 */
    __pyx_t_2 = __pyx_v_self->m;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "ckdtree.pyx":991
 *             size = 0
 *             for i in range(self.m):
 *                 if maxes[i]-mins[i] > size:             # <<<<<<<<<<<<<<
 *                     d = i
 *                     size =  maxes[i]-mins[i]
 */
      __pyx_t_1 = ((((__pyx_v_maxes[__pyx_v_i]) - (__pyx_v_mins[__pyx_v_i])) > __pyx_v_size) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":992
 *             for i in range(self.m):
 *                 if maxes[i]-mins[i] > size:
 *                     d = i             # <<<<<<<<<<<<<<
 *                     size =  maxes[i]-mins[i]
 *             maxval = maxes[d]
 */
        __pyx_v_d = __pyx_v_i;

        /* "ckdtree.pyx":993
 *                 if maxes[i]-mins[i] > size:
 *                     d = i
 *                     size =  maxes[i]-mins[i]             # <<<<<<<<<<<<<<
 *             maxval = maxes[d]
 *             minval = mins[d]
 */
        __pyx_v_size = ((__pyx_v_maxes[__pyx_v_i]) - (__pyx_v_mins[__pyx_v_i]));
        goto __pyx_L6;
      }
      __pyx_L6:;
    }

    /* "ckdtree.pyx":994
 *                     d = i
 *                     size =  maxes[i]-mins[i]
 *             maxval = maxes[d]             # <<<<<<<<<<<<<<
 *             minval = mins[d]
 *             if maxval==minval:
 */
    __pyx_v_maxval = (__pyx_v_maxes[__pyx_v_d]);

    /* "ckdtree.pyx":995
 *                     size =  maxes[i]-mins[i]
 *             maxval = maxes[d]
 *             minval = mins[d]             # <<<<<<<<<<<<<<
 *             if maxval==minval:
 *                 # all points are identical; warn user?
 */
    __pyx_v_minval = (__pyx_v_mins[__pyx_v_d]);

    /* "ckdtree.pyx":996
 *             maxval = maxes[d]
 *             minval = mins[d]
 *             if maxval==minval:             # <<<<<<<<<<<<<<
 *                 # all points are identical; warn user?
 *                 # return leafnode
 */
    __pyx_t_1 = ((__pyx_v_maxval == __pyx_v_minval) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":999
 *                 # all points are identical; warn user?
 *                 # return leafnode
 *                 n.split_dim = -1             # <<<<<<<<<<<<<<
 *                 n.children = end_idx - start_idx
 *                 n.start_idx = start_idx
 */
      __pyx_v_n->split_dim = -1;

      /* "ckdtree.pyx":1000
 *                 # return leafnode
 *                 n.split_dim = -1
 *                 n.children = end_idx - start_idx             # <<<<<<<<<<<<<<
 *                 n.start_idx = start_idx
 *                 n.end_idx = end_idx
 */
      __pyx_v_n->children = (__pyx_v_end_idx - __pyx_v_start_idx);

      /* "ckdtree.pyx":1001
 *                 n.split_dim = -1
 *                 n.children = end_idx - start_idx
 *                 n.start_idx = start_idx             # <<<<<<<<<<<<<<
 *                 n.end_idx = end_idx
 *                 return node_index
 */
      __pyx_v_n->start_idx = __pyx_v_start_idx;

      /* "ckdtree.pyx":1002
 *                 n.children = end_idx - start_idx
 *                 n.start_idx = start_idx
 *                 n.end_idx = end_idx             # <<<<<<<<<<<<<<
 *                 return node_index
 * 
 */
      __pyx_v_n->end_idx = __pyx_v_end_idx;

      /* "ckdtree.pyx":1003
 *                 n.start_idx = start_idx
 *                 n.end_idx = end_idx
 *                 return node_index             # <<<<<<<<<<<<<<
 * 
 *             # construct new inner node
 */
      __pyx_r = __pyx_v_node_index;
      goto __pyx_L0;
    }

    /* "ckdtree.pyx":1006
 * 
 *             # construct new inner node
 *             if _median:             # <<<<<<<<<<<<<<
 *                 # split on median to create a balanced tree
 *                 # adopted from scikit-learn
 */
    __pyx_t_1 = (__pyx_v__median != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1009
 *                 # split on median to create a balanced tree
 *                 # adopted from scikit-learn
 *                 i = (end_idx-start_idx) // 2             # <<<<<<<<<<<<<<
 *                 partition_node_indices(self.raw_data,
 *                                 self.raw_indices + start_idx,
 */
      __pyx_v_i = ((__pyx_v_end_idx - __pyx_v_start_idx) / 2);

      /* "ckdtree.pyx":1010
 *                 # adopted from scikit-learn
 *                 i = (end_idx-start_idx) // 2
 *                 partition_node_indices(self.raw_data,             # <<<<<<<<<<<<<<
 *                                 self.raw_indices + start_idx,
 *                                 d,
 */
      __pyx_t_4 = __pyx_f_7ckdtree_partition_node_indices(__pyx_v_self->raw_data, (__pyx_v_self->raw_indices + __pyx_v_start_idx), __pyx_v_d, __pyx_v_i, __pyx_v_self->m, (__pyx_v_end_idx - __pyx_v_start_idx)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1016
 *                                 self.m,
 *                                 end_idx-start_idx)
 *                 p = start_idx + i             # <<<<<<<<<<<<<<
 *                 split = self.raw_data[self.raw_indices[p]*self.m+d]
 * 
 */
      __pyx_v_p = (__pyx_v_start_idx + __pyx_v_i);

      /* "ckdtree.pyx":1017
 *                                 end_idx-start_idx)
 *                 p = start_idx + i
 *                 split = self.raw_data[self.raw_indices[p]*self.m+d]             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_p]) * __pyx_v_self->m) + __pyx_v_d)]);
      goto __pyx_L8;
    }
    /*else*/ {

      /* "ckdtree.pyx":1022
 *                 # split with the sliding midpoint rule
 *                 # this is the default
 *                 split = (maxval+minval)/2             # <<<<<<<<<<<<<<
 * 
 *             p = start_idx
 */
      __pyx_v_split = ((__pyx_v_maxval + __pyx_v_minval) / 2.0);
    }
    __pyx_L8:;

    /* "ckdtree.pyx":1024
 *                 split = (maxval+minval)/2
 * 
 *             p = start_idx             # <<<<<<<<<<<<<<
 *             q = end_idx - 1
 *             while p <= q:
 */
    __pyx_v_p = __pyx_v_start_idx;

    /* "ckdtree.pyx":1025
 * 
 *             p = start_idx
 *             q = end_idx - 1             # <<<<<<<<<<<<<<
 *             while p <= q:
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 */
    __pyx_v_q = (__pyx_v_end_idx - 1);

    /* "ckdtree.pyx":1026
 *             p = start_idx
 *             q = end_idx - 1
 *             while p <= q:             # <<<<<<<<<<<<<<
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 *                     p += 1
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_p <= __pyx_v_q) != 0);
      if (!__pyx_t_1) break;

      /* "ckdtree.pyx":1027
 *             q = end_idx - 1
 *             while p <= q:
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:
 */
      __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_p]) * __pyx_v_self->m) + __pyx_v_d)]) < __pyx_v_split) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1028
 *             while p <= q:
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:
 *                     q -= 1
 */
        __pyx_v_p = (__pyx_v_p + 1);
        goto __pyx_L11;
      }

      /* "ckdtree.pyx":1029
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 *                     p += 1
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:             # <<<<<<<<<<<<<<
 *                     q -= 1
 *                 else:
 */
      __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_q]) * __pyx_v_self->m) + __pyx_v_d)]) >= __pyx_v_split) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1030
 *                     p += 1
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:
 *                     q -= 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     t = self.raw_indices[p]
 */
        __pyx_v_q = (__pyx_v_q - 1);
        goto __pyx_L11;
      }
      /*else*/ {

        /* "ckdtree.pyx":1032
 *                     q -= 1
 *                 else:
 *                     t = self.raw_indices[p]             # <<<<<<<<<<<<<<
 *                     self.raw_indices[p] = self.raw_indices[q]
 *                     self.raw_indices[q] = t
 */
        __pyx_v_t = (__pyx_v_self->raw_indices[__pyx_v_p]);

        /* "ckdtree.pyx":1033
 *                 else:
 *                     t = self.raw_indices[p]
 *                     self.raw_indices[p] = self.raw_indices[q]             # <<<<<<<<<<<<<<
 *                     self.raw_indices[q] = t
 *                     p += 1
 */
        (__pyx_v_self->raw_indices[__pyx_v_p]) = (__pyx_v_self->raw_indices[__pyx_v_q]);

        /* "ckdtree.pyx":1034
 *                     t = self.raw_indices[p]
 *                     self.raw_indices[p] = self.raw_indices[q]
 *                     self.raw_indices[q] = t             # <<<<<<<<<<<<<<
 *                     p += 1
 *                     q -= 1
 */
        (__pyx_v_self->raw_indices[__pyx_v_q]) = __pyx_v_t;

        /* "ckdtree.pyx":1035
 *                     self.raw_indices[p] = self.raw_indices[q]
 *                     self.raw_indices[q] = t
 *                     p += 1             # <<<<<<<<<<<<<<
 *                     q -= 1
 * 
 */
        __pyx_v_p = (__pyx_v_p + 1);

        /* "ckdtree.pyx":1036
 *                     self.raw_indices[q] = t
 *                     p += 1
 *                     q -= 1             # <<<<<<<<<<<<<<
 * 
 *             # slide midpoint if necessary
 */
        __pyx_v_q = (__pyx_v_q - 1);
      }
      __pyx_L11:;
    }

    /* "ckdtree.pyx":1039
 * 
 *             # slide midpoint if necessary
 *             if p == start_idx:             # <<<<<<<<<<<<<<
 *                 # no points less than split
 *                 j = start_idx
 */
    __pyx_t_1 = ((__pyx_v_p == __pyx_v_start_idx) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1041
 *             if p == start_idx:
 *                 # no points less than split
 *                 j = start_idx             # <<<<<<<<<<<<<<
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx+1, end_idx):
 */
      __pyx_v_j = __pyx_v_start_idx;

      /* "ckdtree.pyx":1042
 *                 # no points less than split
 *                 j = start_idx
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 for i in range(start_idx+1, end_idx):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 */
      __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);

      /* "ckdtree.pyx":1043
 *                 j = start_idx
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx+1, end_idx):             # <<<<<<<<<<<<<<
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 *                         j = i
 */
      __pyx_t_2 = __pyx_v_end_idx;
      for (__pyx_t_3 = (__pyx_v_start_idx + 1); __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":1044
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx+1, end_idx):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:             # <<<<<<<<<<<<<<
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 */
        __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m) + __pyx_v_d)]) < __pyx_v_split) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":1045
 *                 for i in range(start_idx+1, end_idx):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 *                         j = i             # <<<<<<<<<<<<<<
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[start_idx]
 */
          __pyx_v_j = __pyx_v_i;

          /* "ckdtree.pyx":1046
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 t = self.raw_indices[start_idx]
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 */
          __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);
          goto __pyx_L15;
        }
        __pyx_L15:;
      }

      /* "ckdtree.pyx":1047
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[start_idx]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 */
      __pyx_v_t = (__pyx_v_self->raw_indices[__pyx_v_start_idx]);

      /* "ckdtree.pyx":1048
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[start_idx]
 *                 self.raw_indices[start_idx] = self.raw_indices[j]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[j] = t
 *                 p = start_idx + 1
 */
      (__pyx_v_self->raw_indices[__pyx_v_start_idx]) = (__pyx_v_self->raw_indices[__pyx_v_j]);

      /* "ckdtree.pyx":1049
 *                 t = self.raw_indices[start_idx]
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 *                 self.raw_indices[j] = t             # <<<<<<<<<<<<<<
 *                 p = start_idx + 1
 *                 q = start_idx
 */
      (__pyx_v_self->raw_indices[__pyx_v_j]) = __pyx_v_t;

      /* "ckdtree.pyx":1050
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 *                 p = start_idx + 1             # <<<<<<<<<<<<<<
 *                 q = start_idx
 *             elif p == end_idx:
 */
      __pyx_v_p = (__pyx_v_start_idx + 1);

      /* "ckdtree.pyx":1051
 *                 self.raw_indices[j] = t
 *                 p = start_idx + 1
 *                 q = start_idx             # <<<<<<<<<<<<<<
 *             elif p == end_idx:
 *                 # no points greater than split
 */
      __pyx_v_q = __pyx_v_start_idx;
      goto __pyx_L12;
    }

    /* "ckdtree.pyx":1052
 *                 p = start_idx + 1
 *                 q = start_idx
 *             elif p == end_idx:             # <<<<<<<<<<<<<<
 *                 # no points greater than split
 *                 j = end_idx - 1
 */
    __pyx_t_1 = ((__pyx_v_p == __pyx_v_end_idx) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1054
 *             elif p == end_idx:
 *                 # no points greater than split
 *                 j = end_idx - 1             # <<<<<<<<<<<<<<
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx, end_idx-1):
 */
      __pyx_v_j = (__pyx_v_end_idx - 1);

      /* "ckdtree.pyx":1055
 *                 # no points greater than split
 *                 j = end_idx - 1
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 for i in range(start_idx, end_idx-1):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 */
      __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);

      /* "ckdtree.pyx":1056
 *                 j = end_idx - 1
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx, end_idx-1):             # <<<<<<<<<<<<<<
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 *                         j = i
 */
      __pyx_t_5 = (__pyx_v_end_idx - 1);
      for (__pyx_t_2 = __pyx_v_start_idx; __pyx_t_2 < __pyx_t_5; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;

        /* "ckdtree.pyx":1057
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx, end_idx-1):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:             # <<<<<<<<<<<<<<
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 */
        __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m) + __pyx_v_d)]) > __pyx_v_split) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":1058
 *                 for i in range(start_idx, end_idx-1):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 *                         j = i             # <<<<<<<<<<<<<<
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[end_idx-1]
 */
          __pyx_v_j = __pyx_v_i;

          /* "ckdtree.pyx":1059
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 t = self.raw_indices[end_idx-1]
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 */
          __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);
          goto __pyx_L18;
        }
        __pyx_L18:;
      }

      /* "ckdtree.pyx":1060
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[end_idx-1]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 */
      __pyx_v_t = (__pyx_v_self->raw_indices[(__pyx_v_end_idx - 1)]);

      /* "ckdtree.pyx":1061
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[end_idx-1]
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[j] = t
 *                 p = end_idx - 1
 */
      (__pyx_v_self->raw_indices[(__pyx_v_end_idx - 1)]) = (__pyx_v_self->raw_indices[__pyx_v_j]);

      /* "ckdtree.pyx":1062
 *                 t = self.raw_indices[end_idx-1]
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 *                 self.raw_indices[j] = t             # <<<<<<<<<<<<<<
 *                 p = end_idx - 1
 *                 q = end_idx - 2
 */
      (__pyx_v_self->raw_indices[__pyx_v_j]) = __pyx_v_t;

      /* "ckdtree.pyx":1063
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 *                 p = end_idx - 1             # <<<<<<<<<<<<<<
 *                 q = end_idx - 2
 * 
 */
      __pyx_v_p = (__pyx_v_end_idx - 1);

      /* "ckdtree.pyx":1064
 *                 self.raw_indices[j] = t
 *                 p = end_idx - 1
 *                 q = end_idx - 2             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      __pyx_v_q = (__pyx_v_end_idx - 2);
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "ckdtree.pyx":1066
 *                 q = end_idx - 2
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 mids = <np.float64_t*> PyMem_Malloc(sizeof(np.float64_t)*self.m)
 *                 if mids == <np.float64_t*> NULL:
 */
    /*try:*/ {

      /* "ckdtree.pyx":1067
 * 
 *             try:
 *                 mids = <np.float64_t*> PyMem_Malloc(sizeof(np.float64_t)*self.m)             # <<<<<<<<<<<<<<
 *                 if mids == <np.float64_t*> NULL:
 *                     raise MemoryError
 */
      __pyx_v_mids = ((__pyx_t_5numpy_float64_t *)PyMem_Malloc(((sizeof(__pyx_t_5numpy_float64_t)) * __pyx_v_self->m)));

      /* "ckdtree.pyx":1068
 *             try:
 *                 mids = <np.float64_t*> PyMem_Malloc(sizeof(np.float64_t)*self.m)
 *                 if mids == <np.float64_t*> NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = ((__pyx_v_mids == ((__pyx_t_5numpy_float64_t *)NULL)) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1069
 *                 mids = <np.float64_t*> PyMem_Malloc(sizeof(np.float64_t)*self.m)
 *                 if mids == <np.float64_t*> NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(self.m):
 */
        PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L20_error;}
      }

      /* "ckdtree.pyx":1071
 *                     raise MemoryError
 * 
 *                 for i in range(self.m):             # <<<<<<<<<<<<<<
 *                     mids[i] = maxes[i]
 *                 mids[d] = split
 */
      __pyx_t_2 = __pyx_v_self->m;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":1072
 * 
 *                 for i in range(self.m):
 *                     mids[i] = maxes[i]             # <<<<<<<<<<<<<<
 *                 mids[d] = split
 *                 _less = self.__build(start_idx, p, mids, mins, _median)
 */
        (__pyx_v_mids[__pyx_v_i]) = (__pyx_v_maxes[__pyx_v_i]);
      }

      /* "ckdtree.pyx":1073
 *                 for i in range(self.m):
 *                     mids[i] = maxes[i]
 *                 mids[d] = split             # <<<<<<<<<<<<<<
 *                 _less = self.__build(start_idx, p, mids, mins, _median)
 * 
 */
      (__pyx_v_mids[__pyx_v_d]) = __pyx_v_split;

      /* "ckdtree.pyx":1074
 *                     mids[i] = maxes[i]
 *                 mids[d] = split
 *                 _less = self.__build(start_idx, p, mids, mins, _median)             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(self.m):
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___build(__pyx_v_self, __pyx_v_start_idx, __pyx_v_p, __pyx_v_mids, __pyx_v_mins, __pyx_v__median); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L20_error;}
      __pyx_v__less = __pyx_t_2;

      /* "ckdtree.pyx":1076
 *                 _less = self.__build(start_idx, p, mids, mins, _median)
 * 
 *                 for i in range(self.m):             # <<<<<<<<<<<<<<
 *                     mids[i] = mins[i]
 *                 mids[d] = split
 */
      __pyx_t_2 = __pyx_v_self->m;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":1077
 * 
 *                 for i in range(self.m):
 *                     mids[i] = mins[i]             # <<<<<<<<<<<<<<
 *                 mids[d] = split
 *                 _greater = self.__build(p, end_idx, maxes, mids, _median)
 */
        (__pyx_v_mids[__pyx_v_i]) = (__pyx_v_mins[__pyx_v_i]);
      }

      /* "ckdtree.pyx":1078
 *                 for i in range(self.m):
 *                     mids[i] = mins[i]
 *                 mids[d] = split             # <<<<<<<<<<<<<<
 *                 _greater = self.__build(p, end_idx, maxes, mids, _median)
 * 
 */
      (__pyx_v_mids[__pyx_v_d]) = __pyx_v_split;

      /* "ckdtree.pyx":1079
 *                     mids[i] = mins[i]
 *                 mids[d] = split
 *                 _greater = self.__build(p, end_idx, maxes, mids, _median)             # <<<<<<<<<<<<<<
 * 
 *                 root = tree_buffer_root(self.tree_buffer)
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___build(__pyx_v_self, __pyx_v_p, __pyx_v_end_idx, __pyx_v_maxes, __pyx_v_mids, __pyx_v__median); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L20_error;}
      __pyx_v__greater = __pyx_t_2;

      /* "ckdtree.pyx":1081
 *                 _greater = self.__build(p, end_idx, maxes, mids, _median)
 * 
 *                 root = tree_buffer_root(self.tree_buffer)             # <<<<<<<<<<<<<<
 *                 # recompute n because std::vector can
 *                 # reallocate its internal buffer
 */
      __pyx_v_root = tree_buffer_root(__pyx_v_self->tree_buffer);

      /* "ckdtree.pyx":1084
 *                 # recompute n because std::vector can
 *                 # reallocate its internal buffer
 *                 n = root + node_index             # <<<<<<<<<<<<<<
 *                 # fill in entries
 *                 n._less = _less
 */
      __pyx_v_n = (__pyx_v_root + __pyx_v_node_index);

      /* "ckdtree.pyx":1086
 *                 n = root + node_index
 *                 # fill in entries
 *                 n._less = _less             # <<<<<<<<<<<<<<
 *                 n._greater = _greater
 *                 n.less = root + _less
 */
      __pyx_v_n->_less = __pyx_v__less;

      /* "ckdtree.pyx":1087
 *                 # fill in entries
 *                 n._less = _less
 *                 n._greater = _greater             # <<<<<<<<<<<<<<
 *                 n.less = root + _less
 *                 n.greater = root + _greater
 */
      __pyx_v_n->_greater = __pyx_v__greater;

      /* "ckdtree.pyx":1088
 *                 n._less = _less
 *                 n._greater = _greater
 *                 n.less = root + _less             # <<<<<<<<<<<<<<
 *                 n.greater = root + _greater
 *                 n.children = n.less.children + n.greater.children
 */
      __pyx_v_n->less = (__pyx_v_root + __pyx_v__less);

      /* "ckdtree.pyx":1089
 *                 n._greater = _greater
 *                 n.less = root + _less
 *                 n.greater = root + _greater             # <<<<<<<<<<<<<<
 *                 n.children = n.less.children + n.greater.children
 *                 n.split_dim = d
 */
      __pyx_v_n->greater = (__pyx_v_root + __pyx_v__greater);

      /* "ckdtree.pyx":1090
 *                 n.less = root + _less
 *                 n.greater = root + _greater
 *                 n.children = n.less.children + n.greater.children             # <<<<<<<<<<<<<<
 *                 n.split_dim = d
 *                 n.split = split
 */
      __pyx_v_n->children = (__pyx_v_n->less->children + __pyx_v_n->greater->children);

      /* "ckdtree.pyx":1091
 *                 n.greater = root + _greater
 *                 n.children = n.less.children + n.greater.children
 *                 n.split_dim = d             # <<<<<<<<<<<<<<
 *                 n.split = split
 * 
 */
      __pyx_v_n->split_dim = __pyx_v_d;

      /* "ckdtree.pyx":1092
 *                 n.children = n.less.children + n.greater.children
 *                 n.split_dim = d
 *                 n.split = split             # <<<<<<<<<<<<<<
 * 
 *             finally:
 */
      __pyx_v_n->split = __pyx_v_split;
    }

    /* "ckdtree.pyx":1095
 * 
 *             finally:
 *                 PyMem_Free(mids)             # <<<<<<<<<<<<<<
 * 
 *             return node_index
 */
    /*finally:*/ {
      /*normal exit:*/{
        PyMem_Free(__pyx_v_mids);
        goto __pyx_L21;
      }
      /*exception exit:*/{
        __pyx_L20_error:;
        __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __pyx_t_4 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
        {
          PyMem_Free(__pyx_v_mids);
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
        __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
        goto __pyx_L1_error;
      }
      __pyx_L21:;
    }

    /* "ckdtree.pyx":1097
 *                 PyMem_Free(mids)
 * 
 *             return node_index             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = __pyx_v_node_index;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":958
 * 
 *     @cython.cdivision(True)
 *     cdef np.intp_t __build(cKDTree self, np.intp_t start_idx, np.intp_t end_idx,             # <<<<<<<<<<<<<<
 *                        np.float64_t *maxes, np.float64_t *mins, int _median)\
 *                        except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1101
 * 
 *     @cython.cdivision(True)
 *     cdef np.intp_t __build_compact(cKDTree self, np.intp_t start_idx,             # <<<<<<<<<<<<<<
 *             np.intp_t end_idx, np.float64_t *mins, np.float64_t *maxes,
 *               int _median) except -1:
 */

static __pyx_t_5numpy_intp_t __pyx_f_7ckdtree_7cKDTree___build_compact(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_intp_t __pyx_v_start_idx, __pyx_t_5numpy_intp_t __pyx_v_end_idx, __pyx_t_5numpy_float64_t *__pyx_v_mins, __pyx_t_5numpy_float64_t *__pyx_v_maxes, int __pyx_v__median) {
  struct ckdtreenode __pyx_v_new_node;
  __pyx_t_5numpy_intp_t __pyx_v_node_index;
  __pyx_t_5numpy_intp_t __pyx_v__less;
  __pyx_t_5numpy_intp_t __pyx_v__greater;
  struct ckdtreenode *__pyx_v_n;
  struct ckdtreenode *__pyx_v_root;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  __pyx_t_5numpy_intp_t __pyx_v_t;
  __pyx_t_5numpy_intp_t __pyx_v_p;
  __pyx_t_5numpy_intp_t __pyx_v_q;
  __pyx_t_5numpy_intp_t __pyx_v_d;
  __pyx_t_5numpy_float64_t __pyx_v_size;
  __pyx_t_5numpy_float64_t __pyx_v_split;
  __pyx_t_5numpy_float64_t __pyx_v_minval;
  __pyx_t_5numpy_float64_t __pyx_v_maxval;
  __pyx_t_5numpy_float64_t __pyx_v_tmp;
  __pyx_t_5numpy_float64_t *__pyx_v_tmp_data_point;
  __pyx_t_5numpy_intp_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  __pyx_t_5numpy_intp_t __pyx_t_4;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  __pyx_t_5numpy_float64_t __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__build_compact", 0);

  /* "ckdtree.pyx":1118
 * 
 *         # put a new node into the node stack
 *         self.tree_buffer.push_back(new_node)             # <<<<<<<<<<<<<<
 *         node_index = self.tree_buffer.size() - 1
 *         root = tree_buffer_root(self.tree_buffer)
 */
  try {
    __pyx_v_self->tree_buffer->push_back(__pyx_v_new_node);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":1119
 *         # put a new node into the node stack
 *         self.tree_buffer.push_back(new_node)
 *         node_index = self.tree_buffer.size() - 1             # <<<<<<<<<<<<<<
 *         root = tree_buffer_root(self.tree_buffer)
 *         n = root + node_index
 */
  __pyx_v_node_index = (__pyx_v_self->tree_buffer->size() - 1);

  /* "ckdtree.pyx":1120
 *         self.tree_buffer.push_back(new_node)
 *         node_index = self.tree_buffer.size() - 1
 *         root = tree_buffer_root(self.tree_buffer)             # <<<<<<<<<<<<<<
 *         n = root + node_index
 * 
 */
  __pyx_v_root = tree_buffer_root(__pyx_v_self->tree_buffer);

  /* "ckdtree.pyx":1121
 *         node_index = self.tree_buffer.size() - 1
 *         root = tree_buffer_root(self.tree_buffer)
 *         n = root + node_index             # <<<<<<<<<<<<<<
 * 
 *         if end_idx-start_idx <= self.leafsize:
 */
  __pyx_v_n = (__pyx_v_root + __pyx_v_node_index);

  /* "ckdtree.pyx":1123
 *         n = root + node_index
 * 
 *         if end_idx-start_idx <= self.leafsize:             # <<<<<<<<<<<<<<
 *             # below brute force limit
 *             # return leafnode
 */
  __pyx_t_1 = (((__pyx_v_end_idx - __pyx_v_start_idx) <= __pyx_v_self->leafsize) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1126
 *             # below brute force limit
 *             # return leafnode
 *             n.split_dim = -1             # <<<<<<<<<<<<<<
 *             n.children = end_idx - start_idx
 *             n.start_idx = start_idx
 */
    __pyx_v_n->split_dim = -1;

    /* "ckdtree.pyx":1127
 *             # return leafnode
 *             n.split_dim = -1
 *             n.children = end_idx - start_idx             # <<<<<<<<<<<<<<
 *             n.start_idx = start_idx
 *             n.end_idx = end_idx
 */
    __pyx_v_n->children = (__pyx_v_end_idx - __pyx_v_start_idx);

    /* "ckdtree.pyx":1128
 *             n.split_dim = -1
 *             n.children = end_idx - start_idx
 *             n.start_idx = start_idx             # <<<<<<<<<<<<<<
 *             n.end_idx = end_idx
 *             return node_index
 */
    __pyx_v_n->start_idx = __pyx_v_start_idx;

    /* "ckdtree.pyx":1129
 *             n.children = end_idx - start_idx
 *             n.start_idx = start_idx
 *             n.end_idx = end_idx             # <<<<<<<<<<<<<<
 *             return node_index
 *         else:
 */
    __pyx_v_n->end_idx = __pyx_v_end_idx;

    /* "ckdtree.pyx":1130
 *             n.start_idx = start_idx
 *             n.end_idx = end_idx
 *             return node_index             # <<<<<<<<<<<<<<
 *         else:
 *             d = 0
 */
    __pyx_r = __pyx_v_node_index;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "ckdtree.pyx":1132
 *             return node_index
 *         else:
 *             d = 0             # <<<<<<<<<<<<<<
 *             size = 0
 *             # Recompute hyperrectangle bounds. This should lead to a more
 */
    __pyx_v_d = 0;

    /* "ckdtree.pyx":1133
 *         else:
 *             d = 0
 *             size = 0             # <<<<<<<<<<<<<<
 *             # Recompute hyperrectangle bounds. This should lead to a more
 *             # compact kd-tree but comes at the expense of larger construction
 */
    __pyx_v_size = 0.0;

    /* "ckdtree.pyx":1138
 *             # time. However, construction time is usually dwarfed by the
 *             # query time by orders of magnitude.
 *             tmp_data_point = self.raw_data + self.raw_indices[start_idx]*self.m             # <<<<<<<<<<<<<<
 *             for i in range(self.m):
 *                 maxes[i] = tmp_data_point[i]
 */
    __pyx_v_tmp_data_point = (__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_start_idx]) * __pyx_v_self->m));

    /* "ckdtree.pyx":1139
 *             # query time by orders of magnitude.
 *             tmp_data_point = self.raw_data + self.raw_indices[start_idx]*self.m
 *             for i in range(self.m):             # <<<<<<<<<<<<<<
 *                 maxes[i] = tmp_data_point[i]
 *                 mins[i] = tmp_data_point[i]
 */
    __pyx_t_2 = __pyx_v_self->m;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "ckdtree.pyx":1140
 *             tmp_data_point = self.raw_data + self.raw_indices[start_idx]*self.m
 *             for i in range(self.m):
 *                 maxes[i] = tmp_data_point[i]             # <<<<<<<<<<<<<<
 *                 mins[i] = tmp_data_point[i]
 *             for j in range(start_idx+1, end_idx):
 */
      (__pyx_v_maxes[__pyx_v_i]) = (__pyx_v_tmp_data_point[__pyx_v_i]);

      /* "ckdtree.pyx":1141
 *             for i in range(self.m):
 *                 maxes[i] = tmp_data_point[i]
 *                 mins[i] = tmp_data_point[i]             # <<<<<<<<<<<<<<
 *             for j in range(start_idx+1, end_idx):
 *                 tmp_data_point = self.raw_data + self.raw_indices[j]*self.m
 */
      (__pyx_v_mins[__pyx_v_i]) = (__pyx_v_tmp_data_point[__pyx_v_i]);
    }

    /* "ckdtree.pyx":1142
 *                 maxes[i] = tmp_data_point[i]
 *                 mins[i] = tmp_data_point[i]
 *             for j in range(start_idx+1, end_idx):             # <<<<<<<<<<<<<<
 *                 tmp_data_point = self.raw_data + self.raw_indices[j]*self.m
 *                 for i in range(self.m):
 */
    __pyx_t_2 = __pyx_v_end_idx;
    for (__pyx_t_3 = (__pyx_v_start_idx + 1); __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_j = __pyx_t_3;

      /* "ckdtree.pyx":1143
 *                 mins[i] = tmp_data_point[i]
 *             for j in range(start_idx+1, end_idx):
 *                 tmp_data_point = self.raw_data + self.raw_indices[j]*self.m             # <<<<<<<<<<<<<<
 *                 for i in range(self.m):
 *                     tmp = tmp_data_point[i]
 */
      __pyx_v_tmp_data_point = (__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m));

      /* "ckdtree.pyx":1144
 *             for j in range(start_idx+1, end_idx):
 *                 tmp_data_point = self.raw_data + self.raw_indices[j]*self.m
 *                 for i in range(self.m):             # <<<<<<<<<<<<<<
 *                     tmp = tmp_data_point[i]
 *                     maxes[i] = maxes[i] if (maxes[i] > tmp) else tmp
 */
      __pyx_t_4 = __pyx_v_self->m;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "ckdtree.pyx":1145
 *                 tmp_data_point = self.raw_data + self.raw_indices[j]*self.m
 *                 for i in range(self.m):
 *                     tmp = tmp_data_point[i]             # <<<<<<<<<<<<<<
 *                     maxes[i] = maxes[i] if (maxes[i] > tmp) else tmp
 *                     mins[i] = mins[i] if (mins[i] < tmp) else tmp
 */
        __pyx_v_tmp = (__pyx_v_tmp_data_point[__pyx_v_i]);

        /* "ckdtree.pyx":1146
 *                 for i in range(self.m):
 *                     tmp = tmp_data_point[i]
 *                     maxes[i] = maxes[i] if (maxes[i] > tmp) else tmp             # <<<<<<<<<<<<<<
 *                     mins[i] = mins[i] if (mins[i] < tmp) else tmp
 *             # split on the dimension with largest spread
 */
        if ((((__pyx_v_maxes[__pyx_v_i]) > __pyx_v_tmp) != 0)) {
          __pyx_t_6 = (__pyx_v_maxes[__pyx_v_i]);
        } else {
          __pyx_t_6 = __pyx_v_tmp;
        }
        (__pyx_v_maxes[__pyx_v_i]) = __pyx_t_6;

        /* "ckdtree.pyx":1147
 *                     tmp = tmp_data_point[i]
 *                     maxes[i] = maxes[i] if (maxes[i] > tmp) else tmp
 *                     mins[i] = mins[i] if (mins[i] < tmp) else tmp             # <<<<<<<<<<<<<<
 *             # split on the dimension with largest spread
 *             for i in range(self.m):
 */
        if ((((__pyx_v_mins[__pyx_v_i]) < __pyx_v_tmp) != 0)) {
          __pyx_t_6 = (__pyx_v_mins[__pyx_v_i]);
        } else {
          __pyx_t_6 = __pyx_v_tmp;
        }
        (__pyx_v_mins[__pyx_v_i]) = __pyx_t_6;
      }
    }

    /* "ckdtree.pyx":1149
 *                     mins[i] = mins[i] if (mins[i] < tmp) else tmp
 *             # split on the dimension with largest spread
 *             for i in range(self.m):             # <<<<<<<<<<<<<<
 *                 if maxes[i]-mins[i] > size:
 *                     d = i
 */
    __pyx_t_2 = __pyx_v_self->m;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "ckdtree.pyx":1150
 *             # split on the dimension with largest spread
 *             for i in range(self.m):
 *                 if maxes[i]-mins[i] > size:             # <<<<<<<<<<<<<<
 *                     d = i
 *                     size = maxes[i] - mins[i]
 */
      __pyx_t_1 = ((((__pyx_v_maxes[__pyx_v_i]) - (__pyx_v_mins[__pyx_v_i])) > __pyx_v_size) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1151
 *             for i in range(self.m):
 *                 if maxes[i]-mins[i] > size:
 *                     d = i             # <<<<<<<<<<<<<<
 *                     size = maxes[i] - mins[i]
 *             maxval = maxes[d]
 */
        __pyx_v_d = __pyx_v_i;

        /* "ckdtree.pyx":1152
 *                 if maxes[i]-mins[i] > size:
 *                     d = i
 *                     size = maxes[i] - mins[i]             # <<<<<<<<<<<<<<
 *             maxval = maxes[d]
 *             minval = mins[d]
 */
        __pyx_v_size = ((__pyx_v_maxes[__pyx_v_i]) - (__pyx_v_mins[__pyx_v_i]));
        goto __pyx_L12;
      }
      __pyx_L12:;
    }

    /* "ckdtree.pyx":1153
 *                     d = i
 *                     size = maxes[i] - mins[i]
 *             maxval = maxes[d]             # <<<<<<<<<<<<<<
 *             minval = mins[d]
 *             if maxval == minval:
 */
    __pyx_v_maxval = (__pyx_v_maxes[__pyx_v_d]);

    /* "ckdtree.pyx":1154
 *                     size = maxes[i] - mins[i]
 *             maxval = maxes[d]
 *             minval = mins[d]             # <<<<<<<<<<<<<<
 *             if maxval == minval:
 *                 # all points are identical; warn user?
 */
    __pyx_v_minval = (__pyx_v_mins[__pyx_v_d]);

    /* "ckdtree.pyx":1155
 *             maxval = maxes[d]
 *             minval = mins[d]
 *             if maxval == minval:             # <<<<<<<<<<<<<<
 *                 # all points are identical; warn user?
 *                 # return leafnode
 */
    __pyx_t_1 = ((__pyx_v_maxval == __pyx_v_minval) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1158
 *                 # all points are identical; warn user?
 *                 # return leafnode
 *                 n.split_dim = -1             # <<<<<<<<<<<<<<
 *                 n.children = end_idx - start_idx
 *                 n.start_idx = start_idx
 */
      __pyx_v_n->split_dim = -1;

      /* "ckdtree.pyx":1159
 *                 # return leafnode
 *                 n.split_dim = -1
 *                 n.children = end_idx - start_idx             # <<<<<<<<<<<<<<
 *                 n.start_idx = start_idx
 *                 n.end_idx = end_idx
 */
      __pyx_v_n->children = (__pyx_v_end_idx - __pyx_v_start_idx);

      /* "ckdtree.pyx":1160
 *                 n.split_dim = -1
 *                 n.children = end_idx - start_idx
 *                 n.start_idx = start_idx             # <<<<<<<<<<<<<<
 *                 n.end_idx = end_idx
 *                 return node_index
 */
      __pyx_v_n->start_idx = __pyx_v_start_idx;

      /* "ckdtree.pyx":1161
 *                 n.children = end_idx - start_idx
 *                 n.start_idx = start_idx
 *                 n.end_idx = end_idx             # <<<<<<<<<<<<<<
 *                 return node_index
 * 
 */
      __pyx_v_n->end_idx = __pyx_v_end_idx;

      /* "ckdtree.pyx":1162
 *                 n.start_idx = start_idx
 *                 n.end_idx = end_idx
 *                 return node_index             # <<<<<<<<<<<<<<
 * 
 *             # construct new inner node
 */
      __pyx_r = __pyx_v_node_index;
      goto __pyx_L0;
    }

    /* "ckdtree.pyx":1166
 *             # construct new inner node
 * 
 *             if _median:             # <<<<<<<<<<<<<<
 *                 # split on median to create a balanced tree
 *                 # adopted from scikit-learn
 */
    __pyx_t_1 = (__pyx_v__median != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1169
 *                 # split on median to create a balanced tree
 *                 # adopted from scikit-learn
 *                 i = (end_idx-start_idx) // 2             # <<<<<<<<<<<<<<
 *                 partition_node_indices(self.raw_data,
 *                                 self.raw_indices + start_idx,
 */
      __pyx_v_i = ((__pyx_v_end_idx - __pyx_v_start_idx) / 2);

      /* "ckdtree.pyx":1170
 *                 # adopted from scikit-learn
 *                 i = (end_idx-start_idx) // 2
 *                 partition_node_indices(self.raw_data,             # <<<<<<<<<<<<<<
 *                                 self.raw_indices + start_idx,
 *                                 d,
 */
      __pyx_t_7 = __pyx_f_7ckdtree_partition_node_indices(__pyx_v_self->raw_data, (__pyx_v_self->raw_indices + __pyx_v_start_idx), __pyx_v_d, __pyx_v_i, __pyx_v_self->m, (__pyx_v_end_idx - __pyx_v_start_idx)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1176
 *                                 self.m,
 *                                 end_idx-start_idx)
 *                 p = start_idx + i             # <<<<<<<<<<<<<<
 *                 split = self.raw_data[self.raw_indices[p]*self.m+d]
 * 
 */
      __pyx_v_p = (__pyx_v_start_idx + __pyx_v_i);

      /* "ckdtree.pyx":1177
 *                                 end_idx-start_idx)
 *                 p = start_idx + i
 *                 split = self.raw_data[self.raw_indices[p]*self.m+d]             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_p]) * __pyx_v_self->m) + __pyx_v_d)]);
      goto __pyx_L14;
    }
    /*else*/ {

      /* "ckdtree.pyx":1181
 *             else:
 *                 # split with sliding midpoint rule
 *                 split = (maxval+minval) / 2             # <<<<<<<<<<<<<<
 * 
 *             p = start_idx
 */
      __pyx_v_split = ((__pyx_v_maxval + __pyx_v_minval) / 2.0);
    }
    __pyx_L14:;

    /* "ckdtree.pyx":1183
 *                 split = (maxval+minval) / 2
 * 
 *             p = start_idx             # <<<<<<<<<<<<<<
 *             q = end_idx - 1
 *             while p<=q:
 */
    __pyx_v_p = __pyx_v_start_idx;

    /* "ckdtree.pyx":1184
 * 
 *             p = start_idx
 *             q = end_idx - 1             # <<<<<<<<<<<<<<
 *             while p<=q:
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 */
    __pyx_v_q = (__pyx_v_end_idx - 1);

    /* "ckdtree.pyx":1185
 *             p = start_idx
 *             q = end_idx - 1
 *             while p<=q:             # <<<<<<<<<<<<<<
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 *                     p += 1
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_p <= __pyx_v_q) != 0);
      if (!__pyx_t_1) break;

      /* "ckdtree.pyx":1186
 *             q = end_idx - 1
 *             while p<=q:
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:
 */
      __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_p]) * __pyx_v_self->m) + __pyx_v_d)]) < __pyx_v_split) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1187
 *             while p<=q:
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:
 *                     q -= 1
 */
        __pyx_v_p = (__pyx_v_p + 1);
        goto __pyx_L17;
      }

      /* "ckdtree.pyx":1188
 *                 if self.raw_data[self.raw_indices[p]*self.m+d] < split:
 *                     p += 1
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:             # <<<<<<<<<<<<<<
 *                     q -= 1
 *                 else:
 */
      __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_q]) * __pyx_v_self->m) + __pyx_v_d)]) >= __pyx_v_split) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1189
 *                     p += 1
 *                 elif self.raw_data[self.raw_indices[q]*self.m+d] >= split:
 *                     q -= 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     t = self.raw_indices[p]
 */
        __pyx_v_q = (__pyx_v_q - 1);
        goto __pyx_L17;
      }
      /*else*/ {

        /* "ckdtree.pyx":1191
 *                     q -= 1
 *                 else:
 *                     t = self.raw_indices[p]             # <<<<<<<<<<<<<<
 *                     self.raw_indices[p] = self.raw_indices[q]
 *                     self.raw_indices[q] = t
 */
        __pyx_v_t = (__pyx_v_self->raw_indices[__pyx_v_p]);

        /* "ckdtree.pyx":1192
 *                 else:
 *                     t = self.raw_indices[p]
 *                     self.raw_indices[p] = self.raw_indices[q]             # <<<<<<<<<<<<<<
 *                     self.raw_indices[q] = t
 *                     p += 1
 */
        (__pyx_v_self->raw_indices[__pyx_v_p]) = (__pyx_v_self->raw_indices[__pyx_v_q]);

        /* "ckdtree.pyx":1193
 *                     t = self.raw_indices[p]
 *                     self.raw_indices[p] = self.raw_indices[q]
 *                     self.raw_indices[q] = t             # <<<<<<<<<<<<<<
 *                     p += 1
 *                     q -= 1
 */
        (__pyx_v_self->raw_indices[__pyx_v_q]) = __pyx_v_t;

        /* "ckdtree.pyx":1194
 *                     self.raw_indices[p] = self.raw_indices[q]
 *                     self.raw_indices[q] = t
 *                     p += 1             # <<<<<<<<<<<<<<
 *                     q -= 1
 * 
 */
        __pyx_v_p = (__pyx_v_p + 1);

        /* "ckdtree.pyx":1195
 *                     self.raw_indices[q] = t
 *                     p += 1
 *                     q -= 1             # <<<<<<<<<<<<<<
 * 
 *             # slide midpoint if necessary
 */
        __pyx_v_q = (__pyx_v_q - 1);
      }
      __pyx_L17:;
    }

    /* "ckdtree.pyx":1198
 * 
 *             # slide midpoint if necessary
 *             if p == start_idx:             # <<<<<<<<<<<<<<
 *                 # no points less than split
 *                 j = start_idx
 */
    __pyx_t_1 = ((__pyx_v_p == __pyx_v_start_idx) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1200
 *             if p == start_idx:
 *                 # no points less than split
 *                 j = start_idx             # <<<<<<<<<<<<<<
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx+1, end_idx):
 */
      __pyx_v_j = __pyx_v_start_idx;

      /* "ckdtree.pyx":1201
 *                 # no points less than split
 *                 j = start_idx
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 for i in range(start_idx+1, end_idx):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 */
      __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);

      /* "ckdtree.pyx":1202
 *                 j = start_idx
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx+1, end_idx):             # <<<<<<<<<<<<<<
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 *                         j = i
 */
      __pyx_t_2 = __pyx_v_end_idx;
      for (__pyx_t_3 = (__pyx_v_start_idx + 1); __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":1203
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx+1, end_idx):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:             # <<<<<<<<<<<<<<
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 */
        __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m) + __pyx_v_d)]) < __pyx_v_split) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":1204
 *                 for i in range(start_idx+1, end_idx):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 *                         j = i             # <<<<<<<<<<<<<<
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[start_idx]
 */
          __pyx_v_j = __pyx_v_i;

          /* "ckdtree.pyx":1205
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] < split:
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 t = self.raw_indices[start_idx]
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 */
          __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);
          goto __pyx_L21;
        }
        __pyx_L21:;
      }

      /* "ckdtree.pyx":1206
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[start_idx]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 */
      __pyx_v_t = (__pyx_v_self->raw_indices[__pyx_v_start_idx]);

      /* "ckdtree.pyx":1207
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[start_idx]
 *                 self.raw_indices[start_idx] = self.raw_indices[j]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[j] = t
 *                 p = start_idx + 1
 */
      (__pyx_v_self->raw_indices[__pyx_v_start_idx]) = (__pyx_v_self->raw_indices[__pyx_v_j]);

      /* "ckdtree.pyx":1208
 *                 t = self.raw_indices[start_idx]
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 *                 self.raw_indices[j] = t             # <<<<<<<<<<<<<<
 *                 p = start_idx + 1
 *                 q = start_idx
 */
      (__pyx_v_self->raw_indices[__pyx_v_j]) = __pyx_v_t;

      /* "ckdtree.pyx":1209
 *                 self.raw_indices[start_idx] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 *                 p = start_idx + 1             # <<<<<<<<<<<<<<
 *                 q = start_idx
 *             elif p == end_idx:
 */
      __pyx_v_p = (__pyx_v_start_idx + 1);

      /* "ckdtree.pyx":1210
 *                 self.raw_indices[j] = t
 *                 p = start_idx + 1
 *                 q = start_idx             # <<<<<<<<<<<<<<
 *             elif p == end_idx:
 *                 # no points greater than split
 */
      __pyx_v_q = __pyx_v_start_idx;
      goto __pyx_L18;
    }

    /* "ckdtree.pyx":1211
 *                 p = start_idx + 1
 *                 q = start_idx
 *             elif p == end_idx:             # <<<<<<<<<<<<<<
 *                 # no points greater than split
 *                 j = end_idx - 1
 */
    __pyx_t_1 = ((__pyx_v_p == __pyx_v_end_idx) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1213
 *             elif p == end_idx:
 *                 # no points greater than split
 *                 j = end_idx - 1             # <<<<<<<<<<<<<<
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx, end_idx-1):
 */
      __pyx_v_j = (__pyx_v_end_idx - 1);

      /* "ckdtree.pyx":1214
 *                 # no points greater than split
 *                 j = end_idx - 1
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 for i in range(start_idx, end_idx-1):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 */
      __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);

      /* "ckdtree.pyx":1215
 *                 j = end_idx - 1
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx, end_idx-1):             # <<<<<<<<<<<<<<
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 *                         j = i
 */
      __pyx_t_8 = (__pyx_v_end_idx - 1);
      for (__pyx_t_2 = __pyx_v_start_idx; __pyx_t_2 < __pyx_t_8; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;

        /* "ckdtree.pyx":1216
 *                 split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 for i in range(start_idx, end_idx-1):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:             # <<<<<<<<<<<<<<
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 */
        __pyx_t_1 = (((__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m) + __pyx_v_d)]) > __pyx_v_split) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":1217
 *                 for i in range(start_idx, end_idx-1):
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 *                         j = i             # <<<<<<<<<<<<<<
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[end_idx-1]
 */
          __pyx_v_j = __pyx_v_i;

          /* "ckdtree.pyx":1218
 *                     if self.raw_data[self.raw_indices[i]*self.m+d] > split:
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]             # <<<<<<<<<<<<<<
 *                 t = self.raw_indices[end_idx-1]
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 */
          __pyx_v_split = (__pyx_v_self->raw_data[(((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m) + __pyx_v_d)]);
          goto __pyx_L24;
        }
        __pyx_L24:;
      }

      /* "ckdtree.pyx":1219
 *                         j = i
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[end_idx-1]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 */
      __pyx_v_t = (__pyx_v_self->raw_indices[(__pyx_v_end_idx - 1)]);

      /* "ckdtree.pyx":1220
 *                         split = self.raw_data[self.raw_indices[j]*self.m+d]
 *                 t = self.raw_indices[end_idx-1]
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]             # <<<<<<<<<<<<<<
 *                 self.raw_indices[j] = t
 *                 p = end_idx - 1
 */
      (__pyx_v_self->raw_indices[(__pyx_v_end_idx - 1)]) = (__pyx_v_self->raw_indices[__pyx_v_j]);

      /* "ckdtree.pyx":1221
 *                 t = self.raw_indices[end_idx-1]
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 *                 self.raw_indices[j] = t             # <<<<<<<<<<<<<<
 *                 p = end_idx - 1
 *                 q = end_idx - 2
 */
      (__pyx_v_self->raw_indices[__pyx_v_j]) = __pyx_v_t;

      /* "ckdtree.pyx":1222
 *                 self.raw_indices[end_idx-1] = self.raw_indices[j]
 *                 self.raw_indices[j] = t
 *                 p = end_idx - 1             # <<<<<<<<<<<<<<
 *                 q = end_idx - 2
 * 
 */
      __pyx_v_p = (__pyx_v_end_idx - 1);

      /* "ckdtree.pyx":1223
 *                 self.raw_indices[j] = t
 *                 p = end_idx - 1
 *                 q = end_idx - 2             # <<<<<<<<<<<<<<
 * 
 *             _less = self.__build_compact(start_idx, p, mins, maxes, _median)
 */
      __pyx_v_q = (__pyx_v_end_idx - 2);
      goto __pyx_L18;
    }
    __pyx_L18:;

    /* "ckdtree.pyx":1225
 *                 q = end_idx - 2
 * 
 *             _less = self.__build_compact(start_idx, p, mins, maxes, _median)             # <<<<<<<<<<<<<<
 *             _greater = self.__build_compact(p, end_idx, mins, maxes, _median)
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___build_compact(__pyx_v_self, __pyx_v_start_idx, __pyx_v_p, __pyx_v_mins, __pyx_v_maxes, __pyx_v__median); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__less = __pyx_t_2;

    /* "ckdtree.pyx":1226
 * 
 *             _less = self.__build_compact(start_idx, p, mins, maxes, _median)
 *             _greater = self.__build_compact(p, end_idx, mins, maxes, _median)             # <<<<<<<<<<<<<<
 * 
 *             root = tree_buffer_root(self.tree_buffer)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___build_compact(__pyx_v_self, __pyx_v_p, __pyx_v_end_idx, __pyx_v_mins, __pyx_v_maxes, __pyx_v__median); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__greater = __pyx_t_2;

    /* "ckdtree.pyx":1228
 *             _greater = self.__build_compact(p, end_idx, mins, maxes, _median)
 * 
 *             root = tree_buffer_root(self.tree_buffer)             # <<<<<<<<<<<<<<
 *             # recompute n because std::vector can reallocate
 *             # its internal buffer
 */
    __pyx_v_root = tree_buffer_root(__pyx_v_self->tree_buffer);

    /* "ckdtree.pyx":1231
 *             # recompute n because std::vector can reallocate
 *             # its internal buffer
 *             n = root + node_index             # <<<<<<<<<<<<<<
 *             # fill in entries
 *             n._less = _less
 */
    __pyx_v_n = (__pyx_v_root + __pyx_v_node_index);

    /* "ckdtree.pyx":1233
 *             n = root + node_index
 *             # fill in entries
 *             n._less = _less             # <<<<<<<<<<<<<<
 *             n._greater = _greater
 *             n.less = root + _less
 */
    __pyx_v_n->_less = __pyx_v__less;

    /* "ckdtree.pyx":1234
 *             # fill in entries
 *             n._less = _less
 *             n._greater = _greater             # <<<<<<<<<<<<<<
 *             n.less = root + _less
 *             n.greater = root + _greater
 */
    __pyx_v_n->_greater = __pyx_v__greater;

    /* "ckdtree.pyx":1235
 *             n._less = _less
 *             n._greater = _greater
 *             n.less = root + _less             # <<<<<<<<<<<<<<
 *             n.greater = root + _greater
 *             n.children = n.less.children + n.greater.children
 */
    __pyx_v_n->less = (__pyx_v_root + __pyx_v__less);

    /* "ckdtree.pyx":1236
 *             n._greater = _greater
 *             n.less = root + _less
 *             n.greater = root + _greater             # <<<<<<<<<<<<<<
 *             n.children = n.less.children + n.greater.children
 *             n.split_dim = d
 */
    __pyx_v_n->greater = (__pyx_v_root + __pyx_v__greater);

    /* "ckdtree.pyx":1237
 *             n.less = root + _less
 *             n.greater = root + _greater
 *             n.children = n.less.children + n.greater.children             # <<<<<<<<<<<<<<
 *             n.split_dim = d
 *             n.split = split
 */
    __pyx_v_n->children = (__pyx_v_n->less->children + __pyx_v_n->greater->children);

    /* "ckdtree.pyx":1238
 *             n.greater = root + _greater
 *             n.children = n.less.children + n.greater.children
 *             n.split_dim = d             # <<<<<<<<<<<<<<
 *             n.split = split
 * 
 */
    __pyx_v_n->split_dim = __pyx_v_d;

    /* "ckdtree.pyx":1239
 *             n.children = n.less.children + n.greater.children
 *             n.split_dim = d
 *             n.split = split             # <<<<<<<<<<<<<<
 * 
 *             return node_index
 */
    __pyx_v_n->split = __pyx_v_split;

    /* "ckdtree.pyx":1241
 *             n.split = split
 * 
 *             return node_index             # <<<<<<<<<<<<<<
 * 
 *     # -----
 */
    __pyx_r = __pyx_v_node_index;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":1101
 * 
 *     @cython.cdivision(True)
 *     cdef np.intp_t __build_compact(cKDTree self, np.intp_t start_idx,             # <<<<<<<<<<<<<<
 *             np.intp_t end_idx, np.float64_t *mins, np.float64_t *maxes,
 *               int _median) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__build_compact", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1248
 * 
 *     @cython.boundscheck(False)
 *     def query(cKDTree self, object x, np.intp_t k=1, np.float64_t eps=0,             # <<<<<<<<<<<<<<
 *               np.float64_t p=2, np.float64_t distance_upper_bound=infinity,
 *               np.intp_t n_jobs=1):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_5query(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7ckdtree_7cKDTree_4query[] = "\n        query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf, n_jobs=1)\n\n        Query the kd-tree for nearest neighbors\n\n        Parameters\n        ----------\n        x : array_like, last dimension self.m\n            An array of points to query.\n        k : integer\n            The number of nearest neighbors to return.\n        eps : non-negative float\n            Return approximate nearest neighbors; the k-th returned value \n            is guaranteed to be no further than (1+eps) times the \n            distance to the real k-th nearest neighbor.\n        p : float, 1<=p<=infinity\n            Which Minkowski p-norm to use. \n            1 is the sum-of-absolute-values \"Manhattan\" distance\n            2 is the usual Euclidean distance\n            infinity is the maximum-coordinate-difference distance\n        distance_upper_bound : nonnegative float\n            Return only neighbors within this distance.  This is used to prune\n            tree searches, so if you are doing a series of nearest-neighbor\n            queries, it may help to supply the distance to the nearest neighbor\n            of the most recent point.\n        n_jobs : int, optional\n            Number of jobs to schedule for parallel processing. If -1 is given\n            all processors are used. Default: 1.\n                        \n        Returns\n        -------\n        d : array of floats\n            The distances to the nearest neighbors. \n            If x has shape tuple+(self.m,), then d has shape tuple+(k,).\n            Missing neighbors are indicated with infinite distances.\n        i : ndarray of ints\n            The locations of the neighbors in self.data.\n            If `x` has shape tuple+(self.m,), then `i` has shape tuple+(k,).\n            Missing neighbors are indicated with self.n.\n\n        ";
static PyObject *__pyx_pw_7ckdtree_7cKDTree_5query(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  __pyx_t_5numpy_intp_t __pyx_v_k;
  __pyx_t_5numpy_float64_t __pyx_v_eps;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  __pyx_t_5numpy_float64_t __pyx_v_distance_upper_bound;
  __pyx_t_5numpy_intp_t __pyx_v_n_jobs;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_k,&__pyx_n_s_eps,&__pyx_n_s_p,&__pyx_n_s_distance_upper_bound,&__pyx_n_s_n_jobs,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_distance_upper_bound);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_jobs);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    if (values[1]) {
      __pyx_v_k = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_k == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_k = ((__pyx_t_5numpy_intp_t)1);
    }
    if (values[2]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_eps == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_eps = ((__pyx_t_5numpy_float64_t)0.0);
    }
    if (values[3]) {
      __pyx_v_p = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_p = ((__pyx_t_5numpy_float64_t)2.0);
    }
    if (values[4]) {
      __pyx_v_distance_upper_bound = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_distance_upper_bound == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_distance_upper_bound = __pyx_k__4;
    }
    if (values[5]) {
      __pyx_v_n_jobs = __Pyx_PyInt_As_Py_intptr_t(values[5]); if (unlikely((__pyx_v_n_jobs == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_n_jobs = ((__pyx_t_5numpy_intp_t)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_4query(((struct ckdtree *)__pyx_v_self), __pyx_v_x, __pyx_v_k, __pyx_v_eps, __pyx_v_p, __pyx_v_distance_upper_bound, __pyx_v_n_jobs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1327
 *             CHUNK = n//n_jobs if n//n_jobs else n
 * 
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):             # <<<<<<<<<<<<<<
 *                 cdef np.intp_t j = _j
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_5query_1_thread_func(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7ckdtree_7cKDTree_5query_1_thread_func = {"_thread_func", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_5query_1_thread_func, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7ckdtree_7cKDTree_5query_1_thread_func(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v__dd = 0;
  PyObject *__pyx_v__ii = 0;
  PyObject *__pyx_v__xx = 0;
  PyObject *__pyx_v__j = 0;
  PyObject *__pyx_v_n = 0;
  PyObject *__pyx_v_CHUNK = 0;
  PyObject *__pyx_v_p = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_eps = 0;
  PyObject *__pyx_v_dub = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_thread_func (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_dd,&__pyx_n_s_ii,&__pyx_n_s_xx,&__pyx_n_s_j,&__pyx_n_s_n,&__pyx_n_s_CHUNK,&__pyx_n_s_p,&__pyx_n_s_k,&__pyx_n_s_eps,&__pyx_n_s_dub,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_CHUNK)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dub)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_thread_func") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_self = values[0];
    __pyx_v__dd = values[1];
    __pyx_v__ii = values[2];
    __pyx_v__xx = values[3];
    __pyx_v__j = values[4];
    __pyx_v_n = values[5];
    __pyx_v_CHUNK = values[6];
    __pyx_v_p = values[7];
    __pyx_v_k = values[8];
    __pyx_v_eps = values[9];
    __pyx_v_dub = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_thread_func", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.query._thread_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_5query__thread_func(__pyx_self, __pyx_v_self, __pyx_v__dd, __pyx_v__ii, __pyx_v__xx, __pyx_v__j, __pyx_v_n, __pyx_v_CHUNK, __pyx_v_p, __pyx_v_k, __pyx_v_eps, __pyx_v_dub);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_5query__thread_func(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v__dd, PyObject *__pyx_v__ii, PyObject *__pyx_v__xx, PyObject *__pyx_v__j, PyObject *__pyx_v_n, PyObject *__pyx_v_CHUNK, PyObject *__pyx_v_p, PyObject *__pyx_v_k, PyObject *__pyx_v_eps, PyObject *__pyx_v_dub) {
  __pyx_t_5numpy_intp_t __pyx_v_j;
  PyArrayObject *__pyx_v_ii = 0;
  PyArrayObject *__pyx_v_dd = 0;
  PyArrayObject *__pyx_v_xx = 0;
  __pyx_t_5numpy_intp_t __pyx_v_start;
  __pyx_t_5numpy_intp_t __pyx_v_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dd;
  __Pyx_Buffer __pyx_pybuffer_dd;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ii;
  __Pyx_Buffer __pyx_pybuffer_ii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_xx;
  __Pyx_Buffer __pyx_pybuffer_xx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_intp_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  __pyx_t_5numpy_intp_t __pyx_t_8;
  long __pyx_t_9;
  __pyx_t_5numpy_intp_t __pyx_t_10;
  __pyx_t_5numpy_float64_t __pyx_t_11;
  __pyx_t_5numpy_float64_t __pyx_t_12;
  __pyx_t_5numpy_float64_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_thread_func", 0);
  __pyx_pybuffer_ii.pybuffer.buf = NULL;
  __pyx_pybuffer_ii.refcount = 0;
  __pyx_pybuffernd_ii.data = NULL;
  __pyx_pybuffernd_ii.rcbuffer = &__pyx_pybuffer_ii;
  __pyx_pybuffer_dd.pybuffer.buf = NULL;
  __pyx_pybuffer_dd.refcount = 0;
  __pyx_pybuffernd_dd.data = NULL;
  __pyx_pybuffernd_dd.rcbuffer = &__pyx_pybuffer_dd;
  __pyx_pybuffer_xx.pybuffer.buf = NULL;
  __pyx_pybuffer_xx.refcount = 0;
  __pyx_pybuffernd_xx.data = NULL;
  __pyx_pybuffernd_xx.rcbuffer = &__pyx_pybuffer_xx;

  /* "ckdtree.pyx":1328
 * 
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):
 *                 cdef np.intp_t j = _j             # <<<<<<<<<<<<<<
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 *                 cdef np.ndarray[np.float64_t,ndim=2] dd = _dd
 */
  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v__j); if (unlikely((__pyx_t_1 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_j = __pyx_t_1;

  /* "ckdtree.pyx":1329
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):
 *                 cdef np.intp_t j = _j
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii             # <<<<<<<<<<<<<<
 *                 cdef np.ndarray[np.float64_t,ndim=2] dd = _dd
 *                 cdef np.ndarray[np.float64_t,ndim=2] xx = _xx
 */
  if (!(likely(((__pyx_v__ii) == Py_None) || likely(__Pyx_TypeTest(__pyx_v__ii, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_v__ii;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ii.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_ii = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_ii.diminfo[0].strides = __pyx_pybuffernd_ii.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ii.diminfo[0].shape = __pyx_pybuffernd_ii.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_ii.diminfo[1].strides = __pyx_pybuffernd_ii.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_ii.diminfo[1].shape = __pyx_pybuffernd_ii.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_ii = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":1330
 *                 cdef np.intp_t j = _j
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 *                 cdef np.ndarray[np.float64_t,ndim=2] dd = _dd             # <<<<<<<<<<<<<<
 *                 cdef np.ndarray[np.float64_t,ndim=2] xx = _xx
 *                 cdef np.intp_t start = j*CHUNK
 */
  if (!(likely(((__pyx_v__dd) == Py_None) || likely(__Pyx_TypeTest(__pyx_v__dd, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_v__dd;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dd.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_dd = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dd.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_dd.diminfo[0].strides = __pyx_pybuffernd_dd.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dd.diminfo[0].shape = __pyx_pybuffernd_dd.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dd.diminfo[1].strides = __pyx_pybuffernd_dd.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dd.diminfo[1].shape = __pyx_pybuffernd_dd.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_dd = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":1331
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 *                 cdef np.ndarray[np.float64_t,ndim=2] dd = _dd
 *                 cdef np.ndarray[np.float64_t,ndim=2] xx = _xx             # <<<<<<<<<<<<<<
 *                 cdef np.intp_t start = j*CHUNK
 *                 cdef np.intp_t stop = start + CHUNK
 */
  if (!(likely(((__pyx_v__xx) == Py_None) || likely(__Pyx_TypeTest(__pyx_v__xx, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_v__xx;
  __Pyx_INCREF(__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_xx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_xx.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_xx.diminfo[0].strides = __pyx_pybuffernd_xx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xx.diminfo[0].shape = __pyx_pybuffernd_xx.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_xx.diminfo[1].strides = __pyx_pybuffernd_xx.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_xx.diminfo[1].shape = __pyx_pybuffernd_xx.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_xx = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ckdtree.pyx":1332
 *                 cdef np.ndarray[np.float64_t,ndim=2] dd = _dd
 *                 cdef np.ndarray[np.float64_t,ndim=2] xx = _xx
 *                 cdef np.intp_t start = j*CHUNK             # <<<<<<<<<<<<<<
 *                 cdef np.intp_t stop = start + CHUNK
 *                 stop = n if stop > n else stop
 */
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_j); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_CHUNK); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_1 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_start = __pyx_t_1;

  /* "ckdtree.pyx":1333
 *                 cdef np.ndarray[np.float64_t,ndim=2] xx = _xx
 *                 cdef np.intp_t start = j*CHUNK
 *                 cdef np.intp_t stop = start + CHUNK             # <<<<<<<<<<<<<<
 *                 stop = n if stop > n else stop
 *                 if start < n:
 */
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_CHUNK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_1 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stop = __pyx_t_1;

  /* "ckdtree.pyx":1334
 *                 cdef np.intp_t start = j*CHUNK
 *                 cdef np.intp_t stop = start + CHUNK
 *                 stop = n if stop > n else stop             # <<<<<<<<<<<<<<
 *                 if start < n:
 *                     query_knn(<ckdtree*>self, &dd[start,0], &ii[start,0],
 */
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_stop); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_n, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_n); if (unlikely((__pyx_t_5 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = __pyx_t_5;
  } else {
    __pyx_t_1 = __pyx_v_stop;
  }
  __pyx_v_stop = __pyx_t_1;

  /* "ckdtree.pyx":1335
 *                 cdef np.intp_t stop = start + CHUNK
 *                 stop = n if stop > n else stop
 *                 if start < n:             # <<<<<<<<<<<<<<
 *                     query_knn(<ckdtree*>self, &dd[start,0], &ii[start,0],
 *                         &xx[start,0], stop-start, k, eps, p, dub)
 */
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_n, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "ckdtree.pyx":1336
 *                 stop = n if stop > n else stop
 *                 if start < n:
 *                     query_knn(<ckdtree*>self, &dd[start,0], &ii[start,0],             # <<<<<<<<<<<<<<
 *                         &xx[start,0], stop-start, k, eps, p, dub)
 * 
 */
    __pyx_t_1 = __pyx_v_start;
    __pyx_t_6 = 0;
    if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_pybuffernd_dd.diminfo[0].shape;
    if (__pyx_t_6 < 0) __pyx_t_6 += __pyx_pybuffernd_dd.diminfo[1].shape;
    __pyx_t_5 = __pyx_v_start;
    __pyx_t_7 = 0;
    if (__pyx_t_5 < 0) __pyx_t_5 += __pyx_pybuffernd_ii.diminfo[0].shape;
    if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_pybuffernd_ii.diminfo[1].shape;

    /* "ckdtree.pyx":1337
 *                 if start < n:
 *                     query_knn(<ckdtree*>self, &dd[start,0], &ii[start,0],
 *                         &xx[start,0], stop-start, k, eps, p, dub)             # <<<<<<<<<<<<<<
 * 
 *             # There might be n_jobs+1 threads spawned here, but only n_jobs of
 */
    __pyx_t_8 = __pyx_v_start;
    __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_pybuffernd_xx.diminfo[0].shape;
    if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_pybuffernd_xx.diminfo[1].shape;
    __pyx_t_10 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_k); if (unlikely((__pyx_t_10 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_eps); if (unlikely((__pyx_t_11 == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_p); if (unlikely((__pyx_t_12 == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_dub); if (unlikely((__pyx_t_13 == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1336
 *                 stop = n if stop > n else stop
 *                 if start < n:
 *                     query_knn(<ckdtree*>self, &dd[start,0], &ii[start,0],             # <<<<<<<<<<<<<<
 *                         &xx[start,0], stop-start, k, eps, p, dub)
 * 
 */
    __pyx_t_2 = query_knn(((struct ckdtree *)__pyx_v_self), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dd.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_dd.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_dd.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_7, __pyx_pybuffernd_ii.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_xx.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_xx.diminfo[0].strides, __pyx_t_9, __pyx_pybuffernd_xx.diminfo[1].strides))), (__pyx_v_stop - __pyx_v_start), __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1327
 *             CHUNK = n//n_jobs if n//n_jobs else n
 * 
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):             # <<<<<<<<<<<<<<
 *                 cdef np.intp_t j = _j
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dd.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ii.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ckdtree.cKDTree.query._thread_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dd.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ii.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ii);
  __Pyx_XDECREF((PyObject *)__pyx_v_dd);
  __Pyx_XDECREF((PyObject *)__pyx_v_xx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1248
 * 
 *     @cython.boundscheck(False)
 *     def query(cKDTree self, object x, np.intp_t k=1, np.float64_t eps=0,             # <<<<<<<<<<<<<<
 *               np.float64_t p=2, np.float64_t distance_upper_bound=infinity,
 *               np.intp_t n_jobs=1):
 */

static PyObject *__pyx_pf_7ckdtree_7cKDTree_4query(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_x, __pyx_t_5numpy_intp_t __pyx_v_k, __pyx_t_5numpy_float64_t __pyx_v_eps, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_distance_upper_bound, __pyx_t_5numpy_intp_t __pyx_v_n_jobs) {
  PyArrayObject *__pyx_v_ii = 0;
  PyArrayObject *__pyx_v_dd = 0;
  PyArrayObject *__pyx_v_xx = 0;
  __pyx_t_5numpy_intp_t __pyx_v_n;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  __pyx_t_5numpy_intp_t __pyx_v_CHUNK;
  PyObject *__pyx_v_x_arr = NULL;
  int __pyx_v_single;
  PyObject *__pyx_v_retshape = NULL;
  PyObject *__pyx_v__thread_func = 0;
  PyObject *__pyx_v_threads = NULL;
  PyObject *__pyx_v_t = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dd;
  __Pyx_Buffer __pyx_pybuffer_dd;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ii;
  __Pyx_Buffer __pyx_pybuffer_ii;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_xx;
  __Pyx_Buffer __pyx_pybuffer_xx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __pyx_t_5numpy_intp_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  PyArrayObject *__pyx_t_17 = NULL;
  long __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  long __pyx_t_30;
  long __pyx_t_31;
  long __pyx_t_32;
  long __pyx_t_33;
  long __pyx_t_34;
  long __pyx_t_35;
  long __pyx_t_36;
  long __pyx_t_37;
  long __pyx_t_38;
  long __pyx_t_39;
  long __pyx_t_40;
  long __pyx_t_41;
  long __pyx_t_42;
  __pyx_t_5numpy_intp_t __pyx_t_43;
  __pyx_t_5numpy_intp_t __pyx_t_44;
  __pyx_t_5numpy_intp_t __pyx_t_45;
  __pyx_t_5numpy_intp_t __pyx_t_46;
  __pyx_t_5numpy_intp_t __pyx_t_47;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("query", 0);
  __pyx_pybuffer_ii.pybuffer.buf = NULL;
  __pyx_pybuffer_ii.refcount = 0;
  __pyx_pybuffernd_ii.data = NULL;
  __pyx_pybuffernd_ii.rcbuffer = &__pyx_pybuffer_ii;
  __pyx_pybuffer_dd.pybuffer.buf = NULL;
  __pyx_pybuffer_dd.refcount = 0;
  __pyx_pybuffernd_dd.data = NULL;
  __pyx_pybuffernd_dd.rcbuffer = &__pyx_pybuffer_dd;
  __pyx_pybuffer_xx.pybuffer.buf = NULL;
  __pyx_pybuffer_xx.refcount = 0;
  __pyx_pybuffernd_xx.data = NULL;
  __pyx_pybuffernd_xx.rcbuffer = &__pyx_pybuffer_xx;

  /* "ckdtree.pyx":1298
 *         cdef np.intp_t c, n, i, j, CHUNK
 * 
 *         x_arr = np.asarray(x, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         if x_arr.ndim == 0 or x_arr.shape[x_arr.ndim - 1] != self.m:
 *             raise ValueError("x must consist of vectors of length %d but "
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_x);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_arr = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":1299
 * 
 *         x_arr = np.asarray(x, dtype=np.float64)
 *         if x_arr.ndim == 0 or x_arr.shape[x_arr.ndim - 1] != self.m:             # <<<<<<<<<<<<<<
 *             raise ValueError("x must consist of vectors of length %d but "
 *                              "has shape %s" % (int(self.m), np.shape(x)))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_x_arr, __pyx_n_s_ndim); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_x_arr, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_x_arr, __pyx_n_s_ndim); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1301
 *         if x_arr.ndim == 0 or x_arr.shape[x_arr.ndim - 1] != self.m:
 *             raise ValueError("x must consist of vectors of length %d but "
 *                              "has shape %s" % (int(self.m), np.shape(x)))             # <<<<<<<<<<<<<<
 *         if p < 1:
 *             raise ValueError("Only p-norms with 1<=p<=infinity permitted")
 */
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_x);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_x_must_consist_of_vectors_of_len, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ckdtree.pyx":1300
 *         x_arr = np.asarray(x, dtype=np.float64)
 *         if x_arr.ndim == 0 or x_arr.shape[x_arr.ndim - 1] != self.m:
 *             raise ValueError("x must consist of vectors of length %d but "             # <<<<<<<<<<<<<<
 *                              "has shape %s" % (int(self.m), np.shape(x)))
 *         if p < 1:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":1302
 *             raise ValueError("x must consist of vectors of length %d but "
 *                              "has shape %s" % (int(self.m), np.shape(x)))
 *         if p < 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Only p-norms with 1<=p<=infinity permitted")
 *         if x_arr.ndim == 1:
 */
  __pyx_t_6 = ((__pyx_v_p < 1.0) != 0);
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1303
 *                              "has shape %s" % (int(self.m), np.shape(x)))
 *         if p < 1:
 *             raise ValueError("Only p-norms with 1<=p<=infinity permitted")             # <<<<<<<<<<<<<<
 *         if x_arr.ndim == 1:
 *             single = True
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":1304
 *         if p < 1:
 *             raise ValueError("Only p-norms with 1<=p<=infinity permitted")
 *         if x_arr.ndim == 1:             # <<<<<<<<<<<<<<
 *             single = True
 *             x_arr = x_arr[np.newaxis,:]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x_arr, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1305
 *             raise ValueError("Only p-norms with 1<=p<=infinity permitted")
 *         if x_arr.ndim == 1:
 *             single = True             # <<<<<<<<<<<<<<
 *             x_arr = x_arr[np.newaxis,:]
 *         else:
 */
    __pyx_v_single = 1;

    /* "ckdtree.pyx":1306
 *         if x_arr.ndim == 1:
 *             single = True
 *             x_arr = x_arr[np.newaxis,:]             # <<<<<<<<<<<<<<
 *         else:
 *             single = False
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_newaxis); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_slice__6);
    __Pyx_GIVEREF(__pyx_slice__6);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_slice__6);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_x_arr, __pyx_t_2); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_x_arr, __pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L7;
  }
  /*else*/ {

    /* "ckdtree.pyx":1308
 *             x_arr = x_arr[np.newaxis,:]
 *         else:
 *             single = False             # <<<<<<<<<<<<<<
 *         retshape = np.shape(x)[:-1]
 *         n = <np.intp_t> np.prod(retshape)
 */
    __pyx_v_single = 0;
  }
  __pyx_L7:;

  /* "ckdtree.pyx":1309
 *         else:
 *             single = False
 *         retshape = np.shape(x)[:-1]             # <<<<<<<<<<<<<<
 *         n = <np.intp_t> np.prod(retshape)
 *         xx = np.ascontiguousarray(x_arr).reshape(n, self.m)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_x);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, -1, NULL, NULL, &__pyx_slice__7, 0, 1, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_retshape = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ckdtree.pyx":1310
 *             single = False
 *         retshape = np.shape(x)[:-1]
 *         n = <np.intp_t> np.prod(retshape)             # <<<<<<<<<<<<<<
 *         xx = np.ascontiguousarray(x_arr).reshape(n, self.m)
 *         dd = np.empty((n,k),dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_prod); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_retshape); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_retshape);
    __Pyx_GIVEREF(__pyx_v_retshape);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_retshape);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n = ((__pyx_t_5numpy_intp_t)__pyx_t_8);

  /* "ckdtree.pyx":1311
 *         retshape = np.shape(x)[:-1]
 *         n = <np.intp_t> np.prod(retshape)
 *         xx = np.ascontiguousarray(x_arr).reshape(n, self.m)             # <<<<<<<<<<<<<<
 *         dd = np.empty((n,k),dtype=np.float64)
 *         dd.fill(infinity)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_x_arr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_v_x_arr);
    __Pyx_GIVEREF(__pyx_v_x_arr);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_x_arr);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_reshape); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_2) {
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
    __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_12 < 0)) {
      PyErr_Fetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)__pyx_v_xx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_15);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
    }
    __pyx_pybuffernd_xx.diminfo[0].strides = __pyx_pybuffernd_xx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xx.diminfo[0].shape = __pyx_pybuffernd_xx.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_xx.diminfo[1].strides = __pyx_pybuffernd_xx.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_xx.diminfo[1].shape = __pyx_pybuffernd_xx.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_11 = 0;
  __pyx_v_xx = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ckdtree.pyx":1312
 *         n = <np.intp_t> np.prod(retshape)
 *         xx = np.ascontiguousarray(x_arr).reshape(n, self.m)
 *         dd = np.empty((n,k),dtype=np.float64)             # <<<<<<<<<<<<<<
 *         dd.fill(infinity)
 *         ii = np.empty((n,k),dtype=np.intp)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_10);
  __pyx_t_3 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dd.rcbuffer->pybuffer);
    __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dd.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_12 < 0)) {
      PyErr_Fetch(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dd.rcbuffer->pybuffer, (PyObject*)__pyx_v_dd, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_15, __pyx_t_14, __pyx_t_13);
      }
    }
    __pyx_pybuffernd_dd.diminfo[0].strides = __pyx_pybuffernd_dd.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dd.diminfo[0].shape = __pyx_pybuffernd_dd.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dd.diminfo[1].strides = __pyx_pybuffernd_dd.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dd.diminfo[1].shape = __pyx_pybuffernd_dd.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_16 = 0;
  __pyx_v_dd = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ckdtree.pyx":1313
 *         xx = np.ascontiguousarray(x_arr).reshape(n, self.m)
 *         dd = np.empty((n,k),dtype=np.float64)
 *         dd.fill(infinity)             # <<<<<<<<<<<<<<
 *         ii = np.empty((n,k),dtype=np.intp)
 *         ii.fill(self.n)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_dd), __pyx_n_s_fill); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = PyFloat_FromDouble(infinity); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ckdtree.pyx":1314
 *         dd = np.empty((n,k),dtype=np.float64)
 *         dd.fill(infinity)
 *         ii = np.empty((n,k),dtype=np.intp)             # <<<<<<<<<<<<<<
 *         ii.fill(self.n)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ii.rcbuffer->pybuffer);
    __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ii.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_12 < 0)) {
      PyErr_Fetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ii.rcbuffer->pybuffer, (PyObject*)__pyx_v_ii, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_15);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
    }
    __pyx_pybuffernd_ii.diminfo[0].strides = __pyx_pybuffernd_ii.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ii.diminfo[0].shape = __pyx_pybuffernd_ii.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_ii.diminfo[1].strides = __pyx_pybuffernd_ii.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_ii.diminfo[1].shape = __pyx_pybuffernd_ii.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_17 = 0;
  __pyx_v_ii = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ckdtree.pyx":1315
 *         dd.fill(infinity)
 *         ii = np.empty((n,k),dtype=np.intp)
 *         ii.fill(self.n)             # <<<<<<<<<<<<<<
 * 
 *         # Do the query in an external C++ function.
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ii), __pyx_n_s_fill); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":1320
 *         # The GIL will be released in the external query function.
 * 
 *         if (n_jobs == -1):             # <<<<<<<<<<<<<<
 *             n_jobs = number_of_processors
 * 
 */
  __pyx_t_6 = ((__pyx_v_n_jobs == -1) != 0);
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1321
 * 
 *         if (n_jobs == -1):
 *             n_jobs = number_of_processors             # <<<<<<<<<<<<<<
 * 
 *         if n_jobs > 1:
 */
    __pyx_v_n_jobs = number_of_processors;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "ckdtree.pyx":1323
 *             n_jobs = number_of_processors
 * 
 *         if n_jobs > 1:             # <<<<<<<<<<<<<<
 *             # static scheduling without load balancing is good enough
 *             CHUNK = n//n_jobs if n//n_jobs else n
 */
  __pyx_t_6 = ((__pyx_v_n_jobs > 1) != 0);
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1325
 *         if n_jobs > 1:
 *             # static scheduling without load balancing is good enough
 *             CHUNK = n//n_jobs if n//n_jobs else n             # <<<<<<<<<<<<<<
 * 
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):
 */
    if (unlikely(__pyx_v_n_jobs == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(int) == sizeof(long) && (!(((__pyx_t_5numpy_intp_t)-1) > 0)) && unlikely(__pyx_v_n_jobs == (__pyx_t_5numpy_intp_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_n))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if ((__Pyx_div_int(__pyx_v_n, __pyx_v_n_jobs) != 0)) {
      if (unlikely(__pyx_v_n_jobs == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(int) == sizeof(long) && (!(((__pyx_t_5numpy_intp_t)-1) > 0)) && unlikely(__pyx_v_n_jobs == (__pyx_t_5numpy_intp_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_n))) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_8 = __Pyx_div_int(__pyx_v_n, __pyx_v_n_jobs);
    } else {
      __pyx_t_8 = __pyx_v_n;
    }
    __pyx_v_CHUNK = __pyx_t_8;

    /* "ckdtree.pyx":1327
 *             CHUNK = n//n_jobs if n//n_jobs else n
 * 
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):             # <<<<<<<<<<<<<<
 *                 cdef np.intp_t j = _j
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 */
    __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7ckdtree_7cKDTree_5query_1_thread_func, 0, __pyx_n_s_query_locals__thread_func, NULL, __pyx_n_s_ckdtree, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v__thread_func = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ckdtree.pyx":1341
 *             # There might be n_jobs+1 threads spawned here, but only n_jobs of
 *             # them will do significant work.
 *             threads = [threading.Thread(target=_thread_func,             # <<<<<<<<<<<<<<
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,
 *                                               k, eps, distance_upper_bound))
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "ckdtree.pyx":1344
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,
 *                                               k, eps, distance_upper_bound))
 *                              for j in range(1+(n//CHUNK))]             # <<<<<<<<<<<<<<
 *             # Set the daemon flag so the process can be aborted,
 *             # start all threads and wait for completion.
 */
    if (unlikely(__pyx_v_CHUNK == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(int) == sizeof(long) && (!(((__pyx_t_5numpy_intp_t)-1) > 0)) && unlikely(__pyx_v_CHUNK == (__pyx_t_5numpy_intp_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_n))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_18 = (1 + __Pyx_div_int(__pyx_v_n, __pyx_v_CHUNK));
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_18; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "ckdtree.pyx":1341
 *             # There might be n_jobs+1 threads spawned here, but only n_jobs of
 *             # them will do significant work.
 *             threads = [threading.Thread(target=_thread_func,             # <<<<<<<<<<<<<<
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,
 *                                               k, eps, distance_upper_bound))
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_threading); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_Thread); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_target, __pyx_v__thread_func) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1342
 *             # them will do significant work.
 *             threads = [threading.Thread(target=_thread_func,
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,             # <<<<<<<<<<<<<<
 *                                               k, eps, distance_upper_bound))
 *                              for j in range(1+(n//CHUNK))]
 */
      __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_j); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_CHUNK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_19 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_19);

      /* "ckdtree.pyx":1343
 *             threads = [threading.Thread(target=_thread_func,
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,
 *                                               k, eps, distance_upper_bound))             # <<<<<<<<<<<<<<
 *                              for j in range(1+(n//CHUNK))]
 *             # Set the daemon flag so the process can be aborted,
 */
      __pyx_t_20 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_21 = PyFloat_FromDouble(__pyx_v_eps); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_22 = PyFloat_FromDouble(__pyx_v_distance_upper_bound); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_22);

      /* "ckdtree.pyx":1342
 *             # them will do significant work.
 *             threads = [threading.Thread(target=_thread_func,
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,             # <<<<<<<<<<<<<<
 *                                               k, eps, distance_upper_bound))
 *                              for j in range(1+(n//CHUNK))]
 */
      __pyx_t_23 = PyTuple_New(11); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_23, 0, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(((PyObject *)__pyx_v_dd));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_dd));
      PyTuple_SET_ITEM(__pyx_t_23, 1, ((PyObject *)__pyx_v_dd));
      __Pyx_INCREF(((PyObject *)__pyx_v_ii));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_ii));
      PyTuple_SET_ITEM(__pyx_t_23, 2, ((PyObject *)__pyx_v_ii));
      __Pyx_INCREF(((PyObject *)__pyx_v_xx));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_xx));
      PyTuple_SET_ITEM(__pyx_t_23, 3, ((PyObject *)__pyx_v_xx));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_23, 4, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_23, 5, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_23, 6, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_23, 7, __pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_23, 8, __pyx_t_20);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_23, 9, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_22);
      PyTuple_SET_ITEM(__pyx_t_23, 10, __pyx_t_22);
      __pyx_t_3 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = 0;
      __pyx_t_19 = 0;
      __pyx_t_20 = 0;
      __pyx_t_21 = 0;
      __pyx_t_22 = 0;
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_args, __pyx_t_23) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

      /* "ckdtree.pyx":1341
 *             # There might be n_jobs+1 threads spawned here, but only n_jobs of
 *             # them will do significant work.
 *             threads = [threading.Thread(target=_thread_func,             # <<<<<<<<<<<<<<
 *                                         args=(self, dd, ii, xx, j, n, CHUNK, p,
 *                                               k, eps, distance_upper_bound))
 */
      __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_10); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_23))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    }
    __pyx_v_threads = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ckdtree.pyx":1347
 *             # Set the daemon flag so the process can be aborted,
 *             # start all threads and wait for completion.
 *             for t in threads:             # <<<<<<<<<<<<<<
 *                 t.daemon = True
 *                 t.start()
 */
    __pyx_t_1 = __pyx_v_threads; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_23 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_23); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_23 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_23);
      __pyx_t_23 = 0;

      /* "ckdtree.pyx":1348
 *             # start all threads and wait for completion.
 *             for t in threads:
 *                 t.daemon = True             # <<<<<<<<<<<<<<
 *                 t.start()
 *             for t in threads:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_t, __pyx_n_s_daemon, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1349
 *             for t in threads:
 *                 t.daemon = True
 *                 t.start()             # <<<<<<<<<<<<<<
 *             for t in threads:
 *                 t.join()
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_n_s_start); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_23 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

      /* "ckdtree.pyx":1347
 *             # Set the daemon flag so the process can be aborted,
 *             # start all threads and wait for completion.
 *             for t in threads:             # <<<<<<<<<<<<<<
 *                 t.daemon = True
 *                 t.start()
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ckdtree.pyx":1350
 *                 t.daemon = True
 *                 t.start()
 *             for t in threads:             # <<<<<<<<<<<<<<
 *                 t.join()
 *         else:
 */
    __pyx_t_1 = __pyx_v_threads; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_23 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_23); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_23 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_23);
      __pyx_t_23 = 0;

      /* "ckdtree.pyx":1351
 *                 t.start()
 *             for t in threads:
 *                 t.join()             # <<<<<<<<<<<<<<
 *         else:
 *             query_knn(<ckdtree*>self, &dd[0,0], &ii[0,0], &xx[0,0],
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_n_s_join); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_23 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

      /* "ckdtree.pyx":1350
 *                 t.daemon = True
 *                 t.start()
 *             for t in threads:             # <<<<<<<<<<<<<<
 *                 t.join()
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L9;
  }
  /*else*/ {

    /* "ckdtree.pyx":1353
 *                 t.join()
 *         else:
 *             query_knn(<ckdtree*>self, &dd[0,0], &ii[0,0], &xx[0,0],             # <<<<<<<<<<<<<<
 *                 n, k, eps, p, distance_upper_bound)
 * 
 */
    __pyx_t_18 = 0;
    __pyx_t_24 = 0;
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_pybuffernd_dd.diminfo[0].shape;
    if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_pybuffernd_dd.diminfo[1].shape;
    __pyx_t_25 = 0;
    __pyx_t_26 = 0;
    if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_pybuffernd_ii.diminfo[0].shape;
    if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_pybuffernd_ii.diminfo[1].shape;
    __pyx_t_27 = 0;
    __pyx_t_28 = 0;
    if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_pybuffernd_xx.diminfo[0].shape;
    if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_pybuffernd_xx.diminfo[1].shape;

    /* "ckdtree.pyx":1354
 *         else:
 *             query_knn(<ckdtree*>self, &dd[0,0], &ii[0,0], &xx[0,0],
 *                 n, k, eps, p, distance_upper_bound)             # <<<<<<<<<<<<<<
 * 
 *         if single:
 */
    __pyx_t_1 = query_knn(((struct ckdtree *)__pyx_v_self), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dd.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_dd.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_dd.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_ii.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_xx.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_xx.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_xx.diminfo[1].strides))), __pyx_v_n, __pyx_v_k, __pyx_v_eps, __pyx_v_p, __pyx_v_distance_upper_bound); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L9:;

  /* "ckdtree.pyx":1356
 *                 n, k, eps, p, distance_upper_bound)
 * 
 *         if single:             # <<<<<<<<<<<<<<
 *             if k == 1:
 *                 if sizeof(long) < sizeof(np.intp_t):
 */
  __pyx_t_6 = (__pyx_v_single != 0);
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1357
 * 
 *         if single:
 *             if k == 1:             # <<<<<<<<<<<<<<
 *                 if sizeof(long) < sizeof(np.intp_t):
 *                     # ... e.g. Windows 64
 */
    __pyx_t_6 = ((__pyx_v_k == 1) != 0);
    if (__pyx_t_6) {

      /* "ckdtree.pyx":1358
 *         if single:
 *             if k == 1:
 *                 if sizeof(long) < sizeof(np.intp_t):             # <<<<<<<<<<<<<<
 *                     # ... e.g. Windows 64
 *                     if ii[0,0] <= <np.intp_t>LONG_MAX:
 */
      __pyx_t_6 = (((sizeof(long)) < (sizeof(__pyx_t_5numpy_intp_t))) != 0);
      if (__pyx_t_6) {

        /* "ckdtree.pyx":1360
 *                 if sizeof(long) < sizeof(np.intp_t):
 *                     # ... e.g. Windows 64
 *                     if ii[0,0] <= <np.intp_t>LONG_MAX:             # <<<<<<<<<<<<<<
 *                         return dd[0,0], int(ii[0,0])
 *                     else:
 */
        __pyx_t_29 = 0;
        __pyx_t_30 = 0;
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_pybuffernd_ii.diminfo[0].shape;
        if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_pybuffernd_ii.diminfo[1].shape;
        __pyx_t_6 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_ii.diminfo[1].strides)) <= ((__pyx_t_5numpy_intp_t)LONG_MAX)) != 0);
        if (__pyx_t_6) {

          /* "ckdtree.pyx":1361
 *                     # ... e.g. Windows 64
 *                     if ii[0,0] <= <np.intp_t>LONG_MAX:
 *                         return dd[0,0], int(ii[0,0])             # <<<<<<<<<<<<<<
 *                     else:
 *                         return dd[0,0], ii[0,0]
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_31 = 0;
          __pyx_t_32 = 0;
          if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_pybuffernd_dd.diminfo[0].shape;
          if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_pybuffernd_dd.diminfo[1].shape;
          __pyx_t_1 = PyFloat_FromDouble((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dd.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_dd.diminfo[0].strides, __pyx_t_32, __pyx_pybuffernd_dd.diminfo[1].strides))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_33 = 0;
          __pyx_t_34 = 0;
          if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_pybuffernd_ii.diminfo[0].shape;
          if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_pybuffernd_ii.diminfo[1].shape;
          __pyx_t_23 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_34, __pyx_pybuffernd_ii.diminfo[1].strides))); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_23);
          __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_23);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_23);
          __pyx_t_23 = 0;
          __pyx_t_23 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_10, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_23);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_23);
          __pyx_t_1 = 0;
          __pyx_t_23 = 0;
          __pyx_r = __pyx_t_10;
          __pyx_t_10 = 0;
          goto __pyx_L0;
        }
        /*else*/ {

          /* "ckdtree.pyx":1363
 *                         return dd[0,0], int(ii[0,0])
 *                     else:
 *                         return dd[0,0], ii[0,0]             # <<<<<<<<<<<<<<
 *                 else:
 *                     # ... most other platforms
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_35 = 0;
          __pyx_t_36 = 0;
          if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_pybuffernd_dd.diminfo[0].shape;
          if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_pybuffernd_dd.diminfo[1].shape;
          __pyx_t_10 = PyFloat_FromDouble((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dd.rcbuffer->pybuffer.buf, __pyx_t_35, __pyx_pybuffernd_dd.diminfo[0].strides, __pyx_t_36, __pyx_pybuffernd_dd.diminfo[1].strides))); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_37 = 0;
          __pyx_t_38 = 0;
          if (__pyx_t_37 < 0) __pyx_t_37 += __pyx_pybuffernd_ii.diminfo[0].shape;
          if (__pyx_t_38 < 0) __pyx_t_38 += __pyx_pybuffernd_ii.diminfo[1].shape;
          __pyx_t_23 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_38, __pyx_pybuffernd_ii.diminfo[1].strides))); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_23);
          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_23);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_23);
          __pyx_t_10 = 0;
          __pyx_t_23 = 0;
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;
        }
      }
      /*else*/ {

        /* "ckdtree.pyx":1366
 *                 else:
 *                     # ... most other platforms
 *                     return dd[0,0], ii[0,0]             # <<<<<<<<<<<<<<
 *             else:
 *                 return dd[0], ii[0]
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_39 = 0;
        __pyx_t_40 = 0;
        if (__pyx_t_39 < 0) __pyx_t_39 += __pyx_pybuffernd_dd.diminfo[0].shape;
        if (__pyx_t_40 < 0) __pyx_t_40 += __pyx_pybuffernd_dd.diminfo[1].shape;
        __pyx_t_1 = PyFloat_FromDouble((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_dd.rcbuffer->pybuffer.buf, __pyx_t_39, __pyx_pybuffernd_dd.diminfo[0].strides, __pyx_t_40, __pyx_pybuffernd_dd.diminfo[1].strides))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_41 = 0;
        __pyx_t_42 = 0;
        if (__pyx_t_41 < 0) __pyx_t_41 += __pyx_pybuffernd_ii.diminfo[0].shape;
        if (__pyx_t_42 < 0) __pyx_t_42 += __pyx_pybuffernd_ii.diminfo[1].shape;
        __pyx_t_23 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_41, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_42, __pyx_pybuffernd_ii.diminfo[1].strides))); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_23);
        __pyx_t_1 = 0;
        __pyx_t_23 = 0;
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L0;
      }
    }
    /*else*/ {

      /* "ckdtree.pyx":1368
 *                     return dd[0,0], ii[0,0]
 *             else:
 *                 return dd[0], ii[0]             # <<<<<<<<<<<<<<
 *         else:
 *             if sizeof(long) < sizeof(np.intp_t):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_dd), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_23 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ii), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_23 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_23);
      __pyx_t_10 = 0;
      __pyx_t_23 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "ckdtree.pyx":1370
 *                 return dd[0], ii[0]
 *         else:
 *             if sizeof(long) < sizeof(np.intp_t):             # <<<<<<<<<<<<<<
 *                 # ... e.g. Windows 64
 *                 for i in range(n):
 */
    __pyx_t_6 = (((sizeof(long)) < (sizeof(__pyx_t_5numpy_intp_t))) != 0);
    if (__pyx_t_6) {

      /* "ckdtree.pyx":1372
 *             if sizeof(long) < sizeof(np.intp_t):
 *                 # ... e.g. Windows 64
 *                 for i in range(n):             # <<<<<<<<<<<<<<
 *                     for j in range(k):
 *                         if ii[i,j] > <np.intp_t>LONG_MAX:
 */
      __pyx_t_8 = __pyx_v_n;
      for (__pyx_t_43 = 0; __pyx_t_43 < __pyx_t_8; __pyx_t_43+=1) {
        __pyx_v_i = __pyx_t_43;

        /* "ckdtree.pyx":1373
 *                 # ... e.g. Windows 64
 *                 for i in range(n):
 *                     for j in range(k):             # <<<<<<<<<<<<<<
 *                         if ii[i,j] > <np.intp_t>LONG_MAX:
 *                             # C long overlow, return array of dtype=np.int_p
 */
        __pyx_t_44 = __pyx_v_k;
        for (__pyx_t_45 = 0; __pyx_t_45 < __pyx_t_44; __pyx_t_45+=1) {
          __pyx_v_j = __pyx_t_45;

          /* "ckdtree.pyx":1374
 *                 for i in range(n):
 *                     for j in range(k):
 *                         if ii[i,j] > <np.intp_t>LONG_MAX:             # <<<<<<<<<<<<<<
 *                             # C long overlow, return array of dtype=np.int_p
 *                             if k==1:
 */
          __pyx_t_46 = __pyx_v_i;
          __pyx_t_47 = __pyx_v_j;
          if (__pyx_t_46 < 0) __pyx_t_46 += __pyx_pybuffernd_ii.diminfo[0].shape;
          if (__pyx_t_47 < 0) __pyx_t_47 += __pyx_pybuffernd_ii.diminfo[1].shape;
          __pyx_t_6 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_ii.rcbuffer->pybuffer.buf, __pyx_t_46, __pyx_pybuffernd_ii.diminfo[0].strides, __pyx_t_47, __pyx_pybuffernd_ii.diminfo[1].strides)) > ((__pyx_t_5numpy_intp_t)LONG_MAX)) != 0);
          if (__pyx_t_6) {

            /* "ckdtree.pyx":1376
 *                         if ii[i,j] > <np.intp_t>LONG_MAX:
 *                             # C long overlow, return array of dtype=np.int_p
 *                             if k==1:             # <<<<<<<<<<<<<<
 *                                 return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)
 *                             else:
 */
            __pyx_t_6 = ((__pyx_v_k == 1) != 0);
            if (__pyx_t_6) {

              /* "ckdtree.pyx":1377
 *                             # C long overlow, return array of dtype=np.int_p
 *                             if k==1:
 *                                 return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,))
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_23);
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_reshape); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __pyx_t_23 = PyObject_GetItem(((PyObject *)__pyx_v_dd), __pyx_tuple__10); if (unlikely(__pyx_t_23 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
              __Pyx_GOTREF(__pyx_t_23);
              __pyx_t_4 = NULL;
              __pyx_t_9 = 0;
              if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_9 = 1;
                }
              }
              __pyx_t_22 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_22);
              if (__pyx_t_4) {
                __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_4); __pyx_t_4 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_23);
              PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_9, __pyx_t_23);
              __Pyx_INCREF(__pyx_v_retshape);
              __Pyx_GIVEREF(__pyx_v_retshape);
              PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_9, __pyx_v_retshape);
              __pyx_t_23 = 0;
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_22, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_22 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_22);
              __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_reshape); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_23);
              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
              __pyx_t_22 = PyObject_GetItem(((PyObject *)__pyx_v_ii), __pyx_tuple__11); if (unlikely(__pyx_t_22 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
              __Pyx_GOTREF(__pyx_t_22);
              __pyx_t_4 = NULL;
              __pyx_t_9 = 0;
              if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_23))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_23);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_23, function);
                  __pyx_t_9 = 1;
                }
              }
              __pyx_t_21 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_21);
              if (__pyx_t_4) {
                __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_4); __pyx_t_4 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_22);
              PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_9, __pyx_t_22);
              __Pyx_INCREF(__pyx_v_retshape);
              __Pyx_GIVEREF(__pyx_v_retshape);
              PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_9, __pyx_v_retshape);
              __pyx_t_22 = 0;
              __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_21, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_23);
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_10);
              __pyx_t_1 = 0;
              __pyx_t_10 = 0;
              __pyx_r = __pyx_t_23;
              __pyx_t_23 = 0;
              goto __pyx_L0;
            }
            /*else*/ {

              /* "ckdtree.pyx":1379
 *                                 return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)
 *                             else:
 *                                 return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,))             # <<<<<<<<<<<<<<
 * 
 *                 # no C long overlow, return array of dtype=int
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_reshape); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_10);
              __pyx_t_10 = 0;
              __pyx_t_10 = PyNumber_Add(__pyx_v_retshape, __pyx_t_21); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __pyx_t_21 = NULL;
              __pyx_t_9 = 0;
              if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_21)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_21);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                  __pyx_t_9 = 1;
                }
              }
              __pyx_t_22 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_22);
              if (__pyx_t_21) {
                __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_21); __pyx_t_21 = NULL;
              }
              __Pyx_INCREF(((PyObject *)__pyx_v_dd));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_dd));
              PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_9, ((PyObject *)__pyx_v_dd));
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_9, __pyx_t_10);
              __pyx_t_10 = 0;
              __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_22, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_23);
              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_22 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_22);
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_reshape); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
              __pyx_t_22 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_22);
              __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_GIVEREF(__pyx_t_22);
              PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_22);
              __pyx_t_22 = 0;
              __pyx_t_22 = PyNumber_Add(__pyx_v_retshape, __pyx_t_21); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_22);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __pyx_t_21 = NULL;
              __pyx_t_9 = 0;
              if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
                __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_10);
                if (likely(__pyx_t_21)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                  __Pyx_INCREF(__pyx_t_21);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_10, function);
                  __pyx_t_9 = 1;
                }
              }
              __pyx_t_4 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_4);
              if (__pyx_t_21) {
                __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_21); __pyx_t_21 = NULL;
              }
              __Pyx_INCREF(((PyObject *)__pyx_v_ii));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_ii));
              PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_9, ((PyObject *)__pyx_v_ii));
              __Pyx_GIVEREF(__pyx_t_22);
              PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_9, __pyx_t_22);
              __pyx_t_22 = 0;
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_23);
              PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_23);
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
              __pyx_t_23 = 0;
              __pyx_t_1 = 0;
              __pyx_r = __pyx_t_10;
              __pyx_t_10 = 0;
              goto __pyx_L0;
            }
          }
        }
      }

      /* "ckdtree.pyx":1382
 * 
 *                 # no C long overlow, return array of dtype=int
 *                 if k==1:             # <<<<<<<<<<<<<<
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape).astype(int)
 *                 else:
 */
      __pyx_t_6 = ((__pyx_v_k == 1) != 0);
      if (__pyx_t_6) {

        /* "ckdtree.pyx":1383
 *                 # no C long overlow, return array of dtype=int
 *                 if k==1:
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape).astype(int)             # <<<<<<<<<<<<<<
 *                 else:
 *                     return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,)).astype(int)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_reshape); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_dd), __pyx_tuple__12); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_23))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_23);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_23, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_22 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_9, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_retshape);
        __Pyx_GIVEREF(__pyx_v_retshape);
        PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_9, __pyx_v_retshape);
        __pyx_t_1 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_22, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_ii), __pyx_tuple__13); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_21 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_20 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        if (__pyx_t_21) {
          __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_21); __pyx_t_21 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_9, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_retshape);
        __Pyx_GIVEREF(__pyx_v_retshape);
        PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_9, __pyx_v_retshape);
        __pyx_t_1 = 0;
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_20, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_astype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __pyx_t_22 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_22)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_22);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_22) {
          __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)((PyObject*)(&PyInt_Type)))); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_23);
        } else {
          __pyx_t_20 = PyTuple_New(1+1); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_22); __pyx_t_22 = NULL;
          __Pyx_INCREF(((PyObject *)((PyObject*)(&PyInt_Type))));
          __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyInt_Type))));
          PyTuple_SET_ITEM(__pyx_t_20, 0+1, ((PyObject *)((PyObject*)(&PyInt_Type))));
          __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_20, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_23);
        __pyx_t_10 = 0;
        __pyx_t_23 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        goto __pyx_L0;
      }
      /*else*/ {

        /* "ckdtree.pyx":1385
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape).astype(int)
 *                 else:
 *                     return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,)).astype(int)             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_reshape); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __pyx_t_23 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_20 = PyTuple_New(1); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_23);
        __pyx_t_23 = 0;
        __pyx_t_23 = PyNumber_Add(__pyx_v_retshape, __pyx_t_20); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_20)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_22 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        if (__pyx_t_20) {
          __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_20); __pyx_t_20 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_dd));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_dd));
        PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_9, ((PyObject *)__pyx_v_dd));
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_9, __pyx_t_23);
        __pyx_t_23 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_22, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_reshape); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __pyx_t_23 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_23);
        __pyx_t_23 = 0;
        __pyx_t_23 = PyNumber_Add(__pyx_v_retshape, __pyx_t_1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_21 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_21);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_ii));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_ii));
        PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_9, ((PyObject *)__pyx_v_ii));
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_9, __pyx_t_23);
        __pyx_t_23 = 0;
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_21, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_astype); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __pyx_t_22 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_22)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_22);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
          }
        }
        if (!__pyx_t_22) {
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_20, ((PyObject *)((PyObject*)(&PyInt_Type)))); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
        } else {
          __pyx_t_21 = PyTuple_New(1+1); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_22); __pyx_t_22 = NULL;
          __Pyx_INCREF(((PyObject *)((PyObject*)(&PyInt_Type))));
          __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyInt_Type))));
          PyTuple_SET_ITEM(__pyx_t_21, 0+1, ((PyObject *)((PyObject*)(&PyInt_Type))));
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_21, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        }
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_10);
        __pyx_t_4 = 0;
        __pyx_t_10 = 0;
        __pyx_r = __pyx_t_20;
        __pyx_t_20 = 0;
        goto __pyx_L0;
      }
    }
    /*else*/ {

      /* "ckdtree.pyx":1389
 *             else:
 *                 # ... most other platforms
 *                 if k==1:             # <<<<<<<<<<<<<<
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)
 *                 else:
 */
      __pyx_t_6 = ((__pyx_v_k == 1) != 0);
      if (__pyx_t_6) {

        /* "ckdtree.pyx":1390
 *                 # ... most other platforms
 *                 if k==1:
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)             # <<<<<<<<<<<<<<
 *                 else:
 *                     return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,))
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyObject_GetItem(((PyObject *)__pyx_v_dd), __pyx_tuple__14); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_21 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_22 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        if (__pyx_t_21) {
          __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_21); __pyx_t_21 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_9, __pyx_t_10);
        __Pyx_INCREF(__pyx_v_retshape);
        __Pyx_GIVEREF(__pyx_v_retshape);
        PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_9, __pyx_v_retshape);
        __pyx_t_10 = 0;
        __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_22, NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_22 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_reshape); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __pyx_t_22 = PyObject_GetItem(((PyObject *)__pyx_v_ii), __pyx_tuple__15); if (unlikely(__pyx_t_22 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_21 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_23 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        if (__pyx_t_21) {
          __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_21); __pyx_t_21 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_22);
        PyTuple_SET_ITEM(__pyx_t_23, 0+__pyx_t_9, __pyx_t_22);
        __Pyx_INCREF(__pyx_v_retshape);
        __Pyx_GIVEREF(__pyx_v_retshape);
        PyTuple_SET_ITEM(__pyx_t_23, 1+__pyx_t_9, __pyx_v_retshape);
        __pyx_t_22 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_23, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
        __pyx_t_20 = 0;
        __pyx_t_4 = 0;
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L0;
      }
      /*else*/ {

        /* "ckdtree.pyx":1392
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)
 *                 else:
 *                     return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,))             # <<<<<<<<<<<<<<
 * 
 *     # ----------------
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_reshape); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_23 = PyTuple_New(1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Add(__pyx_v_retshape, __pyx_t_23); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __pyx_t_23 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_23)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_23);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_22 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        if (__pyx_t_23) {
          __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_23); __pyx_t_23 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_dd));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_dd));
        PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_9, ((PyObject *)__pyx_v_dd));
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_9, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_22, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_22 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __pyx_t_22 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_k); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_23 = PyTuple_New(1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_GIVEREF(__pyx_t_22);
        PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_22);
        __pyx_t_22 = 0;
        __pyx_t_22 = PyNumber_Add(__pyx_v_retshape, __pyx_t_23); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __pyx_t_23 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_23)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_23);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_9 = 1;
          }
        }
        __pyx_t_21 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_21);
        if (__pyx_t_23) {
          __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_23); __pyx_t_23 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_ii));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_ii));
        PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_9, ((PyObject *)__pyx_v_ii));
        __Pyx_GIVEREF(__pyx_t_22);
        PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_9, __pyx_t_22);
        __pyx_t_22 = 0;
        __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_21, NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_20);
        __pyx_t_10 = 0;
        __pyx_t_20 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        goto __pyx_L0;
      }
    }
  }

  /* "ckdtree.pyx":1248
 * 
 *     @cython.boundscheck(False)
 *     def query(cKDTree self, object x, np.intp_t k=1, np.float64_t eps=0,             # <<<<<<<<<<<<<<
 *               np.float64_t p=2, np.float64_t distance_upper_bound=infinity,
 *               np.intp_t n_jobs=1):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dd.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ii.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ckdtree.cKDTree.query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dd.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ii.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ii);
  __Pyx_XDECREF((PyObject *)__pyx_v_dd);
  __Pyx_XDECREF((PyObject *)__pyx_v_xx);
  __Pyx_XDECREF(__pyx_v_x_arr);
  __Pyx_XDECREF(__pyx_v_retshape);
  __Pyx_XDECREF(__pyx_v__thread_func);
  __Pyx_XDECREF(__pyx_v_threads);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1397
 *     # query_ball_point
 *     # ----------------
 *     cdef int __query_ball_point_traverse_no_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                      list results,
 *                                                      ckdtreenode *node) except -1:
 */

static int __pyx_f_7ckdtree_7cKDTree___query_ball_point_traverse_no_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node) {
  struct ckdtreenode *__pyx_v_lnode;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_ball_point_traverse_no_checking", 0);

  /* "ckdtree.pyx":1403
 *         cdef np.intp_t i
 * 
 *         if node.split_dim == -1:  # leaf node             # <<<<<<<<<<<<<<
 *             lnode = node
 *             for i in range(lnode.start_idx, lnode.end_idx):
 */
  __pyx_t_1 = ((__pyx_v_node->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1404
 * 
 *         if node.split_dim == -1:  # leaf node
 *             lnode = node             # <<<<<<<<<<<<<<
 *             for i in range(lnode.start_idx, lnode.end_idx):
 *                 list_append(results, self.raw_indices[i])
 */
    __pyx_v_lnode = __pyx_v_node;

    /* "ckdtree.pyx":1405
 *         if node.split_dim == -1:  # leaf node
 *             lnode = node
 *             for i in range(lnode.start_idx, lnode.end_idx):             # <<<<<<<<<<<<<<
 *                 list_append(results, self.raw_indices[i])
 *         else:
 */
    __pyx_t_2 = __pyx_v_lnode->end_idx;
    for (__pyx_t_3 = __pyx_v_lnode->start_idx; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "ckdtree.pyx":1406
 *             lnode = node
 *             for i in range(lnode.start_idx, lnode.end_idx):
 *                 list_append(results, self.raw_indices[i])             # <<<<<<<<<<<<<<
 *         else:
 *             self.__query_ball_point_traverse_no_checking(results, node.less)
 */
      __pyx_t_4 = __pyx_f_7ckdtree_list_append(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":1408
 *                 list_append(results, self.raw_indices[i])
 *         else:
 *             self.__query_ball_point_traverse_no_checking(results, node.less)             # <<<<<<<<<<<<<<
 *             self.__query_ball_point_traverse_no_checking(results, node.greater)
 * 
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node->less); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1409
 *         else:
 *             self.__query_ball_point_traverse_no_checking(results, node.less)
 *             self.__query_ball_point_traverse_no_checking(results, node.greater)             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node->greater); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1411
 *             self.__query_ball_point_traverse_no_checking(results, node.greater)
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1397
 *     # query_ball_point
 *     # ----------------
 *     cdef int __query_ball_point_traverse_no_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                      list results,
 *                                                      ckdtreenode *node) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_ball_point_traverse_no_checking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1415
 * 
 *     @cython.cdivision(True)
 *     cdef int __query_ball_point_traverse_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                   list results,
 *                                                   ckdtreenode *node,
 */

static int __pyx_f_7ckdtree_7cKDTree___query_ball_point_traverse_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node, struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_tracker) {
  struct ckdtreenode *__pyx_v_lnode;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  __pyx_t_5numpy_intp_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_ball_point_traverse_checking", 0);

  /* "ckdtree.pyx":1423
 *         cdef np.intp_t i
 * 
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 */
  __pyx_t_1 = ((__pyx_v_tracker->min_distance > (__pyx_v_tracker->upper_bound * __pyx_v_tracker->epsfac)) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1424
 * 
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:
 *             return 0             # <<<<<<<<<<<<<<
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_ball_point_traverse_no_checking(results, node)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":1425
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:             # <<<<<<<<<<<<<<
 *             self.__query_ball_point_traverse_no_checking(results, node)
 *         elif node.split_dim == -1:  # leaf node
 */
  __pyx_t_1 = ((__pyx_v_tracker->max_distance < (__pyx_v_tracker->upper_bound / __pyx_v_tracker->epsfac)) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1426
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_ball_point_traverse_no_checking(results, node)             # <<<<<<<<<<<<<<
 *         elif node.split_dim == -1:  # leaf node
 *             lnode = <ckdtreenode*>node
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "ckdtree.pyx":1427
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_ball_point_traverse_no_checking(results, node)
 *         elif node.split_dim == -1:  # leaf node             # <<<<<<<<<<<<<<
 *             lnode = <ckdtreenode*>node
 *             # brute-force
 */
  __pyx_t_1 = ((__pyx_v_node->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1428
 *             self.__query_ball_point_traverse_no_checking(results, node)
 *         elif node.split_dim == -1:  # leaf node
 *             lnode = <ckdtreenode*>node             # <<<<<<<<<<<<<<
 *             # brute-force
 *             for i in range(lnode.start_idx, lnode.end_idx):
 */
    __pyx_v_lnode = ((struct ckdtreenode *)__pyx_v_node);

    /* "ckdtree.pyx":1430
 *             lnode = <ckdtreenode*>node
 *             # brute-force
 *             for i in range(lnode.start_idx, lnode.end_idx):             # <<<<<<<<<<<<<<
 *                 d = _distance_p(
 *                     self.raw_data + self.raw_indices[i] * self.m,
 */
    __pyx_t_3 = __pyx_v_lnode->end_idx;
    for (__pyx_t_4 = __pyx_v_lnode->start_idx; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "ckdtree.pyx":1431
 *             # brute-force
 *             for i in range(lnode.start_idx, lnode.end_idx):
 *                 d = _distance_p(             # <<<<<<<<<<<<<<
 *                     self.raw_data + self.raw_indices[i] * self.m,
 *                     tracker.pt, tracker.p, self.m, tracker.upper_bound)
 */
      __pyx_v_d = _distance_p((__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m)), __pyx_v_tracker->pt, __pyx_v_tracker->p, __pyx_v_self->m, __pyx_v_tracker->upper_bound);

      /* "ckdtree.pyx":1434
 *                     self.raw_data + self.raw_indices[i] * self.m,
 *                     tracker.pt, tracker.p, self.m, tracker.upper_bound)
 *                 if d <= tracker.upper_bound:             # <<<<<<<<<<<<<<
 *                     list_append(results, self.raw_indices[i])
 *         else:
 */
      __pyx_t_1 = ((__pyx_v_d <= __pyx_v_tracker->upper_bound) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1435
 *                     tracker.pt, tracker.p, self.m, tracker.upper_bound)
 *                 if d <= tracker.upper_bound:
 *                     list_append(results, self.raw_indices[i])             # <<<<<<<<<<<<<<
 *         else:
 *             tracker.push_less_of(node)
 */
        __pyx_t_2 = __pyx_f_7ckdtree_list_append(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i])); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":1437
 *                     list_append(results, self.raw_indices[i])
 *         else:
 *             tracker.push_less_of(node)             # <<<<<<<<<<<<<<
 *             self.__query_ball_point_traverse_checking(
 *                 results, node.less, tracker)
 */
    __pyx_t_2 = __pyx_f_7ckdtree_24PointRectDistanceTracker_push_less_of(__pyx_v_tracker, __pyx_v_node); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1438
 *         else:
 *             tracker.push_less_of(node)
 *             self.__query_ball_point_traverse_checking(             # <<<<<<<<<<<<<<
 *                 results, node.less, tracker)
 *             tracker.pop()
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1440
 *             self.__query_ball_point_traverse_checking(
 *                 results, node.less, tracker)
 *             tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *             tracker.push_greater_of(node)
 */
    __pyx_t_2 = __pyx_f_7ckdtree_24PointRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1442
 *             tracker.pop()
 * 
 *             tracker.push_greater_of(node)             # <<<<<<<<<<<<<<
 *             self.__query_ball_point_traverse_checking(
 *                 results, node.greater, tracker)
 */
    __pyx_t_2 = __pyx_f_7ckdtree_24PointRectDistanceTracker_push_greater_of(__pyx_v_tracker, __pyx_v_node); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1443
 * 
 *             tracker.push_greater_of(node)
 *             self.__query_ball_point_traverse_checking(             # <<<<<<<<<<<<<<
 *                 results, node.greater, tracker)
 *             tracker.pop()
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1445
 *             self.__query_ball_point_traverse_checking(
 *                 results, node.greater, tracker)
 *             tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_t_2 = __pyx_f_7ckdtree_24PointRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1447
 *             tracker.pop()
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1415
 * 
 *     @cython.cdivision(True)
 *     cdef int __query_ball_point_traverse_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                   list results,
 *                                                   ckdtreenode *node,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_ball_point_traverse_checking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1450
 * 
 * 
 *     cdef list __query_ball_point(cKDTree self,             # <<<<<<<<<<<<<<
 *                                  np.float64_t *x,
 *                                  np.float64_t r,
 */

static PyObject *__pyx_f_7ckdtree_7cKDTree___query_ball_point(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps) {
  struct __pyx_obj_7ckdtree_PointRectDistanceTracker *__pyx_v_tracker = NULL;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_ball_point", 0);

  /* "ckdtree.pyx":1456
 *                                  np.float64_t eps):
 * 
 *         tracker = PointRectDistanceTracker()             # <<<<<<<<<<<<<<
 *         tracker.init(x, Rectangle(self.mins, self.maxes),
 *                      p, eps, r)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_PointRectDistanceTracker)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tracker = ((struct __pyx_obj_7ckdtree_PointRectDistanceTracker *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ckdtree.pyx":1457
 * 
 *         tracker = PointRectDistanceTracker()
 *         tracker.init(x, Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *                      p, eps, r)
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->maxes));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":1458
 *         tracker = PointRectDistanceTracker()
 *         tracker.init(x, Rectangle(self.mins, self.maxes),
 *                      p, eps, r)             # <<<<<<<<<<<<<<
 * 
 *         results = []
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker *)__pyx_v_tracker->__pyx_vtab)->init(__pyx_v_tracker, __pyx_v_x, ((struct __pyx_obj_7ckdtree_Rectangle *)__pyx_t_2), __pyx_v_p, __pyx_v_eps, __pyx_v_r); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":1460
 *                      p, eps, r)
 * 
 *         results = []             # <<<<<<<<<<<<<<
 *         self.__query_ball_point_traverse_checking(
 *             results, self.ctree, tracker)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ckdtree.pyx":1461
 * 
 *         results = []
 *         self.__query_ball_point_traverse_checking(             # <<<<<<<<<<<<<<
 *             results, self.ctree, tracker)
 *         return results
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_self->ctree, __pyx_v_tracker); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":1463
 *         self.__query_ball_point_traverse_checking(
 *             results, self.ctree, tracker)
 *         return results             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "ckdtree.pyx":1450
 * 
 * 
 *     cdef list __query_ball_point(cKDTree self,             # <<<<<<<<<<<<<<
 *                                  np.float64_t *x,
 *                                  np.float64_t r,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_ball_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tracker);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1466
 * 
 * 
 *     def query_ball_point(cKDTree self, object x, np.float64_t r,             # <<<<<<<<<<<<<<
 *                          np.float64_t p=2., np.float64_t eps=0):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_7query_ball_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7ckdtree_7cKDTree_6query_ball_point[] = "\n        query_ball_point(self, x, r, p=2., eps=0)\n        \n        Find all points within distance r of point(s) x.\n\n        Parameters\n        ----------\n        x : array_like, shape tuple + (self.m,)\n            The point or points to search for neighbors of.\n        r : positive float\n            The radius of points to return.\n        p : float, optional\n            Which Minkowski p-norm to use.  Should be in the range [1, inf].\n        eps : nonnegative float, optional\n            Approximate search. Branches of the tree are not explored if their\n            nearest points are further than ``r / (1 + eps)``, and branches are\n            added in bulk if their furthest points are nearer than\n            ``r * (1 + eps)``.\n\n        Returns\n        -------\n        results : list or array of lists\n            If `x` is a single point, returns a list of the indices of the\n            neighbors of `x`. If `x` is an array of points, returns an object\n            array of shape tuple containing lists of neighbors.\n\n        Notes\n        -----\n        If you have many points whose neighbors you want to find, you may save\n        substantial amounts of time by putting them in a cKDTree and using\n        query_ball_tree.\n\n        Examples\n        --------\n        >>> from scipy import spatial\n        >>> x, y = np.mgrid[0:4, 0:4]\n        >>> points = zip(x.ravel(), y.ravel())\n        >>> tree = spatial.cKDTree(points)\n        >>> tree.query_ball_point([2, 0], 1)\n        [4, 8, 9, 12]\n\n        ";
static PyObject *__pyx_pw_7ckdtree_7cKDTree_7query_ball_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  __pyx_t_5numpy_float64_t __pyx_v_r;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  __pyx_t_5numpy_float64_t __pyx_v_eps;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_ball_point (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_r,&__pyx_n_s_p,&__pyx_n_s_eps,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("query_ball_point", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_ball_point") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_r == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_p = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_p = ((__pyx_t_5numpy_float64_t)2.);
    }
    if (values[3]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_eps == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_eps = ((__pyx_t_5numpy_float64_t)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_ball_point", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.query_ball_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_6query_ball_point(((struct ckdtree *)__pyx_v_self), __pyx_v_x, __pyx_v_r, __pyx_v_p, __pyx_v_eps);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_6query_ball_point(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps) {
  PyArrayObject *__pyx_v_xx = 0;
  PyObject *__pyx_v_retshape = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_c = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_xx;
  __Pyx_Buffer __pyx_pybuffer_xx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  long __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  long __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("query_ball_point", 0);
  __Pyx_INCREF(__pyx_v_x);
  __pyx_pybuffer_xx.pybuffer.buf = NULL;
  __pyx_pybuffer_xx.refcount = 0;
  __pyx_pybuffernd_xx.data = NULL;
  __pyx_pybuffernd_xx.rcbuffer = &__pyx_pybuffer_xx;

  /* "ckdtree.pyx":1512
 *         cdef np.ndarray[np.float64_t, ndim=1, mode="c"] xx
 * 
 *         x = np.asarray(x, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         if x.shape[-1] != self.m:
 *             raise ValueError("Searching for a %d-dimensional point in a "
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_x);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":1513
 * 
 *         x = np.asarray(x, dtype=np.float64)
 *         if x.shape[-1] != self.m:             # <<<<<<<<<<<<<<
 *             raise ValueError("Searching for a %d-dimensional point in a "
 *                              "%d-dimensional KDTree" % (int(x.shape[-1]), int(self.m)))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1515
 *         if x.shape[-1] != self.m:
 *             raise ValueError("Searching for a %d-dimensional point in a "
 *                              "%d-dimensional KDTree" % (int(x.shape[-1]), int(self.m)))             # <<<<<<<<<<<<<<
 *         if len(x.shape) == 1:
 *             xx = np.ascontiguousarray(x, dtype=np.float64)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Searching_for_a_d_dimensional_po, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ckdtree.pyx":1514
 *         x = np.asarray(x, dtype=np.float64)
 *         if x.shape[-1] != self.m:
 *             raise ValueError("Searching for a %d-dimensional point in a "             # <<<<<<<<<<<<<<
 *                              "%d-dimensional KDTree" % (int(x.shape[-1]), int(self.m)))
 *         if len(x.shape) == 1:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":1516
 *             raise ValueError("Searching for a %d-dimensional point in a "
 *                              "%d-dimensional KDTree" % (int(x.shape[-1]), int(self.m)))
 *         if len(x.shape) == 1:             # <<<<<<<<<<<<<<
 *             xx = np.ascontiguousarray(x, dtype=np.float64)
 *             return self.__query_ball_point(&xx[0], r, p, eps)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = ((__pyx_t_7 == 1) != 0);
  if (__pyx_t_6) {

    /* "ckdtree.pyx":1517
 *                              "%d-dimensional KDTree" % (int(x.shape[-1]), int(self.m)))
 *         if len(x.shape) == 1:
 *             xx = np.ascontiguousarray(x, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             return self.__query_ball_point(&xx[0], r, p, eps)
 *         else:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_x);
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)__pyx_v_xx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
      }
      __pyx_pybuffernd_xx.diminfo[0].strides = __pyx_pybuffernd_xx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xx.diminfo[0].shape = __pyx_pybuffernd_xx.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = 0;
    __pyx_v_xx = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ckdtree.pyx":1518
 *         if len(x.shape) == 1:
 *             xx = np.ascontiguousarray(x, dtype=np.float64)
 *             return self.__query_ball_point(&xx[0], r, p, eps)             # <<<<<<<<<<<<<<
 *         else:
 *             retshape = x.shape[:-1]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_13 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_pybuffernd_xx.diminfo[0].shape;
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_xx.diminfo[0].shape)) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point(__pyx_v_self, (&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_xx.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_xx.diminfo[0].strides))), __pyx_v_r, __pyx_v_p, __pyx_v_eps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "ckdtree.pyx":1520
 *             return self.__query_ball_point(&xx[0], r, p, eps)
 *         else:
 *             retshape = x.shape[:-1]             # <<<<<<<<<<<<<<
 *             result = np.empty(retshape, dtype=object)
 *             for c in np.ndindex(retshape):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, -1, NULL, NULL, &__pyx_slice__16, 0, 1, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_retshape = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ckdtree.pyx":1521
 *         else:
 *             retshape = x.shape[:-1]
 *             result = np.empty(retshape, dtype=object)             # <<<<<<<<<<<<<<
 *             for c in np.ndindex(retshape):
 *                 xx = np.ascontiguousarray(x[c], dtype=np.float64)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_retshape);
    __Pyx_GIVEREF(__pyx_v_retshape);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_retshape);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_builtin_object) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ckdtree.pyx":1522
 *             retshape = x.shape[:-1]
 *             result = np.empty(retshape, dtype=object)
 *             for c in np.ndindex(retshape):             # <<<<<<<<<<<<<<
 *                 xx = np.ascontiguousarray(x[c], dtype=np.float64)
 *                 result[c] = self.__query_ball_point(&xx[0], r, p, eps)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ndindex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_retshape); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_retshape);
      __Pyx_GIVEREF(__pyx_v_retshape);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_retshape);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_14(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ckdtree.pyx":1523
 *             result = np.empty(retshape, dtype=object)
 *             for c in np.ndindex(retshape):
 *                 xx = np.ascontiguousarray(x[c], dtype=np.float64)             # <<<<<<<<<<<<<<
 *                 result[c] = self.__query_ball_point(&xx[0], r, p, eps)
 *             return result
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_v_x, __pyx_v_c); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = ((PyArrayObject *)__pyx_t_15);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
        __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_9 < 0)) {
          PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xx.rcbuffer->pybuffer, (PyObject*)__pyx_v_xx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          }
        }
        __pyx_pybuffernd_xx.diminfo[0].strides = __pyx_pybuffernd_xx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xx.diminfo[0].shape = __pyx_pybuffernd_xx.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_xx, ((PyArrayObject *)__pyx_t_15));
      __pyx_t_15 = 0;

      /* "ckdtree.pyx":1524
 *             for c in np.ndindex(retshape):
 *                 xx = np.ascontiguousarray(x[c], dtype=np.float64)
 *                 result[c] = self.__query_ball_point(&xx[0], r, p, eps)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      __pyx_t_16 = 0;
      __pyx_t_9 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_xx.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_xx.diminfo[0].shape)) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_15 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_point(__pyx_v_self, (&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_xx.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_xx.diminfo[0].strides))), __pyx_v_r, __pyx_v_p, __pyx_v_eps); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      if (unlikely(PyObject_SetItem(__pyx_v_result, __pyx_v_c, __pyx_t_15) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "ckdtree.pyx":1522
 *             retshape = x.shape[:-1]
 *             result = np.empty(retshape, dtype=object)
 *             for c in np.ndindex(retshape):             # <<<<<<<<<<<<<<
 *                 xx = np.ascontiguousarray(x[c], dtype=np.float64)
 *                 result[c] = self.__query_ball_point(&xx[0], r, p, eps)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ckdtree.pyx":1525
 *                 xx = np.ascontiguousarray(x[c], dtype=np.float64)
 *                 result[c] = self.__query_ball_point(&xx[0], r, p, eps)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     # ---------------
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":1466
 * 
 * 
 *     def query_ball_point(cKDTree self, object x, np.float64_t r,             # <<<<<<<<<<<<<<
 *                          np.float64_t p=2., np.float64_t eps=0):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ckdtree.cKDTree.query_ball_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xx.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_xx);
  __Pyx_XDECREF(__pyx_v_retshape);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1530
 *     # query_ball_tree
 *     # ---------------
 *     cdef int __query_ball_tree_traverse_no_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                     cKDTree other,
 *                                                     list results,
 */

static int __pyx_f_7ckdtree_7cKDTree___query_ball_tree_traverse_no_checking(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2) {
  struct ckdtreenode *__pyx_v_lnode1;
  struct ckdtreenode *__pyx_v_lnode2;
  PyObject *__pyx_v_results_i = 0;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  __pyx_t_5numpy_intp_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_ball_tree_traverse_no_checking", 0);

  /* "ckdtree.pyx":1540
 *         cdef np.intp_t i, j
 * 
 *         if node1.split_dim == -1:  # leaf node             # <<<<<<<<<<<<<<
 *             lnode1 = node1
 * 
 */
  __pyx_t_1 = ((__pyx_v_node1->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1541
 * 
 *         if node1.split_dim == -1:  # leaf node
 *             lnode1 = node1             # <<<<<<<<<<<<<<
 * 
 *             if node2.split_dim == -1:  # leaf node
 */
    __pyx_v_lnode1 = __pyx_v_node1;

    /* "ckdtree.pyx":1543
 *             lnode1 = node1
 * 
 *             if node2.split_dim == -1:  # leaf node             # <<<<<<<<<<<<<<
 *                 lnode2 = node2
 * 
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1544
 * 
 *             if node2.split_dim == -1:  # leaf node
 *                 lnode2 = node2             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 */
      __pyx_v_lnode2 = __pyx_v_node2;

      /* "ckdtree.pyx":1546
 *                 lnode2 = node2
 * 
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):             # <<<<<<<<<<<<<<
 *                     results_i = results[self.raw_indices[i]]
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):
 */
      __pyx_t_2 = __pyx_v_lnode1->end_idx;
      for (__pyx_t_3 = __pyx_v_lnode1->start_idx; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":1547
 * 
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 *                     results_i = results[self.raw_indices[i]]             # <<<<<<<<<<<<<<
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):
 *                         list_append(results_i, other.raw_indices[j])
 */
        if (unlikely(__pyx_v_results == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i]), __pyx_t_5numpy_intp_t, 1, __Pyx_PyInt_From_Py_intptr_t, 1, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1547; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_XDECREF_SET(__pyx_v_results_i, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "ckdtree.pyx":1548
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 *                     results_i = results[self.raw_indices[i]]
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):             # <<<<<<<<<<<<<<
 *                         list_append(results_i, other.raw_indices[j])
 *             else:
 */
        __pyx_t_5 = __pyx_v_lnode2->end_idx;
        for (__pyx_t_6 = __pyx_v_lnode2->start_idx; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_j = __pyx_t_6;

          /* "ckdtree.pyx":1549
 *                     results_i = results[self.raw_indices[i]]
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):
 *                         list_append(results_i, other.raw_indices[j])             # <<<<<<<<<<<<<<
 *             else:
 * 
 */
          __pyx_t_7 = __pyx_f_7ckdtree_list_append(__pyx_v_results_i, (__pyx_v_other->raw_indices[__pyx_v_j])); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "ckdtree.pyx":1552
 *             else:
 * 
 *                 self.__query_ball_tree_traverse_no_checking(other, results,             # <<<<<<<<<<<<<<
 *                                                             node1, node2.less)
 *                 self.__query_ball_tree_traverse_no_checking(other, results,
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_no_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->less); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1554
 *                 self.__query_ball_tree_traverse_no_checking(other, results,
 *                                                             node1, node2.less)
 *                 self.__query_ball_tree_traverse_no_checking(other, results,             # <<<<<<<<<<<<<<
 *                                                             node1, node2.greater)
 *         else:
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_no_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->greater); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":1558
 *         else:
 * 
 *             self.__query_ball_tree_traverse_no_checking(other, results,             # <<<<<<<<<<<<<<
 *                                                         node1.less, node2)
 *             self.__query_ball_tree_traverse_no_checking(other, results,
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_no_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "ckdtree.pyx":1560
 *             self.__query_ball_tree_traverse_no_checking(other, results,
 *                                                         node1.less, node2)
 *             self.__query_ball_tree_traverse_no_checking(other, results,             # <<<<<<<<<<<<<<
 *                                                         node1.greater, node2)
 * 
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_no_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1563
 *                                                         node1.greater, node2)
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1530
 *     # query_ball_tree
 *     # ---------------
 *     cdef int __query_ball_tree_traverse_no_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                     cKDTree other,
 *                                                     list results,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_ball_tree_traverse_no_checking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1567
 * 
 *     @cython.cdivision(True)
 *     cdef int __query_ball_tree_traverse_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                  cKDTree other,
 *                                                  list results,
 */

static int __pyx_f_7ckdtree_7cKDTree___query_ball_tree_traverse_checking(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker) {
  struct ckdtreenode *__pyx_v_lnode1;
  struct ckdtreenode *__pyx_v_lnode2;
  PyObject *__pyx_v_results_i = 0;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  __pyx_t_5numpy_intp_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_6;
  __pyx_t_5numpy_intp_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_ball_tree_traverse_checking", 0);

  /* "ckdtree.pyx":1579
 *         cdef np.intp_t i, j
 * 
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 */
  __pyx_t_1 = ((__pyx_v_tracker->min_distance > (__pyx_v_tracker->upper_bound * __pyx_v_tracker->epsfac)) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1580
 * 
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:
 *             return 0             # <<<<<<<<<<<<<<
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_ball_tree_traverse_no_checking(other, results, node1, node2)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":1581
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:             # <<<<<<<<<<<<<<
 *             self.__query_ball_tree_traverse_no_checking(other, results, node1, node2)
 *         elif node1.split_dim == -1:  # 1 is leaf node
 */
  __pyx_t_1 = ((__pyx_v_tracker->max_distance < (__pyx_v_tracker->upper_bound / __pyx_v_tracker->epsfac)) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1582
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_ball_tree_traverse_no_checking(other, results, node1, node2)             # <<<<<<<<<<<<<<
 *         elif node1.split_dim == -1:  # 1 is leaf node
 *             lnode1 = node1
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_no_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "ckdtree.pyx":1583
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_ball_tree_traverse_no_checking(other, results, node1, node2)
 *         elif node1.split_dim == -1:  # 1 is leaf node             # <<<<<<<<<<<<<<
 *             lnode1 = node1
 * 
 */
  __pyx_t_1 = ((__pyx_v_node1->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1584
 *             self.__query_ball_tree_traverse_no_checking(other, results, node1, node2)
 *         elif node1.split_dim == -1:  # 1 is leaf node
 *             lnode1 = node1             # <<<<<<<<<<<<<<
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves
 */
    __pyx_v_lnode1 = __pyx_v_node1;

    /* "ckdtree.pyx":1586
 *             lnode1 = node1
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves             # <<<<<<<<<<<<<<
 *                 lnode2 = node2
 * 
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1587
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves
 *                 lnode2 = node2             # <<<<<<<<<<<<<<
 * 
 *                 # brute-force
 */
      __pyx_v_lnode2 = __pyx_v_node2;

      /* "ckdtree.pyx":1590
 * 
 *                 # brute-force
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):             # <<<<<<<<<<<<<<
 *                     results_i = results[self.raw_indices[i]]
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):
 */
      __pyx_t_3 = __pyx_v_lnode1->end_idx;
      for (__pyx_t_4 = __pyx_v_lnode1->start_idx; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "ckdtree.pyx":1591
 *                 # brute-force
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 *                     results_i = results[self.raw_indices[i]]             # <<<<<<<<<<<<<<
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):
 *                         d = _distance_p(
 */
        if (unlikely(__pyx_v_results == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i]), __pyx_t_5numpy_intp_t, 1, __Pyx_PyInt_From_Py_intptr_t, 1, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1591; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_XDECREF_SET(__pyx_v_results_i, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "ckdtree.pyx":1592
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 *                     results_i = results[self.raw_indices[i]]
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):             # <<<<<<<<<<<<<<
 *                         d = _distance_p(
 *                             self.raw_data + self.raw_indices[i] * self.m,
 */
        __pyx_t_6 = __pyx_v_lnode2->end_idx;
        for (__pyx_t_7 = __pyx_v_lnode2->start_idx; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_j = __pyx_t_7;

          /* "ckdtree.pyx":1593
 *                     results_i = results[self.raw_indices[i]]
 *                     for j in range(lnode2.start_idx, lnode2.end_idx):
 *                         d = _distance_p(             # <<<<<<<<<<<<<<
 *                             self.raw_data + self.raw_indices[i] * self.m,
 *                             other.raw_data + other.raw_indices[j] * other.m,
 */
          __pyx_v_d = _distance_p((__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m)), (__pyx_v_other->raw_data + ((__pyx_v_other->raw_indices[__pyx_v_j]) * __pyx_v_other->m)), __pyx_v_tracker->p, __pyx_v_self->m, __pyx_v_tracker->upper_bound);

          /* "ckdtree.pyx":1597
 *                             other.raw_data + other.raw_indices[j] * other.m,
 *                             tracker.p, self.m, tracker.upper_bound)
 *                         if d <= tracker.upper_bound:             # <<<<<<<<<<<<<<
 *                             list_append(results_i, other.raw_indices[j])
 * 
 */
          __pyx_t_1 = ((__pyx_v_d <= __pyx_v_tracker->upper_bound) != 0);
          if (__pyx_t_1) {

            /* "ckdtree.pyx":1598
 *                             tracker.p, self.m, tracker.upper_bound)
 *                         if d <= tracker.upper_bound:
 *                             list_append(results_i, other.raw_indices[j])             # <<<<<<<<<<<<<<
 * 
 *             else:  # 1 is a leaf node, 2 is inner node
 */
            __pyx_t_2 = __pyx_f_7ckdtree_list_append(__pyx_v_results_i, (__pyx_v_other->raw_indices[__pyx_v_j])); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            goto __pyx_L9;
          }
          __pyx_L9:;
        }
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "ckdtree.pyx":1602
 *             else:  # 1 is a leaf node, 2 is inner node
 * 
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1, node2.less, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1603
 * 
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1605
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1607
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1, node2.greater, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1608
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1610
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":1614
 * 
 *         else:  # 1 is an inner node
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(1, node1)
 *                 self.__query_ball_tree_traverse_checking(
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1615
 *         else:  # 1 is an inner node
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                 tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.less, node2, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1616
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                 tracker.push_less_of(1, node1)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1.less, node2, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1618
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.less, node2, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(1, node1)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1620
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.greater, node2, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1621
 * 
 *                 tracker.push_greater_of(1, node1)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1.greater, node2, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1623
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.greater, node2, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *             else: # 1 & 2 are inner nodes
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L10;
    }
    /*else*/ {

      /* "ckdtree.pyx":1627
 *             else: # 1 & 2 are inner nodes
 * 
 *                 tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1628
 * 
 *                 tracker.push_less_of(1, node1)
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.less, node2.less, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1629
 *                 tracker.push_less_of(1, node1)
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1.less, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1631
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.less, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1633
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.less, node2.greater, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1634
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1.less, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1636
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.less, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 *                 tracker.pop()
 * 
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1637
 *                     other, results, node1.less, node2.greater, tracker)
 *                 tracker.pop()
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1640
 * 
 * 
 *                 tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1641
 * 
 *                 tracker.push_greater_of(1, node1)
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.greater, node2.less, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1642
 *                 tracker.push_greater_of(1, node1)
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1.greater, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1644
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.greater, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1646
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.greater, node2.greater, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1647
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *                     other, results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1649
 *                 self.__query_ball_tree_traverse_checking(
 *                     other, results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 *                 tracker.pop()
 * 
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1650
 *                     other, results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L10:;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1652
 *                 tracker.pop()
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1567
 * 
 *     @cython.cdivision(True)
 *     cdef int __query_ball_tree_traverse_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                  cKDTree other,
 *                                                  list results,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_ball_tree_traverse_checking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1655
 * 
 * 
 *     def query_ball_tree(cKDTree self, cKDTree other,             # <<<<<<<<<<<<<<
 *                         np.float64_t r, np.float64_t p=2., np.float64_t eps=0):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_9query_ball_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7ckdtree_7cKDTree_8query_ball_tree[] = "\n        query_ball_tree(self, other, r, p=2., eps=0)\n\n        Find all pairs of points whose distance is at most r\n\n        Parameters\n        ----------\n        other : KDTree instance\n            The tree containing points to search against.\n        r : float\n            The maximum distance, has to be positive.\n        p : float, optional\n            Which Minkowski norm to use.  `p` has to meet the condition\n            ``1 <= p <= infinity``.\n        eps : float, optional\n            Approximate search.  Branches of the tree are not explored\n            if their nearest points are further than ``r/(1+eps)``, and\n            branches are added in bulk if their furthest points are nearer\n            than ``r * (1+eps)``.  `eps` has to be non-negative.\n\n        Returns\n        -------\n        results : list of lists\n            For each element ``self.data[i]`` of this tree, ``results[i]`` is a\n            list of the indices of its neighbors in ``other.data``.\n\n        ";
static PyObject *__pyx_pw_7ckdtree_7cKDTree_9query_ball_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct ckdtree *__pyx_v_other = 0;
  __pyx_t_5numpy_float64_t __pyx_v_r;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  __pyx_t_5numpy_float64_t __pyx_v_eps;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_ball_tree (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_r,&__pyx_n_s_p,&__pyx_n_s_eps,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("query_ball_tree", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_ball_tree") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct ckdtree *)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_r == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_p = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_p = ((__pyx_t_5numpy_float64_t)2.);
    }
    if (values[3]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_eps == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_eps = ((__pyx_t_5numpy_float64_t)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_ball_tree", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.query_ball_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7ckdtree_cKDTree, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_8query_ball_tree(((struct ckdtree *)__pyx_v_self), __pyx_v_other, __pyx_v_r, __pyx_v_p, __pyx_v_eps);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_8query_ball_tree(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps) {
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker = NULL;
  PyObject *__pyx_v_results = NULL;
  CYTHON_UNUSED __pyx_t_5numpy_intp_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_8;
  __pyx_t_5numpy_intp_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("query_ball_tree", 0);

  /* "ckdtree.pyx":1686
 * 
 *         # Make sure trees are compatible
 *         if self.m != other.m:             # <<<<<<<<<<<<<<
 *             raise ValueError("Trees passed to query_ball_tree have different "
 *                              "dimensionality")
 */
  __pyx_t_1 = ((__pyx_v_self->m != __pyx_v_other->m) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1687
 *         # Make sure trees are compatible
 *         if self.m != other.m:
 *             raise ValueError("Trees passed to query_ball_tree have different "             # <<<<<<<<<<<<<<
 *                              "dimensionality")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":1692
 *         # Track node-to-node min/max distances
 *         tracker = RectRectDistanceTracker(
 *             Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *             Rectangle(other.mins, other.maxes),
 *             p, eps, r)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->maxes));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":1693
 *         tracker = RectRectDistanceTracker(
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(other.mins, other.maxes),             # <<<<<<<<<<<<<<
 *             p, eps, r)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_other->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other->mins));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_other->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_other->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other->maxes));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_other->maxes));
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":1694
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(other.mins, other.maxes),
 *             p, eps, r)             # <<<<<<<<<<<<<<
 * 
 *         results = [[] for i in range(self.n)]
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_eps); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "ckdtree.pyx":1691
 * 
 *         # Track node-to-node min/max distances
 *         tracker = RectRectDistanceTracker(             # <<<<<<<<<<<<<<
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(other.mins, other.maxes),
 */
  __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_RectRectDistanceTracker)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_tracker = ((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ckdtree.pyx":1696
 *             p, eps, r)
 * 
 *         results = [[] for i in range(self.n)]             # <<<<<<<<<<<<<<
 *         self.__query_ball_tree_traverse_checking(
 *             other, results, self.ctree, other.ctree, tracker)
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __pyx_v_self->n;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_v_results = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ckdtree.pyx":1697
 * 
 *         results = [[] for i in range(self.n)]
 *         self.__query_ball_tree_traverse_checking(             # <<<<<<<<<<<<<<
 *             other, results, self.ctree, other.ctree, tracker)
 * 
 */
  __pyx_t_10 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_ball_tree_traverse_checking(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_self->ctree, __pyx_v_other->ctree, __pyx_v_tracker); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":1700
 *             other, results, self.ctree, other.ctree, tracker)
 * 
 *         return results             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "ckdtree.pyx":1655
 * 
 * 
 *     def query_ball_tree(cKDTree self, cKDTree other,             # <<<<<<<<<<<<<<
 *                         np.float64_t r, np.float64_t p=2., np.float64_t eps=0):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ckdtree.cKDTree.query_ball_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tracker);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1706
 *     # query_pairs
 *     # -----------
 *     cdef int __query_pairs_traverse_no_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                 set results,
 *                                                 ckdtreenode *node1,
 */

static int __pyx_f_7ckdtree_7cKDTree___query_pairs_traverse_no_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2) {
  struct ckdtreenode *__pyx_v_lnode1;
  struct ckdtreenode *__pyx_v_lnode2;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  __pyx_t_5numpy_intp_t __pyx_v_min_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  __pyx_t_5numpy_intp_t __pyx_t_4;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_pairs_traverse_no_checking", 0);

  /* "ckdtree.pyx":1715
 *         cdef np.intp_t i, j, min_j
 * 
 *         if node1.split_dim == -1:  # leaf node             # <<<<<<<<<<<<<<
 *             lnode1 = node1
 * 
 */
  __pyx_t_1 = ((__pyx_v_node1->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1716
 * 
 *         if node1.split_dim == -1:  # leaf node
 *             lnode1 = node1             # <<<<<<<<<<<<<<
 * 
 *             if node2.split_dim == -1:  # leaf node
 */
    __pyx_v_lnode1 = __pyx_v_node1;

    /* "ckdtree.pyx":1718
 *             lnode1 = node1
 * 
 *             if node2.split_dim == -1:  # leaf node             # <<<<<<<<<<<<<<
 *                 lnode2 = node2
 * 
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1719
 * 
 *             if node2.split_dim == -1:  # leaf node
 *                 lnode2 = node2             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 */
      __pyx_v_lnode2 = __pyx_v_node2;

      /* "ckdtree.pyx":1721
 *                 lnode2 = node2
 * 
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):             # <<<<<<<<<<<<<<
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:
 */
      __pyx_t_2 = __pyx_v_lnode1->end_idx;
      for (__pyx_t_3 = __pyx_v_lnode1->start_idx; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":1723
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:             # <<<<<<<<<<<<<<
 *                         min_j = i + 1
 *                     else:
 */
        __pyx_t_1 = ((__pyx_v_node1 == __pyx_v_node2) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":1724
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:
 *                         min_j = i + 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         min_j = lnode2.start_idx
 */
          __pyx_v_min_j = (__pyx_v_i + 1);
          goto __pyx_L7;
        }
        /*else*/ {

          /* "ckdtree.pyx":1726
 *                         min_j = i + 1
 *                     else:
 *                         min_j = lnode2.start_idx             # <<<<<<<<<<<<<<
 * 
 *                     for j in range(min_j, lnode2.end_idx):
 */
          __pyx_t_4 = __pyx_v_lnode2->start_idx;
          __pyx_v_min_j = __pyx_t_4;
        }
        __pyx_L7:;

        /* "ckdtree.pyx":1728
 *                         min_j = lnode2.start_idx
 * 
 *                     for j in range(min_j, lnode2.end_idx):             # <<<<<<<<<<<<<<
 *                         set_add_ordered_pair(results,
 *                                              self.raw_indices[i],
 */
        __pyx_t_4 = __pyx_v_lnode2->end_idx;
        for (__pyx_t_5 = __pyx_v_min_j; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_j = __pyx_t_5;

          /* "ckdtree.pyx":1729
 * 
 *                     for j in range(min_j, lnode2.end_idx):
 *                         set_add_ordered_pair(results,             # <<<<<<<<<<<<<<
 *                                              self.raw_indices[i],
 *                                              self.raw_indices[j])
 */
          __pyx_t_6 = __pyx_f_7ckdtree_set_add_ordered_pair(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i]), (__pyx_v_self->raw_indices[__pyx_v_j])); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "ckdtree.pyx":1734
 * 
 *             else:
 *                 self.__query_pairs_traverse_no_checking(results, node1, node2.less)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_no_checking(results, node1, node2.greater)
 *         else:
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->less); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1735
 *             else:
 *                 self.__query_pairs_traverse_no_checking(results, node1, node2.less)
 *                 self.__query_pairs_traverse_no_checking(results, node1, node2.greater)             # <<<<<<<<<<<<<<
 *         else:
 *             if node1 == node2:
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->greater); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":1737
 *                 self.__query_pairs_traverse_no_checking(results, node1, node2.greater)
 *         else:
 *             if node1 == node2:             # <<<<<<<<<<<<<<
 *                 # Avoid traversing (node1.less, node2.greater) and
 *                 # (node1.greater, node2.less) (it's the same node pair twice
 */
    __pyx_t_1 = ((__pyx_v_node1 == __pyx_v_node2) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1742
 *                 # over, which is the source of the complication in the
 *                 # original KDTree.query_pairs)
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2.less)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2.greater)
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2.greater)
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->less); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1743
 *                 # original KDTree.query_pairs)
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2.less)
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2.greater)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2.greater)
 *             else:
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->greater); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1744
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2.less)
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2.greater)
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2.greater)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2)
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->greater); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L10;
    }
    /*else*/ {

      /* "ckdtree.pyx":1746
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2.greater)
 *             else:
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2)
 * 
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1747
 *             else:
 *                 self.__query_pairs_traverse_no_checking(results, node1.less, node2)
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2)             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L10:;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1749
 *                 self.__query_pairs_traverse_no_checking(results, node1.greater, node2)
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1706
 *     # query_pairs
 *     # -----------
 *     cdef int __query_pairs_traverse_no_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                                 set results,
 *                                                 ckdtreenode *node1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_pairs_traverse_no_checking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1752
 * 
 *     @cython.cdivision(True)
 *     cdef int __query_pairs_traverse_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                              set results,
 *                                              ckdtreenode *node1,
 */

static int __pyx_f_7ckdtree_7cKDTree___query_pairs_traverse_checking(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker) {
  struct ckdtreenode *__pyx_v_lnode1;
  struct ckdtreenode *__pyx_v_lnode2;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  __pyx_t_5numpy_intp_t __pyx_v_min_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  __pyx_t_5numpy_intp_t __pyx_t_4;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  __pyx_t_5numpy_intp_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__query_pairs_traverse_checking", 0);

  /* "ckdtree.pyx":1763
 *         cdef np.intp_t i, j, min_j
 * 
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 */
  __pyx_t_1 = ((__pyx_v_tracker->min_distance > (__pyx_v_tracker->upper_bound * __pyx_v_tracker->epsfac)) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1764
 * 
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:
 *             return 0             # <<<<<<<<<<<<<<
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_pairs_traverse_no_checking(results, node1, node2)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":1765
 *         if tracker.min_distance > tracker.upper_bound * tracker.epsfac:
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:             # <<<<<<<<<<<<<<
 *             self.__query_pairs_traverse_no_checking(results, node1, node2)
 *         elif node1.split_dim == -1:  # 1 is leaf node
 */
  __pyx_t_1 = ((__pyx_v_tracker->max_distance < (__pyx_v_tracker->upper_bound / __pyx_v_tracker->epsfac)) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1766
 *             return 0
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_pairs_traverse_no_checking(results, node1, node2)             # <<<<<<<<<<<<<<
 *         elif node1.split_dim == -1:  # 1 is leaf node
 *             lnode1 = node1
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_no_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "ckdtree.pyx":1767
 *         elif tracker.max_distance < tracker.upper_bound / tracker.epsfac:
 *             self.__query_pairs_traverse_no_checking(results, node1, node2)
 *         elif node1.split_dim == -1:  # 1 is leaf node             # <<<<<<<<<<<<<<
 *             lnode1 = node1
 * 
 */
  __pyx_t_1 = ((__pyx_v_node1->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":1768
 *             self.__query_pairs_traverse_no_checking(results, node1, node2)
 *         elif node1.split_dim == -1:  # 1 is leaf node
 *             lnode1 = node1             # <<<<<<<<<<<<<<
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves
 */
    __pyx_v_lnode1 = __pyx_v_node1;

    /* "ckdtree.pyx":1770
 *             lnode1 = node1
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves             # <<<<<<<<<<<<<<
 *                 lnode2 = node2
 * 
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1771
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves
 *                 lnode2 = node2             # <<<<<<<<<<<<<<
 * 
 *                 # brute-force
 */
      __pyx_v_lnode2 = __pyx_v_node2;

      /* "ckdtree.pyx":1774
 * 
 *                 # brute-force
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):             # <<<<<<<<<<<<<<
 * 
 *                     # Special care here to avoid duplicate pairs
 */
      __pyx_t_3 = __pyx_v_lnode1->end_idx;
      for (__pyx_t_4 = __pyx_v_lnode1->start_idx; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "ckdtree.pyx":1777
 * 
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:             # <<<<<<<<<<<<<<
 *                         min_j = i + 1
 *                     else:
 */
        __pyx_t_1 = ((__pyx_v_node1 == __pyx_v_node2) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":1778
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:
 *                         min_j = i + 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         min_j = lnode2.start_idx
 */
          __pyx_v_min_j = (__pyx_v_i + 1);
          goto __pyx_L7;
        }
        /*else*/ {

          /* "ckdtree.pyx":1780
 *                         min_j = i + 1
 *                     else:
 *                         min_j = lnode2.start_idx             # <<<<<<<<<<<<<<
 * 
 *                     for j in range(min_j, lnode2.end_idx):
 */
          __pyx_t_5 = __pyx_v_lnode2->start_idx;
          __pyx_v_min_j = __pyx_t_5;
        }
        __pyx_L7:;

        /* "ckdtree.pyx":1782
 *                         min_j = lnode2.start_idx
 * 
 *                     for j in range(min_j, lnode2.end_idx):             # <<<<<<<<<<<<<<
 *                         d = _distance_p(
 *                             self.raw_data + self.raw_indices[i] * self.m,
 */
        __pyx_t_5 = __pyx_v_lnode2->end_idx;
        for (__pyx_t_6 = __pyx_v_min_j; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_j = __pyx_t_6;

          /* "ckdtree.pyx":1783
 * 
 *                     for j in range(min_j, lnode2.end_idx):
 *                         d = _distance_p(             # <<<<<<<<<<<<<<
 *                             self.raw_data + self.raw_indices[i] * self.m,
 *                             self.raw_data + self.raw_indices[j] * self.m,
 */
          __pyx_v_d = _distance_p((__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m)), (__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_j]) * __pyx_v_self->m)), __pyx_v_tracker->p, __pyx_v_self->m, __pyx_v_tracker->upper_bound);

          /* "ckdtree.pyx":1787
 *                             self.raw_data + self.raw_indices[j] * self.m,
 *                             tracker.p, self.m, tracker.upper_bound)
 *                         if d <= tracker.upper_bound:             # <<<<<<<<<<<<<<
 *                             set_add_ordered_pair(results,
 *                                                  self.raw_indices[i],
 */
          __pyx_t_1 = ((__pyx_v_d <= __pyx_v_tracker->upper_bound) != 0);
          if (__pyx_t_1) {

            /* "ckdtree.pyx":1788
 *                             tracker.p, self.m, tracker.upper_bound)
 *                         if d <= tracker.upper_bound:
 *                             set_add_ordered_pair(results,             # <<<<<<<<<<<<<<
 *                                                  self.raw_indices[i],
 *                                                  self.raw_indices[j])
 */
            __pyx_t_2 = __pyx_f_7ckdtree_set_add_ordered_pair(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i]), (__pyx_v_self->raw_indices[__pyx_v_j])); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            goto __pyx_L10;
          }
          __pyx_L10:;
        }
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "ckdtree.pyx":1793
 * 
 *             else:  # 1 is a leaf node, 2 is inner node
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1, node2.less, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1794
 *             else:  # 1 is a leaf node, 2 is inner node
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1796
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1798
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1, node2.greater, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1799
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1801
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         else:  # 1 is an inner node
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":1804
 * 
 *         else:  # 1 is an inner node
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(1, node1)
 *                 self.__query_pairs_traverse_checking(
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":1805
 *         else:  # 1 is an inner node
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                 tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.less, node2, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1806
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                 tracker.push_less_of(1, node1)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1.less, node2, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1808
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.less, node2, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(1, node1)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1810
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.greater, node2, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1811
 * 
 *                 tracker.push_greater_of(1, node1)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1.greater, node2, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1813
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.greater, node2, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *             else: # 1 and 2 are inner nodes
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L11;
    }
    /*else*/ {

      /* "ckdtree.pyx":1816
 * 
 *             else: # 1 and 2 are inner nodes
 *                 tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_pairs_traverse_checking(
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1817
 *             else: # 1 and 2 are inner nodes
 *                 tracker.push_less_of(1, node1)
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.less, node2.less, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1818
 *                 tracker.push_less_of(1, node1)
 *                 tracker.push_less_of(2, node2)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1.less, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1820
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.less, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1822
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.less, node2.greater, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1823
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1.less, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1825
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.less, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 *                 tracker.pop()
 * 
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1826
 *                     results, node1.less, node2.greater, tracker)
 *                 tracker.pop()
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(1, node1)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1828
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                 if node1 != node2:
 *                     # Avoid traversing (node1.less, node2.greater) and
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1829
 * 
 *                 tracker.push_greater_of(1, node1)
 *                 if node1 != node2:             # <<<<<<<<<<<<<<
 *                     # Avoid traversing (node1.less, node2.greater) and
 *                     # (node1.greater, node2.less) (it's the same node pair
 */
      __pyx_t_1 = ((__pyx_v_node1 != __pyx_v_node2) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":1834
 *                     # twice over, which is the source of the complication in
 *                     # the original KDTree.query_pairs)
 *                     tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__query_pairs_traverse_checking(
 *                         results, node1.greater, node2.less, tracker)
 */
        __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1835
 *                     # the original KDTree.query_pairs)
 *                     tracker.push_less_of(2, node2)
 *                     self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                         results, node1.greater, node2.less, tracker)
 *                     tracker.pop()
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1837
 *                     self.__query_pairs_traverse_checking(
 *                         results, node1.greater, node2.less, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
        __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;

      /* "ckdtree.pyx":1839
 *                     tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.greater, node2.greater, tracker)
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1840
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *                     results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1842
 *                 self.__query_pairs_traverse_checking(
 *                     results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 *                 tracker.pop()
 * 
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":1843
 *                     results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
      __pyx_t_2 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L11:;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":1845
 *                 tracker.pop()
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1752
 * 
 *     @cython.cdivision(True)
 *     cdef int __query_pairs_traverse_checking(cKDTree self,             # <<<<<<<<<<<<<<
 *                                              set results,
 *                                              ckdtreenode *node1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__query_pairs_traverse_checking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1848
 * 
 * 
 *     def query_pairs(cKDTree self, np.float64_t r, np.float64_t p=2.,             # <<<<<<<<<<<<<<
 *                     np.float64_t eps=0):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_11query_pairs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7ckdtree_7cKDTree_10query_pairs[] = "\n        query_pairs(self, r, p=2., eps=0)\n\n        Find all pairs of points whose distance is at most r.\n\n        Parameters\n        ----------\n        r : positive float\n            The maximum distance.\n        p : float, optional\n            Which Minkowski norm to use.  `p` has to meet the condition\n            ``1 <= p <= infinity``.\n        eps : float, optional\n            Approximate search.  Branches of the tree are not explored\n            if their nearest points are further than ``r/(1+eps)``, and\n            branches are added in bulk if their furthest points are nearer\n            than ``r * (1+eps)``.  `eps` has to be non-negative.\n\n        Returns\n        -------\n        results : set\n            Set of pairs ``(i,j)``, with ``i < j``, for which the corresponding\n            positions are close.\n\n        ";
static PyObject *__pyx_pw_7ckdtree_7cKDTree_11query_pairs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5numpy_float64_t __pyx_v_r;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  __pyx_t_5numpy_float64_t __pyx_v_eps;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query_pairs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_p,&__pyx_n_s_eps,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "query_pairs") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_r == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_p = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_p = ((__pyx_t_5numpy_float64_t)2.);
    }
    if (values[2]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_eps == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_eps = ((__pyx_t_5numpy_float64_t)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query_pairs", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.query_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_10query_pairs(((struct ckdtree *)__pyx_v_self), __pyx_v_r, __pyx_v_p, __pyx_v_eps);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_10query_pairs(struct ckdtree *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p, __pyx_t_5numpy_float64_t __pyx_v_eps) {
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker = NULL;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("query_pairs", 0);

  /* "ckdtree.pyx":1877
 * 
 *         tracker = RectRectDistanceTracker(
 *             Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *             Rectangle(self.mins, self.maxes),
 *             p, eps, r)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->maxes));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":1878
 *         tracker = RectRectDistanceTracker(
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *             p, eps, r)
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->maxes));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":1879
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(self.mins, self.maxes),
 *             p, eps, r)             # <<<<<<<<<<<<<<
 * 
 *         results = set()
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_eps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "ckdtree.pyx":1876
 *         """
 * 
 *         tracker = RectRectDistanceTracker(             # <<<<<<<<<<<<<<
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(self.mins, self.maxes),
 */
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_RectRectDistanceTracker)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_tracker = ((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":1881
 *             p, eps, r)
 * 
 *         results = set()             # <<<<<<<<<<<<<<
 *         self.__query_pairs_traverse_checking(
 *             results, self.ctree, self.ctree, tracker)
 */
  __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_results = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":1882
 * 
 *         results = set()
 *         self.__query_pairs_traverse_checking(             # <<<<<<<<<<<<<<
 *             results, self.ctree, self.ctree, tracker)
 * 
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___query_pairs_traverse_checking(__pyx_v_self, __pyx_v_results, __pyx_v_self->ctree, __pyx_v_self->ctree, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":1885
 *             results, self.ctree, self.ctree, tracker)
 * 
 *         return results             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "ckdtree.pyx":1848
 * 
 * 
 *     def query_pairs(cKDTree self, np.float64_t r, np.float64_t p=2.,             # <<<<<<<<<<<<<<
 *                     np.float64_t eps=0):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ckdtree.cKDTree.query_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tracker);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":1891
 *     # count_neighbors
 *     # ---------------
 *     cdef int __count_neighbors_traverse(cKDTree self,             # <<<<<<<<<<<<<<
 *                                         cKDTree other,
 *                                         np.intp_t     n_queries,
 */

static int __pyx_f_7ckdtree_7cKDTree___count_neighbors_traverse(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, __pyx_t_5numpy_intp_t __pyx_v_n_queries, __pyx_t_5numpy_float64_t *__pyx_v_r, __pyx_t_5numpy_intp_t *__pyx_v_results, __pyx_t_5numpy_intp_t *__pyx_v_idx, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker) {
  struct ckdtreenode *__pyx_v_lnode1;
  struct ckdtreenode *__pyx_v_lnode2;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_intp_t *__pyx_v_old_idx;
  __pyx_t_5numpy_intp_t __pyx_v_old_n_queries;
  __pyx_t_5numpy_intp_t __pyx_v_l;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  PyArrayObject *__pyx_v_inner_idx = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_inner_idx;
  __Pyx_Buffer __pyx_pybuffer_inner_idx;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  long __pyx_t_11;
  __pyx_t_5numpy_intp_t __pyx_t_12;
  __pyx_t_5numpy_intp_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_intp_t __pyx_t_15;
  __pyx_t_5numpy_intp_t __pyx_t_16;
  __pyx_t_5numpy_intp_t __pyx_t_17;
  __pyx_t_5numpy_intp_t __pyx_t_18;
  __pyx_t_5numpy_intp_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__count_neighbors_traverse", 0);
  __pyx_pybuffer_inner_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_inner_idx.refcount = 0;
  __pyx_pybuffernd_inner_idx.data = NULL;
  __pyx_pybuffernd_inner_idx.rcbuffer = &__pyx_pybuffer_inner_idx;

  /* "ckdtree.pyx":1908
 *         # Speed through pairs of nodes all of whose children are close
 *         # and see if any work remains to be done
 *         old_idx = idx             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.intp_t, ndim=1] inner_idx
 *         inner_idx = np.empty((n_queries,), dtype=np.intp)
 */
  __pyx_v_old_idx = __pyx_v_idx;

  /* "ckdtree.pyx":1910
 *         old_idx = idx
 *         cdef np.ndarray[np.intp_t, ndim=1] inner_idx
 *         inner_idx = np.empty((n_queries,), dtype=np.intp)             # <<<<<<<<<<<<<<
 *         idx = &inner_idx[0]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_queries); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_inner_idx.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_inner_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_inner_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_inner_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
    }
    __pyx_pybuffernd_inner_idx.diminfo[0].strides = __pyx_pybuffernd_inner_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_inner_idx.diminfo[0].shape = __pyx_pybuffernd_inner_idx.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = 0;
  __pyx_v_inner_idx = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":1911
 *         cdef np.ndarray[np.intp_t, ndim=1] inner_idx
 *         inner_idx = np.empty((n_queries,), dtype=np.intp)
 *         idx = &inner_idx[0]             # <<<<<<<<<<<<<<
 * 
 *         old_n_queries = n_queries
 */
  __pyx_t_11 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_inner_idx.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_inner_idx.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_idx = (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_inner_idx.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_inner_idx.diminfo[0].strides)));

  /* "ckdtree.pyx":1913
 *         idx = &inner_idx[0]
 * 
 *         old_n_queries = n_queries             # <<<<<<<<<<<<<<
 *         n_queries = 0
 *         for i in range(old_n_queries):
 */
  __pyx_v_old_n_queries = __pyx_v_n_queries;

  /* "ckdtree.pyx":1914
 * 
 *         old_n_queries = n_queries
 *         n_queries = 0             # <<<<<<<<<<<<<<
 *         for i in range(old_n_queries):
 *             if tracker.max_distance < r[old_idx[i]]:
 */
  __pyx_v_n_queries = 0;

  /* "ckdtree.pyx":1915
 *         old_n_queries = n_queries
 *         n_queries = 0
 *         for i in range(old_n_queries):             # <<<<<<<<<<<<<<
 *             if tracker.max_distance < r[old_idx[i]]:
 *                 results[old_idx[i]] += node1.children * node2.children
 */
  __pyx_t_12 = __pyx_v_old_n_queries;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "ckdtree.pyx":1916
 *         n_queries = 0
 *         for i in range(old_n_queries):
 *             if tracker.max_distance < r[old_idx[i]]:             # <<<<<<<<<<<<<<
 *                 results[old_idx[i]] += node1.children * node2.children
 *             elif tracker.min_distance <= r[old_idx[i]]:
 */
    __pyx_t_14 = ((__pyx_v_tracker->max_distance < (__pyx_v_r[(__pyx_v_old_idx[__pyx_v_i])])) != 0);
    if (__pyx_t_14) {

      /* "ckdtree.pyx":1917
 *         for i in range(old_n_queries):
 *             if tracker.max_distance < r[old_idx[i]]:
 *                 results[old_idx[i]] += node1.children * node2.children             # <<<<<<<<<<<<<<
 *             elif tracker.min_distance <= r[old_idx[i]]:
 *                 idx[n_queries] = old_idx[i]
 */
      __pyx_t_15 = (__pyx_v_old_idx[__pyx_v_i]);
      (__pyx_v_results[__pyx_t_15]) = ((__pyx_v_results[__pyx_t_15]) + (__pyx_v_node1->children * __pyx_v_node2->children));
      goto __pyx_L5;
    }

    /* "ckdtree.pyx":1918
 *             if tracker.max_distance < r[old_idx[i]]:
 *                 results[old_idx[i]] += node1.children * node2.children
 *             elif tracker.min_distance <= r[old_idx[i]]:             # <<<<<<<<<<<<<<
 *                 idx[n_queries] = old_idx[i]
 *                 n_queries += 1
 */
    __pyx_t_14 = ((__pyx_v_tracker->min_distance <= (__pyx_v_r[(__pyx_v_old_idx[__pyx_v_i])])) != 0);
    if (__pyx_t_14) {

      /* "ckdtree.pyx":1919
 *                 results[old_idx[i]] += node1.children * node2.children
 *             elif tracker.min_distance <= r[old_idx[i]]:
 *                 idx[n_queries] = old_idx[i]             # <<<<<<<<<<<<<<
 *                 n_queries += 1
 * 
 */
      (__pyx_v_idx[__pyx_v_n_queries]) = (__pyx_v_old_idx[__pyx_v_i]);

      /* "ckdtree.pyx":1920
 *             elif tracker.min_distance <= r[old_idx[i]]:
 *                 idx[n_queries] = old_idx[i]
 *                 n_queries += 1             # <<<<<<<<<<<<<<
 * 
 *         if n_queries > 0:
 */
      __pyx_v_n_queries = (__pyx_v_n_queries + 1);
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "ckdtree.pyx":1922
 *                 n_queries += 1
 * 
 *         if n_queries > 0:             # <<<<<<<<<<<<<<
 *             # OK, need to probe a bit deeper
 *             if node1.split_dim == -1:  # 1 is leaf node
 */
  __pyx_t_14 = ((__pyx_v_n_queries > 0) != 0);
  if (__pyx_t_14) {

    /* "ckdtree.pyx":1924
 *         if n_queries > 0:
 *             # OK, need to probe a bit deeper
 *             if node1.split_dim == -1:  # 1 is leaf node             # <<<<<<<<<<<<<<
 *                 lnode1 = node1
 *                 if node2.split_dim == -1:  # 1 & 2 are leaves
 */
    __pyx_t_14 = ((__pyx_v_node1->split_dim == -1) != 0);
    if (__pyx_t_14) {

      /* "ckdtree.pyx":1925
 *             # OK, need to probe a bit deeper
 *             if node1.split_dim == -1:  # 1 is leaf node
 *                 lnode1 = node1             # <<<<<<<<<<<<<<
 *                 if node2.split_dim == -1:  # 1 & 2 are leaves
 *                     lnode2 = node2
 */
      __pyx_v_lnode1 = __pyx_v_node1;

      /* "ckdtree.pyx":1926
 *             if node1.split_dim == -1:  # 1 is leaf node
 *                 lnode1 = node1
 *                 if node2.split_dim == -1:  # 1 & 2 are leaves             # <<<<<<<<<<<<<<
 *                     lnode2 = node2
 * 
 */
      __pyx_t_14 = ((__pyx_v_node2->split_dim == -1) != 0);
      if (__pyx_t_14) {

        /* "ckdtree.pyx":1927
 *                 lnode1 = node1
 *                 if node2.split_dim == -1:  # 1 & 2 are leaves
 *                     lnode2 = node2             # <<<<<<<<<<<<<<
 * 
 *                     # brute-force
 */
        __pyx_v_lnode2 = __pyx_v_node2;

        /* "ckdtree.pyx":1930
 * 
 *                     # brute-force
 *                     for i in range(lnode1.start_idx, lnode1.end_idx):             # <<<<<<<<<<<<<<
 *                         for j in range(lnode2.start_idx, lnode2.end_idx):
 *                             d = _distance_p(
 */
        __pyx_t_12 = __pyx_v_lnode1->end_idx;
        for (__pyx_t_13 = __pyx_v_lnode1->start_idx; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_i = __pyx_t_13;

          /* "ckdtree.pyx":1931
 *                     # brute-force
 *                     for i in range(lnode1.start_idx, lnode1.end_idx):
 *                         for j in range(lnode2.start_idx, lnode2.end_idx):             # <<<<<<<<<<<<<<
 *                             d = _distance_p(
 *                                 self.raw_data + self.raw_indices[i] * self.m,
 */
          __pyx_t_15 = __pyx_v_lnode2->end_idx;
          for (__pyx_t_16 = __pyx_v_lnode2->start_idx; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
            __pyx_v_j = __pyx_t_16;

            /* "ckdtree.pyx":1932
 *                     for i in range(lnode1.start_idx, lnode1.end_idx):
 *                         for j in range(lnode2.start_idx, lnode2.end_idx):
 *                             d = _distance_p(             # <<<<<<<<<<<<<<
 *                                 self.raw_data + self.raw_indices[i] * self.m,
 *                                 other.raw_data + other.raw_indices[j] * other.m,
 */
            __pyx_v_d = _distance_p((__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m)), (__pyx_v_other->raw_data + ((__pyx_v_other->raw_indices[__pyx_v_j]) * __pyx_v_other->m)), __pyx_v_tracker->p, __pyx_v_self->m, __pyx_v_tracker->max_distance);

            /* "ckdtree.pyx":1939
 *                             # than to generate a distance array, sort it, then
 *                             # search for all r's via binary search
 *                             for l in range(n_queries):             # <<<<<<<<<<<<<<
 *                                 if d <= r[idx[l]]:
 *                                     results[idx[l]] += 1
 */
            __pyx_t_17 = __pyx_v_n_queries;
            for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
              __pyx_v_l = __pyx_t_18;

              /* "ckdtree.pyx":1940
 *                             # search for all r's via binary search
 *                             for l in range(n_queries):
 *                                 if d <= r[idx[l]]:             # <<<<<<<<<<<<<<
 *                                     results[idx[l]] += 1
 * 
 */
              __pyx_t_14 = ((__pyx_v_d <= (__pyx_v_r[(__pyx_v_idx[__pyx_v_l])])) != 0);
              if (__pyx_t_14) {

                /* "ckdtree.pyx":1941
 *                             for l in range(n_queries):
 *                                 if d <= r[idx[l]]:
 *                                     results[idx[l]] += 1             # <<<<<<<<<<<<<<
 * 
 *                 else:  # 1 is a leaf node, 2 is inner node
 */
                __pyx_t_19 = (__pyx_v_idx[__pyx_v_l]);
                (__pyx_v_results[__pyx_t_19]) = ((__pyx_v_results[__pyx_t_19]) + 1);
                goto __pyx_L15;
              }
              __pyx_L15:;
            }
          }
        }
        goto __pyx_L8;
      }
      /*else*/ {

        /* "ckdtree.pyx":1944
 * 
 *                 else:  # 1 is a leaf node, 2 is inner node
 *                     tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1945
 *                 else:  # 1 is a leaf node, 2 is inner node
 *                     tracker.push_less_of(2, node2)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1, node2.less, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1948
 *                         other, n_queries, r, results, idx,
 *                         node1, node2.less, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                     tracker.push_greater_of(2, node2)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1950
 *                     tracker.pop()
 * 
 *                     tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1951
 * 
 *                     tracker.push_greater_of(2, node2)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1, node2.greater, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1954
 *                         other, n_queries, r, results, idx,
 *                         node1, node2.greater, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *             else:  # 1 is an inner node
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L8:;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "ckdtree.pyx":1957
 * 
 *             else:  # 1 is an inner node
 *                 if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node             # <<<<<<<<<<<<<<
 *                     tracker.push_less_of(1, node1)
 *                     self.__count_neighbors_traverse(
 */
      __pyx_t_14 = ((__pyx_v_node2->split_dim == -1) != 0);
      if (__pyx_t_14) {

        /* "ckdtree.pyx":1958
 *             else:  # 1 is an inner node
 *                 if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                     tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1959
 *                 if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                     tracker.push_less_of(1, node1)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1.less, node2, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1->less, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1962
 *                         other, n_queries, r, results, idx,
 *                         node1.less, node2, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                     tracker.push_greater_of(1, node1)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1964
 *                     tracker.pop()
 * 
 *                     tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1965
 * 
 *                     tracker.push_greater_of(1, node1)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1.greater, node2, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1->greater, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1968
 *                         other, n_queries, r, results, idx,
 *                         node1.greater, node2, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 else: # 1 and 2 are inner nodes
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L16;
      }
      /*else*/ {

        /* "ckdtree.pyx":1971
 * 
 *                 else: # 1 and 2 are inner nodes
 *                     tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                     tracker.push_less_of(2, node2)
 *                     self.__count_neighbors_traverse(
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1972
 *                 else: # 1 and 2 are inner nodes
 *                     tracker.push_less_of(1, node1)
 *                     tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1973
 *                     tracker.push_less_of(1, node1)
 *                     tracker.push_less_of(2, node2)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1.less, node2.less, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1->less, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1976
 *                         other, n_queries, r, results, idx,
 *                         node1.less, node2.less, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                     tracker.push_greater_of(2, node2)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1978
 *                     tracker.pop()
 * 
 *                     tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1979
 * 
 *                     tracker.push_greater_of(2, node2)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1.less, node2.greater, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1->less, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1982
 *                         other, n_queries, r, results, idx,
 *                         node1.less, node2.greater, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 *                     tracker.pop()
 * 
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1983
 *                         node1.less, node2.greater, tracker)
 *                     tracker.pop()
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                     tracker.push_greater_of(1, node1)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1985
 *                     tracker.pop()
 * 
 *                     tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                     tracker.push_less_of(2, node2)
 *                     self.__count_neighbors_traverse(
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1986
 * 
 *                     tracker.push_greater_of(1, node1)
 *                     tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1987
 *                     tracker.push_greater_of(1, node1)
 *                     tracker.push_less_of(2, node2)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1.greater, node2.less, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1->greater, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1990
 *                         other, n_queries, r, results, idx,
 *                         node1.greater, node2.less, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                     tracker.push_greater_of(2, node2)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1992
 *                     tracker.pop()
 * 
 *                     tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__count_neighbors_traverse(
 *                         other, n_queries, r, results, idx,
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1993
 * 
 *                     tracker.push_greater_of(2, node2)
 *                     self.__count_neighbors_traverse(             # <<<<<<<<<<<<<<
 *                         other, n_queries, r, results, idx,
 *                         node1.greater, node2.greater, tracker)
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, __pyx_v_r, __pyx_v_results, __pyx_v_idx, __pyx_v_node1->greater, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1996
 *                         other, n_queries, r, results, idx,
 *                         node1.greater, node2.greater, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 *                     tracker.pop()
 * 
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":1997
 *                         node1.greater, node2.greater, tracker)
 *                     tracker.pop()
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L16:;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "ckdtree.pyx":1999
 *                     tracker.pop()
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":1891
 *     # count_neighbors
 *     # ---------------
 *     cdef int __count_neighbors_traverse(cKDTree self,             # <<<<<<<<<<<<<<
 *                                         cKDTree other,
 *                                         np.intp_t     n_queries,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_inner_idx.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ckdtree.cKDTree.__count_neighbors_traverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_inner_idx.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_inner_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":2002
 * 
 *     @cython.boundscheck(False)
 *     def count_neighbors(cKDTree self, cKDTree other, object r, np.float64_t p=2.):             # <<<<<<<<<<<<<<
 *         """
 *         count_neighbors(self, other, r, p=2.)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_13count_neighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7ckdtree_7cKDTree_12count_neighbors[] = "\n        count_neighbors(self, other, r, p=2.)\n\n        Count how many nearby pairs can be formed.\n\n        Count the number of pairs (x1,x2) can be formed, with x1 drawn\n        from self and x2 drawn from `other`, and where\n        ``distance(x1, x2, p) <= r``.\n        This is the \"two-point correlation\" described in Gray and Moore 2000,\n        \"N-body problems in statistical learning\", and the code here is based\n        on their algorithm.\n\n        Parameters\n        ----------\n        other : KDTree instance\n            The other tree to draw points from.\n        r : float or one-dimensional array of floats\n            The radius to produce a count for. Multiple radii are searched with\n            a single tree traversal.\n        p : float, 1<=p<=infinity\n            Which Minkowski p-norm to use\n\n        Returns\n        -------\n        result : int or 1-D array of ints\n            The number of pairs. Note that this is internally stored in a numpy int,\n            and so may overflow if very large (2e9).\n\n        ";
static PyObject *__pyx_pw_7ckdtree_7cKDTree_13count_neighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct ckdtree *__pyx_v_other = 0;
  PyObject *__pyx_v_r = 0;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_neighbors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_r,&__pyx_n_s_p,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count_neighbors", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count_neighbors") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct ckdtree *)values[0]);
    __pyx_v_r = values[1];
    if (values[2]) {
      __pyx_v_p = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_p = ((__pyx_t_5numpy_float64_t)2.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_neighbors", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.count_neighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7ckdtree_cKDTree, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_12count_neighbors(((struct ckdtree *)__pyx_v_self), __pyx_v_other, __pyx_v_r, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_12count_neighbors(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, PyObject *__pyx_v_r, __pyx_t_5numpy_float64_t __pyx_v_p) {
  int __pyx_v_r_ndim;
  __pyx_t_5numpy_intp_t __pyx_v_n_queries;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  PyArrayObject *__pyx_v_real_r = 0;
  PyArrayObject *__pyx_v_results = 0;
  PyArrayObject *__pyx_v_idx = 0;
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx;
  __Pyx_Buffer __pyx_pybuffer_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_real_r;
  __Pyx_Buffer __pyx_pybuffer_real_r;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_results;
  __Pyx_Buffer __pyx_pybuffer_results;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_13;
  __pyx_t_5numpy_intp_t __pyx_t_14;
  __pyx_t_5numpy_intp_t __pyx_t_15;
  __pyx_t_5numpy_intp_t __pyx_t_16;
  __pyx_t_5numpy_intp_t __pyx_t_17;
  PyArrayObject *__pyx_t_18 = NULL;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_neighbors", 0);
  __pyx_pybuffer_real_r.pybuffer.buf = NULL;
  __pyx_pybuffer_real_r.refcount = 0;
  __pyx_pybuffernd_real_r.data = NULL;
  __pyx_pybuffernd_real_r.rcbuffer = &__pyx_pybuffer_real_r;
  __pyx_pybuffer_results.pybuffer.buf = NULL;
  __pyx_pybuffer_results.refcount = 0;
  __pyx_pybuffernd_results.data = NULL;
  __pyx_pybuffernd_results.rcbuffer = &__pyx_pybuffer_results;
  __pyx_pybuffer_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_idx.refcount = 0;
  __pyx_pybuffernd_idx.data = NULL;
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

  /* "ckdtree.pyx":2038
 * 
 *         # Make sure trees are compatible
 *         if self.m != other.m:             # <<<<<<<<<<<<<<
 *             raise ValueError("Trees passed to count_neighbors have different "
 *                              "dimensionality")
 */
  __pyx_t_1 = ((__pyx_v_self->m != __pyx_v_other->m) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2039
 *         # Make sure trees are compatible
 *         if self.m != other.m:
 *             raise ValueError("Trees passed to count_neighbors have different "             # <<<<<<<<<<<<<<
 *                              "dimensionality")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":2044
 *         # Make a copy of r array to ensure it's contiguous and to modify it
 *         # below
 *         r_ndim = len(np.shape(r))             # <<<<<<<<<<<<<<
 *         if r_ndim > 1:
 *             raise ValueError("r must be either a single value or a "
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_r);
    __Pyx_GIVEREF(__pyx_v_r);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_r);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_r_ndim = __pyx_t_6;

  /* "ckdtree.pyx":2045
 *         # below
 *         r_ndim = len(np.shape(r))
 *         if r_ndim > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("r must be either a single value or a "
 *                              "one-dimensional array of values")
 */
  __pyx_t_1 = ((__pyx_v_r_ndim > 1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2046
 *         r_ndim = len(np.shape(r))
 *         if r_ndim > 1:
 *             raise ValueError("r must be either a single value or a "             # <<<<<<<<<<<<<<
 *                              "one-dimensional array of values")
 *         real_r = np.array(r, ndmin=1, dtype=np.float64, copy=True)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":2048
 *             raise ValueError("r must be either a single value or a "
 *                              "one-dimensional array of values")
 *         real_r = np.array(r, ndmin=1, dtype=np.float64, copy=True)             # <<<<<<<<<<<<<<
 *         n_queries = real_r.shape[0]
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_r);
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_ndmin, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_copy, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_real_r.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_real_r.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_real_r.rcbuffer->pybuffer, (PyObject*)__pyx_v_real_r, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
    }
    __pyx_pybuffernd_real_r.diminfo[0].strides = __pyx_pybuffernd_real_r.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_real_r.diminfo[0].shape = __pyx_pybuffernd_real_r.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = 0;
  __pyx_v_real_r = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ckdtree.pyx":2049
 *                              "one-dimensional array of values")
 *         real_r = np.array(r, ndmin=1, dtype=np.float64, copy=True)
 *         n_queries = real_r.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         # Internally, we represent all distances as distance ** p
 */
  __pyx_v_n_queries = (__pyx_v_real_r->dimensions[0]);

  /* "ckdtree.pyx":2052
 * 
 *         # Internally, we represent all distances as distance ** p
 *         if p != infinity:             # <<<<<<<<<<<<<<
 *             for i in range(n_queries):
 *                 if real_r[i] != infinity:
 */
  __pyx_t_1 = ((__pyx_v_p != infinity) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2053
 *         # Internally, we represent all distances as distance ** p
 *         if p != infinity:
 *             for i in range(n_queries):             # <<<<<<<<<<<<<<
 *                 if real_r[i] != infinity:
 *                     real_r[i] = real_r[i] ** p
 */
    __pyx_t_13 = __pyx_v_n_queries;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_i = __pyx_t_14;

      /* "ckdtree.pyx":2054
 *         if p != infinity:
 *             for i in range(n_queries):
 *                 if real_r[i] != infinity:             # <<<<<<<<<<<<<<
 *                     real_r[i] = real_r[i] ** p
 * 
 */
      __pyx_t_15 = __pyx_v_i;
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_pybuffernd_real_r.diminfo[0].shape;
      __pyx_t_1 = (((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_real_r.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_real_r.diminfo[0].strides)) != infinity) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":2055
 *             for i in range(n_queries):
 *                 if real_r[i] != infinity:
 *                     real_r[i] = real_r[i] ** p             # <<<<<<<<<<<<<<
 * 
 *         # Track node-to-node min/max distances
 */
        __pyx_t_16 = __pyx_v_i;
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_pybuffernd_real_r.diminfo[0].shape;
        __pyx_t_17 = __pyx_v_i;
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_pybuffernd_real_r.diminfo[0].shape;
        *__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_real_r.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_real_r.diminfo[0].strides) = pow((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_real_r.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_real_r.diminfo[0].strides)), __pyx_v_p);
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "ckdtree.pyx":2058
 * 
 *         # Track node-to-node min/max distances
 *         tracker = RectRectDistanceTracker(Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *                                           Rectangle(other.mins, other.maxes),
 *                                           p, 0.0, 0.0)
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_self->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_v_self->maxes));
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ckdtree.pyx":2059
 *         # Track node-to-node min/max distances
 *         tracker = RectRectDistanceTracker(Rectangle(self.mins, self.maxes),
 *                                           Rectangle(other.mins, other.maxes),             # <<<<<<<<<<<<<<
 *                                           p, 0.0, 0.0)
 * 
 */
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_other->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other->mins));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_other->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_other->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other->maxes));
  PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_v_other->maxes));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ckdtree.pyx":2060
 *         tracker = RectRectDistanceTracker(Rectangle(self.mins, self.maxes),
 *                                           Rectangle(other.mins, other.maxes),
 *                                           p, 0.0, 0.0)             # <<<<<<<<<<<<<<
 * 
 *         # Go!
 */
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "ckdtree.pyx":2058
 * 
 *         # Track node-to-node min/max distances
 *         tracker = RectRectDistanceTracker(Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *                                           Rectangle(other.mins, other.maxes),
 *                                           p, 0.0, 0.0)
 */
  __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_float_0_0);
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_RectRectDistanceTracker)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_tracker = ((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ckdtree.pyx":2063
 * 
 *         # Go!
 *         results = np.zeros(n_queries, dtype=np.intp)             # <<<<<<<<<<<<<<
 *         idx = np.arange(n_queries, dtype=np.intp)
 *         self.__count_neighbors_traverse(other, n_queries,
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_queries); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_results.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_results.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_results.rcbuffer->pybuffer, (PyObject*)__pyx_v_results, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      }
    }
    __pyx_pybuffernd_results.diminfo[0].strides = __pyx_pybuffernd_results.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_results.diminfo[0].shape = __pyx_pybuffernd_results.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_18 = 0;
  __pyx_v_results = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ckdtree.pyx":2064
 *         # Go!
 *         results = np.zeros(n_queries, dtype=np.intp)
 *         idx = np.arange(n_queries, dtype=np.intp)             # <<<<<<<<<<<<<<
 *         self.__count_neighbors_traverse(other, n_queries,
 *                                         &real_r[0], &results[0], &idx[0],
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_arange); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_queries); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intp); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_intp_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
    }
    __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_18 = 0;
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":2066
 *         idx = np.arange(n_queries, dtype=np.intp)
 *         self.__count_neighbors_traverse(other, n_queries,
 *                                         &real_r[0], &results[0], &idx[0],             # <<<<<<<<<<<<<<
 *                                         self.ctree, other.ctree,
 *                                         tracker)
 */
  __pyx_t_19 = 0;
  if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_pybuffernd_real_r.diminfo[0].shape;
  __pyx_t_20 = 0;
  if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_pybuffernd_results.diminfo[0].shape;
  __pyx_t_21 = 0;
  if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_pybuffernd_idx.diminfo[0].shape;

  /* "ckdtree.pyx":2065
 *         results = np.zeros(n_queries, dtype=np.intp)
 *         idx = np.arange(n_queries, dtype=np.intp)
 *         self.__count_neighbors_traverse(other, n_queries,             # <<<<<<<<<<<<<<
 *                                         &real_r[0], &results[0], &idx[0],
 *                                         self.ctree, other.ctree,
 */
  __pyx_t_9 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___count_neighbors_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_n_queries, (&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_real_r.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_real_r.diminfo[0].strides))), (&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_results.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_results.diminfo[0].strides))), (&(*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_idx.diminfo[0].strides))), __pyx_v_self->ctree, __pyx_v_other->ctree, __pyx_v_tracker); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":2070
 *                                         tracker)
 * 
 *         if r_ndim == 0:             # <<<<<<<<<<<<<<
 *             if results[0] <= <np.intp_t> LONG_MAX:
 *                 return int(results[0])
 */
  __pyx_t_1 = ((__pyx_v_r_ndim == 0) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2071
 * 
 *         if r_ndim == 0:
 *             if results[0] <= <np.intp_t> LONG_MAX:             # <<<<<<<<<<<<<<
 *                 return int(results[0])
 *             else:
 */
    __pyx_t_22 = 0;
    if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_pybuffernd_results.diminfo[0].shape;
    __pyx_t_1 = (((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_results.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_results.diminfo[0].strides)) <= ((__pyx_t_5numpy_intp_t)LONG_MAX)) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":2072
 *         if r_ndim == 0:
 *             if results[0] <= <np.intp_t> LONG_MAX:
 *                 return int(results[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 return results[0]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_23 = 0;
      if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_pybuffernd_results.diminfo[0].shape;
      __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_results.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_results.diminfo[0].strides))); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "ckdtree.pyx":2074
 *                 return int(results[0])
 *             else:
 *                 return results[0]             # <<<<<<<<<<<<<<
 *         else:
 *             return results
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_24 = 0;
      if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_pybuffernd_results.diminfo[0].shape;
      __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_intp_t *, __pyx_pybuffernd_results.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_results.diminfo[0].strides))); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "ckdtree.pyx":2076
 *                 return results[0]
 *         else:
 *             return results             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_results));
    __pyx_r = ((PyObject *)__pyx_v_results);
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":2002
 * 
 *     @cython.boundscheck(False)
 *     def count_neighbors(cKDTree self, cKDTree other, object r, np.float64_t p=2.):             # <<<<<<<<<<<<<<
 *         """
 *         count_neighbors(self, other, r, p=2.)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_real_r.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_results.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("ckdtree.cKDTree.count_neighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_real_r.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_results.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_real_r);
  __Pyx_XDECREF((PyObject *)__pyx_v_results);
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);
  __Pyx_XDECREF((PyObject *)__pyx_v_tracker);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":2081
 *     # sparse_distance_matrix
 *     # ----------------------
 *     cdef int __sparse_distance_matrix_traverse(cKDTree self, cKDTree other,             # <<<<<<<<<<<<<<
 *                                                coo_entries results,
 *                                                ckdtreenode *node1, ckdtreenode *node2,
 */

static int __pyx_f_7ckdtree_7cKDTree___sparse_distance_matrix_traverse(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_results, struct ckdtreenode *__pyx_v_node1, struct ckdtreenode *__pyx_v_node2, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker) {
  struct ckdtreenode *__pyx_v_lnode1;
  struct ckdtreenode *__pyx_v_lnode2;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_intp_t __pyx_v_i;
  __pyx_t_5numpy_intp_t __pyx_v_j;
  __pyx_t_5numpy_intp_t __pyx_v_min_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_intp_t __pyx_t_2;
  __pyx_t_5numpy_intp_t __pyx_t_3;
  __pyx_t_5numpy_intp_t __pyx_t_4;
  __pyx_t_5numpy_intp_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sparse_distance_matrix_traverse", 0);

  /* "ckdtree.pyx":2091
 *         cdef np.intp_t i, j, min_j
 * 
 *         if tracker.min_distance > tracker.upper_bound:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif node1.split_dim == -1:  # 1 is leaf node
 */
  __pyx_t_1 = ((__pyx_v_tracker->min_distance > __pyx_v_tracker->upper_bound) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2092
 * 
 *         if tracker.min_distance > tracker.upper_bound:
 *             return 0             # <<<<<<<<<<<<<<
 *         elif node1.split_dim == -1:  # 1 is leaf node
 *             lnode1 = node1
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "ckdtree.pyx":2093
 *         if tracker.min_distance > tracker.upper_bound:
 *             return 0
 *         elif node1.split_dim == -1:  # 1 is leaf node             # <<<<<<<<<<<<<<
 *             lnode1 = node1
 * 
 */
  __pyx_t_1 = ((__pyx_v_node1->split_dim == -1) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2094
 *             return 0
 *         elif node1.split_dim == -1:  # 1 is leaf node
 *             lnode1 = node1             # <<<<<<<<<<<<<<
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves
 */
    __pyx_v_lnode1 = __pyx_v_node1;

    /* "ckdtree.pyx":2096
 *             lnode1 = node1
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves             # <<<<<<<<<<<<<<
 *                 lnode2 = node2
 * 
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":2097
 * 
 *             if node2.split_dim == -1:  # 1 & 2 are leaves
 *                 lnode2 = node2             # <<<<<<<<<<<<<<
 * 
 *                 # brute-force
 */
      __pyx_v_lnode2 = __pyx_v_node2;

      /* "ckdtree.pyx":2100
 * 
 *                 # brute-force
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):             # <<<<<<<<<<<<<<
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:
 */
      __pyx_t_2 = __pyx_v_lnode1->end_idx;
      for (__pyx_t_3 = __pyx_v_lnode1->start_idx; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "ckdtree.pyx":2102
 *                 for i in range(lnode1.start_idx, lnode1.end_idx):
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:             # <<<<<<<<<<<<<<
 *                         min_j = i+1
 *                     else:
 */
        __pyx_t_1 = ((__pyx_v_node1 == __pyx_v_node2) != 0);
        if (__pyx_t_1) {

          /* "ckdtree.pyx":2103
 *                     # Special care here to avoid duplicate pairs
 *                     if node1 == node2:
 *                         min_j = i+1             # <<<<<<<<<<<<<<
 *                     else:
 *                         min_j = lnode2.start_idx
 */
          __pyx_v_min_j = (__pyx_v_i + 1);
          goto __pyx_L7;
        }
        /*else*/ {

          /* "ckdtree.pyx":2105
 *                         min_j = i+1
 *                     else:
 *                         min_j = lnode2.start_idx             # <<<<<<<<<<<<<<
 * 
 *                     for j in range(min_j, lnode2.end_idx):
 */
          __pyx_t_4 = __pyx_v_lnode2->start_idx;
          __pyx_v_min_j = __pyx_t_4;
        }
        __pyx_L7:;

        /* "ckdtree.pyx":2107
 *                         min_j = lnode2.start_idx
 * 
 *                     for j in range(min_j, lnode2.end_idx):             # <<<<<<<<<<<<<<
 *                         d = _distance_p(
 *                             self.raw_data + self.raw_indices[i] * self.m,
 */
        __pyx_t_4 = __pyx_v_lnode2->end_idx;
        for (__pyx_t_5 = __pyx_v_min_j; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_j = __pyx_t_5;

          /* "ckdtree.pyx":2108
 * 
 *                     for j in range(min_j, lnode2.end_idx):
 *                         d = _distance_p(             # <<<<<<<<<<<<<<
 *                             self.raw_data + self.raw_indices[i] * self.m,
 *                             other.raw_data + other.raw_indices[j] * self.m,
 */
          __pyx_v_d = _distance_p((__pyx_v_self->raw_data + ((__pyx_v_self->raw_indices[__pyx_v_i]) * __pyx_v_self->m)), (__pyx_v_other->raw_data + ((__pyx_v_other->raw_indices[__pyx_v_j]) * __pyx_v_self->m)), __pyx_v_tracker->p, __pyx_v_self->m, __pyx_v_tracker->upper_bound);

          /* "ckdtree.pyx":2112
 *                             other.raw_data + other.raw_indices[j] * self.m,
 *                             tracker.p, self.m, tracker.upper_bound)
 *                         if d <= tracker.upper_bound:             # <<<<<<<<<<<<<<
 *                             if tracker.p != 1 and tracker.p != infinity:
 *                                 d = d**(1. / tracker.p)
 */
          __pyx_t_1 = ((__pyx_v_d <= __pyx_v_tracker->upper_bound) != 0);
          if (__pyx_t_1) {

            /* "ckdtree.pyx":2113
 *                             tracker.p, self.m, tracker.upper_bound)
 *                         if d <= tracker.upper_bound:
 *                             if tracker.p != 1 and tracker.p != infinity:             # <<<<<<<<<<<<<<
 *                                 d = d**(1. / tracker.p)
 *                             results.add(self.raw_indices[i],
 */
            __pyx_t_6 = ((__pyx_v_tracker->p != 1.0) != 0);
            if (__pyx_t_6) {
            } else {
              __pyx_t_1 = __pyx_t_6;
              goto __pyx_L12_bool_binop_done;
            }
            __pyx_t_6 = ((__pyx_v_tracker->p != infinity) != 0);
            __pyx_t_1 = __pyx_t_6;
            __pyx_L12_bool_binop_done:;
            if (__pyx_t_1) {

              /* "ckdtree.pyx":2114
 *                         if d <= tracker.upper_bound:
 *                             if tracker.p != 1 and tracker.p != infinity:
 *                                 d = d**(1. / tracker.p)             # <<<<<<<<<<<<<<
 *                             results.add(self.raw_indices[i],
 *                                         other.raw_indices[j], d)
 */
              if (unlikely(__pyx_v_tracker->p == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_v_d = pow(__pyx_v_d, (1. / __pyx_v_tracker->p));
              goto __pyx_L11;
            }
            __pyx_L11:;

            /* "ckdtree.pyx":2115
 *                             if tracker.p != 1 and tracker.p != infinity:
 *                                 d = d**(1. / tracker.p)
 *                             results.add(self.raw_indices[i],             # <<<<<<<<<<<<<<
 *                                         other.raw_indices[j], d)
 *                             if node1 == node2:
 */
            __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_coo_entries *)__pyx_v_results->__pyx_vtab)->add(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_i]), (__pyx_v_other->raw_indices[__pyx_v_j]), __pyx_v_d); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

            /* "ckdtree.pyx":2117
 *                             results.add(self.raw_indices[i],
 *                                         other.raw_indices[j], d)
 *                             if node1 == node2:             # <<<<<<<<<<<<<<
 *                                 results.add(self.raw_indices[j],
 *                                             other.raw_indices[i], d)
 */
            __pyx_t_1 = ((__pyx_v_node1 == __pyx_v_node2) != 0);
            if (__pyx_t_1) {

              /* "ckdtree.pyx":2118
 *                                         other.raw_indices[j], d)
 *                             if node1 == node2:
 *                                 results.add(self.raw_indices[j],             # <<<<<<<<<<<<<<
 *                                             other.raw_indices[i], d)
 * 
 */
              __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_coo_entries *)__pyx_v_results->__pyx_vtab)->add(__pyx_v_results, (__pyx_v_self->raw_indices[__pyx_v_j]), (__pyx_v_other->raw_indices[__pyx_v_i]), __pyx_v_d); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              goto __pyx_L14;
            }
            __pyx_L14:;
            goto __pyx_L10;
          }
          __pyx_L10:;
        }
      }
      goto __pyx_L4;
    }
    /*else*/ {

      /* "ckdtree.pyx":2122
 * 
 *             else:  # 1 is a leaf node, 2 is inner node
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1, node2.less, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2123
 *             else:  # 1 is a leaf node, 2 is inner node
 *                 tracker.push_less_of(2, node2)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2125
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2127
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1, node2.greater, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2128
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2130
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         else:  # 1 is an inner node
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "ckdtree.pyx":2133
 * 
 *         else:  # 1 is an inner node
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(1, node1)
 *                 self.__sparse_distance_matrix_traverse(
 */
    __pyx_t_1 = ((__pyx_v_node2->split_dim == -1) != 0);
    if (__pyx_t_1) {

      /* "ckdtree.pyx":2134
 *         else:  # 1 is an inner node
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                 tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.less, node2, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2135
 *             if node2.split_dim == -1:  # 1 is an inner node, 2 is a leaf node
 *                 tracker.push_less_of(1, node1)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1.less, node2, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2137
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.less, node2, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(1, node1)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2139
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.greater, node2, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2140
 * 
 *                 tracker.push_greater_of(1, node1)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1.greater, node2, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2142
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.greater, node2, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *             else: # 1 and 2 are inner nodes
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L15;
    }
    /*else*/ {

      /* "ckdtree.pyx":2145
 * 
 *             else: # 1 and 2 are inner nodes
 *                 tracker.push_less_of(1, node1)             # <<<<<<<<<<<<<<
 *                 tracker.push_less_of(2, node2)
 *                 self.__sparse_distance_matrix_traverse(
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2146
 *             else: # 1 and 2 are inner nodes
 *                 tracker.push_less_of(1, node1)
 *                 tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.less, node2.less, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2147
 *                 tracker.push_less_of(1, node1)
 *                 tracker.push_less_of(2, node2)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1.less, node2.less, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2149
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.less, node2.less, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2151
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.less, node2.greater, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2152
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1.less, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->less, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2154
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.less, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 *                 tracker.pop()
 * 
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2155
 *                     other, results, node1.less, node2.greater, tracker)
 *                 tracker.pop()
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(1, node1)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2157
 *                 tracker.pop()
 * 
 *                 tracker.push_greater_of(1, node1)             # <<<<<<<<<<<<<<
 *                 if node1 != node2:
 *                     # Avoid traversing (node1.less, node2.greater) and
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 1, __pyx_v_node1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2158
 * 
 *                 tracker.push_greater_of(1, node1)
 *                 if node1 != node2:             # <<<<<<<<<<<<<<
 *                     # Avoid traversing (node1.less, node2.greater) and
 *                     # (node1.greater, node2.less) (it's the same node pair
 */
      __pyx_t_1 = ((__pyx_v_node1 != __pyx_v_node2) != 0);
      if (__pyx_t_1) {

        /* "ckdtree.pyx":2163
 *                     # twice over, which is the source of the complication in
 *                     # the original KDTree.sparse_distance_matrix)
 *                     tracker.push_less_of(2, node2)             # <<<<<<<<<<<<<<
 *                     self.__sparse_distance_matrix_traverse(
 *                         other, results, node1.greater, node2.less, tracker)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":2164
 *                     # the original KDTree.sparse_distance_matrix)
 *                     tracker.push_less_of(2, node2)
 *                     self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                         other, results, node1.greater, node2.less, tracker)
 *                     tracker.pop()
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->less, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "ckdtree.pyx":2166
 *                     self.__sparse_distance_matrix_traverse(
 *                         other, results, node1.greater, node2.less, tracker)
 *                     tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *                 tracker.push_greater_of(2, node2)
 */
        __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L16;
      }
      __pyx_L16:;

      /* "ckdtree.pyx":2168
 *                     tracker.pop()
 * 
 *                 tracker.push_greater_of(2, node2)             # <<<<<<<<<<<<<<
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.greater, node2.greater, tracker)
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of(__pyx_v_tracker, 2, __pyx_v_node2); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2169
 * 
 *                 tracker.push_greater_of(2, node2)
 *                 self.__sparse_distance_matrix_traverse(             # <<<<<<<<<<<<<<
 *                     other, results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_node1->greater, __pyx_v_node2->greater, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2171
 *                 self.__sparse_distance_matrix_traverse(
 *                     other, results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 *                 tracker.pop()
 * 
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "ckdtree.pyx":2172
 *                     other, results, node1.greater, node2.greater, tracker)
 *                 tracker.pop()
 *                 tracker.pop()             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
      __pyx_t_7 = __pyx_f_7ckdtree_23RectRectDistanceTracker_pop(__pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L15:;
  }
  __pyx_L3:;

  /* "ckdtree.pyx":2174
 *                 tracker.pop()
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":2081
 *     # sparse_distance_matrix
 *     # ----------------------
 *     cdef int __sparse_distance_matrix_traverse(cKDTree self, cKDTree other,             # <<<<<<<<<<<<<<
 *                                                coo_entries results,
 *                                                ckdtreenode *node1, ckdtreenode *node2,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.__sparse_distance_matrix_traverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":2177
 * 
 * 
 *     def sparse_distance_matrix(cKDTree self, cKDTree other,             # <<<<<<<<<<<<<<
 *                                np.float64_t max_distance,
 *                                np.float64_t p=2.):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_15sparse_distance_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7ckdtree_7cKDTree_14sparse_distance_matrix[] = "\n        sparse_distance_matrix(self, other, max_distance, p=2.)\n\n        Compute a sparse distance matrix\n\n        Computes a distance matrix between two KDTrees, leaving as zero\n        any distance greater than max_distance.\n\n        Parameters\n        ----------\n        other : cKDTree\n\n        max_distance : positive float\n        \n        p : float, 1<=p<=infinity\n            Which Minkowski p-norm to use. \n\n        Returns\n        -------\n        result : dok_matrix\n            Sparse matrix representing the results in \"dictionary of keys\" format.\n            FIXME: Internally, built as a COO matrix, it would be more\n            efficient to return this COO matrix.\n\n        ";
static PyObject *__pyx_pw_7ckdtree_7cKDTree_15sparse_distance_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct ckdtree *__pyx_v_other = 0;
  __pyx_t_5numpy_float64_t __pyx_v_max_distance;
  __pyx_t_5numpy_float64_t __pyx_v_p;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sparse_distance_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_max_distance,&__pyx_n_s_p,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_distance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sparse_distance_matrix", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sparse_distance_matrix") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct ckdtree *)values[0]);
    __pyx_v_max_distance = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_max_distance == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_p = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_p == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_p = ((__pyx_t_5numpy_float64_t)2.);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sparse_distance_matrix", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("ckdtree.cKDTree.sparse_distance_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7ckdtree_cKDTree, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_14sparse_distance_matrix(((struct ckdtree *)__pyx_v_self), __pyx_v_other, __pyx_v_max_distance, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_14sparse_distance_matrix(struct ckdtree *__pyx_v_self, struct ckdtree *__pyx_v_other, __pyx_t_5numpy_float64_t __pyx_v_max_distance, __pyx_t_5numpy_float64_t __pyx_v_p) {
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *__pyx_v_tracker = NULL;
  struct __pyx_obj_7ckdtree_coo_entries *__pyx_v_results = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sparse_distance_matrix", 0);

  /* "ckdtree.pyx":2207
 * 
 *         # Make sure trees are compatible
 *         if self.m != other.m:             # <<<<<<<<<<<<<<
 *             raise ValueError("Trees passed to sparse_distance_matrix have "
 *                              "different dimensionality")
 */
  __pyx_t_1 = ((__pyx_v_self->m != __pyx_v_other->m) != 0);
  if (__pyx_t_1) {

    /* "ckdtree.pyx":2208
 *         # Make sure trees are compatible
 *         if self.m != other.m:
 *             raise ValueError("Trees passed to sparse_distance_matrix have "             # <<<<<<<<<<<<<<
 *                              "different dimensionality")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "ckdtree.pyx":2213
 *         # Calculate mins and maxes to outer box
 *         tracker = RectRectDistanceTracker(
 *             Rectangle(self.mins, self.maxes),             # <<<<<<<<<<<<<<
 *             Rectangle(other.mins, other.maxes),
 *             p, 0, max_distance)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->maxes));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":2214
 *         tracker = RectRectDistanceTracker(
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(other.mins, other.maxes),             # <<<<<<<<<<<<<<
 *             p, 0, max_distance)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_other->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other->mins));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_other->mins));
  __Pyx_INCREF(((PyObject *)__pyx_v_other->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_other->maxes));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_other->maxes));
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_Rectangle)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":2215
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(other.mins, other.maxes),
 *             p, 0, max_distance)             # <<<<<<<<<<<<<<
 * 
 *         results = coo_entries()
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_max_distance); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "ckdtree.pyx":2212
 * 
 *         # Calculate mins and maxes to outer box
 *         tracker = RectRectDistanceTracker(             # <<<<<<<<<<<<<<
 *             Rectangle(self.mins, self.maxes),
 *             Rectangle(other.mins, other.maxes),
 */
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_RectRectDistanceTracker)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_tracker = ((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":2217
 *             p, 0, max_distance)
 * 
 *         results = coo_entries()             # <<<<<<<<<<<<<<
 *         self.__sparse_distance_matrix_traverse(other, results,
 *                                                self.ctree, other.ctree,
 */
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_coo_entries)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_results = ((struct __pyx_obj_7ckdtree_coo_entries *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "ckdtree.pyx":2218
 * 
 *         results = coo_entries()
 *         self.__sparse_distance_matrix_traverse(other, results,             # <<<<<<<<<<<<<<
 *                                                self.ctree, other.ctree,
 *                                                tracker)
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->__pyx___sparse_distance_matrix_traverse(__pyx_v_self, __pyx_v_other, __pyx_v_results, __pyx_v_self->ctree, __pyx_v_other->ctree, __pyx_v_tracker); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":2222
 *                                                tracker)
 * 
 *         return results.to_matrix(shape=(self.n, other.n)).todok()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_results), __pyx_n_s_to_matrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_other->n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_shape, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_todok); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":2177
 * 
 * 
 *     def sparse_distance_matrix(cKDTree self, cKDTree other,             # <<<<<<<<<<<<<<
 *                                np.float64_t max_distance,
 *                                np.float64_t p=2.):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ckdtree.cKDTree.sparse_distance_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tracker);
  __Pyx_XDECREF((PyObject *)__pyx_v_results);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":2225
 * 
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (new_object, (cKDTree,), self.__getstate__())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_17__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_17__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_16__reduce__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_16__reduce__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "ckdtree.pyx":2226
 * 
 *     def __reduce__(self):
 *         return (new_object, (cKDTree,), self.__getstate__())             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(cKDTree self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_new_object); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTree)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTree)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTree)));
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ckdtree.pyx":2225
 * 
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (new_object, (cKDTree,), self.__getstate__())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ckdtree.cKDTree.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":2228
 *         return (new_object, (cKDTree,), self.__getstate__())
 * 
 *     def __getstate__(cKDTree self):             # <<<<<<<<<<<<<<
 *         cdef object state
 *         cdef object tree = pickle_tree_buffer(self.tree_buffer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_19__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_19__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_18__getstate__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_18__getstate__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v_tree = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "ckdtree.pyx":2230
 *     def __getstate__(cKDTree self):
 *         cdef object state
 *         cdef object tree = pickle_tree_buffer(self.tree_buffer)             # <<<<<<<<<<<<<<
 *         state = (tree, self.data.copy(), self.n, self.m, self.leafsize,
 *                       self.maxes, self.mins, self.indices.copy())
 */
  __pyx_t_1 = pickle_tree_buffer(__pyx_v_self->tree_buffer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tree = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ckdtree.pyx":2231
 *         cdef object state
 *         cdef object tree = pickle_tree_buffer(self.tree_buffer)
 *         state = (tree, self.data.copy(), self.n, self.m, self.leafsize,             # <<<<<<<<<<<<<<
 *                       self.maxes, self.mins, self.indices.copy())
 *         return state
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->data), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->leafsize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "ckdtree.pyx":2232
 *         cdef object tree = pickle_tree_buffer(self.tree_buffer)
 *         state = (tree, self.data.copy(), self.n, self.m, self.leafsize,
 *                       self.maxes, self.mins, self.indices.copy())             # <<<<<<<<<<<<<<
 *         return state
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->indices), __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "ckdtree.pyx":2231
 *         cdef object state
 *         cdef object tree = pickle_tree_buffer(self.tree_buffer)
 *         state = (tree, self.data.copy(), self.n, self.m, self.leafsize,             # <<<<<<<<<<<<<<
 *                       self.maxes, self.mins, self.indices.copy())
 *         return state
 */
  __pyx_t_6 = PyTuple_New(8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_tree);
  __Pyx_GIVEREF(__pyx_v_tree);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_tree);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxes));
  PyTuple_SET_ITEM(__pyx_t_6, 5, ((PyObject *)__pyx_v_self->maxes));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mins));
  PyTuple_SET_ITEM(__pyx_t_6, 6, ((PyObject *)__pyx_v_self->mins));
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_state = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "ckdtree.pyx":2233
 *         state = (tree, self.data.copy(), self.n, self.m, self.leafsize,
 *                       self.maxes, self.mins, self.indices.copy())
 *         return state             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(cKDTree self, state):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_state);
  __pyx_r = __pyx_v_state;
  goto __pyx_L0;

  /* "ckdtree.pyx":2228
 *         return (new_object, (cKDTree,), self.__getstate__())
 * 
 *     def __getstate__(cKDTree self):             # <<<<<<<<<<<<<<
 *         cdef object state
 *         cdef object tree = pickle_tree_buffer(self.tree_buffer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ckdtree.cKDTree.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":2235
 *         return state
 * 
 *     def __setstate__(cKDTree self, state):             # <<<<<<<<<<<<<<
 *         cdef object tree
 *         self.tree_buffer = new vector[ckdtreenode]()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_21__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_21__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_20__setstate__(((struct ckdtree *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_20__setstate__(struct ckdtree *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_tree = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<struct ckdtreenode>  *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  __pyx_t_5numpy_intp_t __pyx_t_12;
  __pyx_t_5numpy_intp_t __pyx_t_13;
  __pyx_t_5numpy_intp_t __pyx_t_14;
  int __pyx_t_15;
  struct ckdtreenode *__pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "ckdtree.pyx":2237
 *     def __setstate__(cKDTree self, state):
 *         cdef object tree
 *         self.tree_buffer = new vector[ckdtreenode]()             # <<<<<<<<<<<<<<
 * 
 *         # unpack the state
 */
  try {
    __pyx_t_1 = new std::vector<struct ckdtreenode> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->tree_buffer = __pyx_t_1;

  /* "ckdtree.pyx":2241
 *         # unpack the state
 *         (tree, self.data, self.n, self.m, self.leafsize,
 *             self.maxes, self.mins, self.indices) = state             # <<<<<<<<<<<<<<
 * 
 *         # copy kd-tree buffer
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_state))) || (PyList_CheckExact(__pyx_v_state))) {
    PyObject* sequence = __pyx_v_state;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 8)) {
      if (size > 8) __Pyx_RaiseTooManyValuesError(8);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 6); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 7); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 6); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 7); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_9);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[8] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      for (i=0; i < 8; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[8] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
    __pyx_t_10 = PyObject_GetIter(__pyx_v_state); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
    for (index=0; index < 8; index++) {
      PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }

  /* "ckdtree.pyx":2240
 * 
 *         # unpack the state
 *         (tree, self.data, self.n, self.m, self.leafsize,             # <<<<<<<<<<<<<<
 *             self.maxes, self.mins, self.indices) = state
 * 
 */
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_4); if (unlikely((__pyx_t_12 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_5); if (unlikely((__pyx_t_13 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_6); if (unlikely((__pyx_t_14 == (npy_intp)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tree = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->data));
  __pyx_v_self->data = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_self->n = __pyx_t_12;
  __pyx_v_self->m = __pyx_t_13;
  __pyx_v_self->leafsize = __pyx_t_14;

  /* "ckdtree.pyx":2241
 *         # unpack the state
 *         (tree, self.data, self.n, self.m, self.leafsize,
 *             self.maxes, self.mins, self.indices) = state             # <<<<<<<<<<<<<<
 * 
 *         # copy kd-tree buffer
 */
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->maxes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->maxes));
  __pyx_v_self->maxes = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->mins);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mins));
  __pyx_v_self->mins = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->indices);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->indices));
  __pyx_v_self->indices = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ckdtree.pyx":2244
 * 
 *         # copy kd-tree buffer
 *         unpickle_tree_buffer(self.tree_buffer, tree)             # <<<<<<<<<<<<<<
 * 
 *         # set raw pointers
 */
  __pyx_t_9 = unpickle_tree_buffer(__pyx_v_self->tree_buffer, __pyx_v_tree); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ckdtree.pyx":2247
 * 
 *         # set raw pointers
 *         self.raw_data = <np.float64_t*>np.PyArray_DATA(self.data)             # <<<<<<<<<<<<<<
 *         self.raw_maxes = <np.float64_t*>np.PyArray_DATA(self.maxes)
 *         self.raw_mins = <np.float64_t*>np.PyArray_DATA(self.mins)
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->data);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_v_self->raw_data = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_9)));
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ckdtree.pyx":2248
 *         # set raw pointers
 *         self.raw_data = <np.float64_t*>np.PyArray_DATA(self.data)
 *         self.raw_maxes = <np.float64_t*>np.PyArray_DATA(self.maxes)             # <<<<<<<<<<<<<<
 *         self.raw_mins = <np.float64_t*>np.PyArray_DATA(self.mins)
 *         self.raw_indices = <np.intp_t*>np.PyArray_DATA(self.indices)
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->maxes);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_v_self->raw_maxes = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_9)));
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ckdtree.pyx":2249
 *         self.raw_data = <np.float64_t*>np.PyArray_DATA(self.data)
 *         self.raw_maxes = <np.float64_t*>np.PyArray_DATA(self.maxes)
 *         self.raw_mins = <np.float64_t*>np.PyArray_DATA(self.mins)             # <<<<<<<<<<<<<<
 *         self.raw_indices = <np.intp_t*>np.PyArray_DATA(self.indices)
 * 
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->mins);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_v_self->raw_mins = ((__pyx_t_5numpy_float64_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_9)));
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ckdtree.pyx":2250
 *         self.raw_maxes = <np.float64_t*>np.PyArray_DATA(self.maxes)
 *         self.raw_mins = <np.float64_t*>np.PyArray_DATA(self.mins)
 *         self.raw_indices = <np.intp_t*>np.PyArray_DATA(self.indices)             # <<<<<<<<<<<<<<
 * 
 *         # set up the tree structure pointers
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->indices);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_v_self->raw_indices = ((__pyx_t_5numpy_intp_t *)PyArray_DATA(((PyArrayObject *)__pyx_t_9)));
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ckdtree.pyx":2253
 * 
 *         # set up the tree structure pointers
 *         self.ctree = tree_buffer_root(self.tree_buffer)             # <<<<<<<<<<<<<<
 *         self._post_init(self.ctree)
 * 
 */
  __pyx_v_self->ctree = tree_buffer_root(__pyx_v_self->tree_buffer);

  /* "ckdtree.pyx":2254
 *         # set up the tree structure pointers
 *         self.ctree = tree_buffer_root(self.tree_buffer)
 *         self._post_init(self.ctree)             # <<<<<<<<<<<<<<
 * 
 *         # make the tree viewable from Python
 */
  __pyx_t_15 = ((struct __pyx_vtabstruct_7ckdtree_cKDTree *)__pyx_v_self->__pyx_vtab)->_post_init(__pyx_v_self, __pyx_v_self->ctree); if (unlikely(__pyx_t_15 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":2257
 * 
 *         # make the tree viewable from Python
 *         self.tree = cKDTreeNode()             # <<<<<<<<<<<<<<
 *         self.tree._node = self.ctree
 *         self.tree._data = self.data
 */
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7ckdtree_cKDTreeNode)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->tree);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tree));
  __pyx_v_self->tree = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ckdtree.pyx":2258
 *         # make the tree viewable from Python
 *         self.tree = cKDTreeNode()
 *         self.tree._node = self.ctree             # <<<<<<<<<<<<<<
 *         self.tree._data = self.data
 *         self.tree._indices = self.indices
 */
  __pyx_t_16 = __pyx_v_self->ctree;
  __pyx_v_self->tree->_node = __pyx_t_16;

  /* "ckdtree.pyx":2259
 *         self.tree = cKDTreeNode()
 *         self.tree._node = self.ctree
 *         self.tree._data = self.data             # <<<<<<<<<<<<<<
 *         self.tree._indices = self.indices
 *         self.tree.level = 0
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->data);
  __Pyx_INCREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->tree->_data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tree->_data));
  __pyx_v_self->tree->_data = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ckdtree.pyx":2260
 *         self.tree._node = self.ctree
 *         self.tree._data = self.data
 *         self.tree._indices = self.indices             # <<<<<<<<<<<<<<
 *         self.tree.level = 0
 *         self.tree._setup()
 */
  __pyx_t_9 = ((PyObject *)__pyx_v_self->indices);
  __Pyx_INCREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->tree->_indices);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tree->_indices));
  __pyx_v_self->tree->_indices = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "ckdtree.pyx":2261
 *         self.tree._data = self.data
 *         self.tree._indices = self.indices
 *         self.tree.level = 0             # <<<<<<<<<<<<<<
 *         self.tree._setup()
 * 
 */
  __pyx_v_self->tree->level = 0;

  /* "ckdtree.pyx":2262
 *         self.tree._indices = self.indices
 *         self.tree.level = 0
 *         self.tree._setup()             # <<<<<<<<<<<<<<
 * 
 */
  ((struct __pyx_vtabstruct_7ckdtree_cKDTreeNode *)__pyx_v_self->tree->__pyx_vtab)->_setup(__pyx_v_self->tree);

  /* "ckdtree.pyx":2235
 *         return state
 * 
 *     def __setstate__(cKDTree self, state):             # <<<<<<<<<<<<<<
 *         cdef object tree
 *         self.tree_buffer = new vector[ckdtreenode]()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ckdtree.cKDTree.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":868
 *         vector[ckdtreenode]      *tree_buffer
 *         ckdtreenode              *ctree
 *         readonly cKDTreeNode     tree             # <<<<<<<<<<<<<<
 *         readonly np.ndarray      data
 *         np.float64_t             *raw_data
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_4tree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_4tree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_4tree___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_4tree___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->tree));
  __pyx_r = ((PyObject *)__pyx_v_self->tree);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":869
 *         ckdtreenode              *ctree
 *         readonly cKDTreeNode     tree
 *         readonly np.ndarray      data             # <<<<<<<<<<<<<<
 *         np.float64_t             *raw_data
 *         readonly np.intp_t       n, m
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_4data___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_4data___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __pyx_r = ((PyObject *)__pyx_v_self->data);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":871
 *         readonly np.ndarray      data
 *         np.float64_t             *raw_data
 *         readonly np.intp_t       n, m             # <<<<<<<<<<<<<<
 *         readonly np.intp_t       leafsize
 *         readonly np.ndarray      maxes
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_1n_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_1n_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_1n___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_1n___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->n); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTree.n.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_1m_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_1m_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_1m___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_1m___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->m); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTree.m.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":872
 *         np.float64_t             *raw_data
 *         readonly np.intp_t       n, m
 *         readonly np.intp_t       leafsize             # <<<<<<<<<<<<<<
 *         readonly np.ndarray      maxes
 *         np.float64_t             *raw_maxes
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_8leafsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_8leafsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_8leafsize___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_8leafsize___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_self->leafsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ckdtree.cKDTree.leafsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":873
 *         readonly np.intp_t       n, m
 *         readonly np.intp_t       leafsize
 *         readonly np.ndarray      maxes             # <<<<<<<<<<<<<<
 *         np.float64_t             *raw_maxes
 *         readonly np.ndarray      mins
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_5maxes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_5maxes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_5maxes___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_5maxes___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxes));
  __pyx_r = ((PyObject *)__pyx_v_self->maxes);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":875
 *         readonly np.ndarray      maxes
 *         np.float64_t             *raw_maxes
 *         readonly np.ndarray      mins             # <<<<<<<<<<<<<<
 *         np.float64_t             *raw_mins
 *         readonly np.ndarray      indices
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_4mins_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_4mins_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_4mins___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_4mins___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mins));
  __pyx_r = ((PyObject *)__pyx_v_self->mins);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ckdtree.pyx":877
 *         readonly np.ndarray      mins
 *         np.float64_t             *raw_mins
 *         readonly np.ndarray      indices             # <<<<<<<<<<<<<<
 *         np.intp_t                *raw_indices
 *         np.ndarray               _median_workspace
 */

/* Python wrapper */
static PyObject *__pyx_pw_7ckdtree_7cKDTree_7indices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7ckdtree_7cKDTree_7indices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7ckdtree_7cKDTree_7indices___get__(((struct ckdtree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7ckdtree_7cKDTree_7indices___get__(struct ckdtree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->indices));
  __pyx_r = ((PyObject *)__pyx_v_self->indices);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":257
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":292
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":295
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":793
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":798
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":799
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":804
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":817
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":819
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":821
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":829
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":971
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":975
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":977
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":980
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":981
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7ckdtree_coo_entries __pyx_vtable_7ckdtree_coo_entries;

static PyObject *__pyx_tp_new_7ckdtree_coo_entries(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7ckdtree_coo_entries *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7ckdtree_coo_entries *)o);
  p->__pyx_vtab = __pyx_vtabptr_7ckdtree_coo_entries;
  p->i = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->j = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->v = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7ckdtree_coo_entries(PyObject *o) {
  struct __pyx_obj_7ckdtree_coo_entries *p = (struct __pyx_obj_7ckdtree_coo_entries *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->i);
  Py_CLEAR(p->j);
  Py_CLEAR(p->v);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ckdtree_coo_entries(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ckdtree_coo_entries *p = (struct __pyx_obj_7ckdtree_coo_entries *)o;
  if (p->i) {
    e = (*v)(((PyObject*)p->i), a); if (e) return e;
  }
  if (p->j) {
    e = (*v)(((PyObject*)p->j), a); if (e) return e;
  }
  if (p->v) {
    e = (*v)(((PyObject*)p->v), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ckdtree_coo_entries(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7ckdtree_coo_entries *p = (struct __pyx_obj_7ckdtree_coo_entries *)o;
  tmp = ((PyObject*)p->i);
  p->i = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->j);
  p->j = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->v);
  p->v = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7ckdtree_coo_entries[] = {
  {"to_matrix", (PyCFunction)__pyx_pw_7ckdtree_11coo_entries_3to_matrix, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7ckdtree_coo_entries = {
  PyVarObject_HEAD_INIT(0, 0)
  "ckdtree.coo_entries", /*tp_name*/
  sizeof(struct __pyx_obj_7ckdtree_coo_entries), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ckdtree_coo_entries, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ckdtree_coo_entries, /*tp_traverse*/
  __pyx_tp_clear_7ckdtree_coo_entries, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7ckdtree_coo_entries, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7ckdtree_11coo_entries_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ckdtree_coo_entries, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7ckdtree_Rectangle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7ckdtree_Rectangle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7ckdtree_Rectangle *)o);
  p->mins_arr = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->maxes_arr = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7ckdtree_Rectangle(PyObject *o) {
  struct __pyx_obj_7ckdtree_Rectangle *p = (struct __pyx_obj_7ckdtree_Rectangle *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mins_arr);
  Py_CLEAR(p->maxes_arr);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ckdtree_Rectangle(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ckdtree_Rectangle *p = (struct __pyx_obj_7ckdtree_Rectangle *)o;
  if (p->mins_arr) {
    e = (*v)(((PyObject*)p->mins_arr), a); if (e) return e;
  }
  if (p->maxes_arr) {
    e = (*v)(((PyObject*)p->maxes_arr), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ckdtree_Rectangle(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7ckdtree_Rectangle *p = (struct __pyx_obj_7ckdtree_Rectangle *)o;
  tmp = ((PyObject*)p->mins_arr);
  p->mins_arr = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->maxes_arr);
  p->maxes_arr = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7ckdtree_Rectangle[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7ckdtree_Rectangle = {
  PyVarObject_HEAD_INIT(0, 0)
  "ckdtree.Rectangle", /*tp_name*/
  sizeof(struct __pyx_obj_7ckdtree_Rectangle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ckdtree_Rectangle, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ckdtree_Rectangle, /*tp_traverse*/
  __pyx_tp_clear_7ckdtree_Rectangle, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7ckdtree_Rectangle, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7ckdtree_9Rectangle_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ckdtree_Rectangle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7ckdtree_RectRectDistanceTracker __pyx_vtable_7ckdtree_RectRectDistanceTracker;

static PyObject *__pyx_tp_new_7ckdtree_RectRectDistanceTracker(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)o);
  p->__pyx_vtab = __pyx_vtabptr_7ckdtree_RectRectDistanceTracker;
  p->rect1 = ((struct __pyx_obj_7ckdtree_Rectangle *)Py_None); Py_INCREF(Py_None);
  p->rect2 = ((struct __pyx_obj_7ckdtree_Rectangle *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7ckdtree_RectRectDistanceTracker(PyObject *o) {
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *p = (struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7ckdtree_23RectRectDistanceTracker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->rect1);
  Py_CLEAR(p->rect2);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ckdtree_RectRectDistanceTracker(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *p = (struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)o;
  if (p->rect1) {
    e = (*v)(((PyObject*)p->rect1), a); if (e) return e;
  }
  if (p->rect2) {
    e = (*v)(((PyObject*)p->rect2), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ckdtree_RectRectDistanceTracker(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7ckdtree_RectRectDistanceTracker *p = (struct __pyx_obj_7ckdtree_RectRectDistanceTracker *)o;
  tmp = ((PyObject*)p->rect1);
  p->rect1 = ((struct __pyx_obj_7ckdtree_Rectangle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rect2);
  p->rect2 = ((struct __pyx_obj_7ckdtree_Rectangle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7ckdtree_RectRectDistanceTracker[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7ckdtree_RectRectDistanceTracker = {
  PyVarObject_HEAD_INIT(0, 0)
  "ckdtree.RectRectDistanceTracker", /*tp_name*/
  sizeof(struct __pyx_obj_7ckdtree_RectRectDistanceTracker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ckdtree_RectRectDistanceTracker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ckdtree_RectRectDistanceTracker, /*tp_traverse*/
  __pyx_tp_clear_7ckdtree_RectRectDistanceTracker, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7ckdtree_RectRectDistanceTracker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7ckdtree_23RectRectDistanceTracker_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ckdtree_RectRectDistanceTracker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7ckdtree_PointRectDistanceTracker __pyx_vtable_7ckdtree_PointRectDistanceTracker;

static PyObject *__pyx_tp_new_7ckdtree_PointRectDistanceTracker(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7ckdtree_PointRectDistanceTracker *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7ckdtree_PointRectDistanceTracker *)o);
  p->__pyx_vtab = __pyx_vtabptr_7ckdtree_PointRectDistanceTracker;
  p->rect = ((struct __pyx_obj_7ckdtree_Rectangle *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7ckdtree_PointRectDistanceTracker(PyObject *o) {
  struct __pyx_obj_7ckdtree_PointRectDistanceTracker *p = (struct __pyx_obj_7ckdtree_PointRectDistanceTracker *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7ckdtree_24PointRectDistanceTracker_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->rect);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ckdtree_PointRectDistanceTracker(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ckdtree_PointRectDistanceTracker *p = (struct __pyx_obj_7ckdtree_PointRectDistanceTracker *)o;
  if (p->rect) {
    e = (*v)(((PyObject*)p->rect), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ckdtree_PointRectDistanceTracker(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7ckdtree_PointRectDistanceTracker *p = (struct __pyx_obj_7ckdtree_PointRectDistanceTracker *)o;
  tmp = ((PyObject*)p->rect);
  p->rect = ((struct __pyx_obj_7ckdtree_Rectangle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7ckdtree_PointRectDistanceTracker[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7ckdtree_PointRectDistanceTracker = {
  PyVarObject_HEAD_INIT(0, 0)
  "ckdtree.PointRectDistanceTracker", /*tp_name*/
  sizeof(struct __pyx_obj_7ckdtree_PointRectDistanceTracker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ckdtree_PointRectDistanceTracker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7ckdtree_PointRectDistanceTracker, /*tp_traverse*/
  __pyx_tp_clear_7ckdtree_PointRectDistanceTracker, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7ckdtree_PointRectDistanceTracker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ckdtree_PointRectDistanceTracker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7ckdtree_cKDTreeNode __pyx_vtable_7ckdtree_cKDTreeNode;

static PyObject *__pyx_tp_new_7ckdtree_cKDTreeNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7ckdtree_cKDTreeNode *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)o);
  p->__pyx_vtab = __pyx_vtabptr_7ckdtree_cKDTreeNode;
  p->_data = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_indices = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7ckdtree_cKDTreeNode(PyObject *o) {
  struct __pyx_obj_7ckdtree_cKDTreeNode *p = (struct __pyx_obj_7ckdtree_cKDTreeNode *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_data);
  Py_CLEAR(p->_indices);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ckdtree_cKDTreeNode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7ckdtree_cKDTreeNode *p = (struct __pyx_obj_7ckdtree_cKDTreeNode *)o;
  if (p->_data) {
    e = (*v)(((PyObject*)p->_data), a); if (e) return e;
  }
  if (p->_indices) {
    e = (*v)(((PyObject*)p->_indices), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ckdtree_cKDTreeNode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7ckdtree_cKDTreeNode *p = (struct __pyx_obj_7ckdtree_cKDTreeNode *)o;
  tmp = ((PyObject*)p->_data);
  p->_data = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_indices);
  p->_indices = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_data_points(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_11data_points_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_indices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_7indices_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_lesser(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_6lesser_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_greater(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_7greater_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_level(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_5level_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_split_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_9split_dim_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_8children_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_11cKDTreeNode_split(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_11cKDTreeNode_5split_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_7ckdtree_cKDTreeNode[] = {
  {(char *)"data_points", __pyx_getprop_7ckdtree_11cKDTreeNode_data_points, 0, 0, 0},
  {(char *)"indices", __pyx_getprop_7ckdtree_11cKDTreeNode_indices, 0, 0, 0},
  {(char *)"lesser", __pyx_getprop_7ckdtree_11cKDTreeNode_lesser, 0, 0, 0},
  {(char *)"greater", __pyx_getprop_7ckdtree_11cKDTreeNode_greater, 0, 0, 0},
  {(char *)"level", __pyx_getprop_7ckdtree_11cKDTreeNode_level, 0, 0, 0},
  {(char *)"split_dim", __pyx_getprop_7ckdtree_11cKDTreeNode_split_dim, 0, 0, 0},
  {(char *)"children", __pyx_getprop_7ckdtree_11cKDTreeNode_children, 0, 0, 0},
  {(char *)"split", __pyx_getprop_7ckdtree_11cKDTreeNode_split, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7ckdtree_cKDTreeNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "ckdtree.cKDTreeNode", /*tp_name*/
  sizeof(struct __pyx_obj_7ckdtree_cKDTreeNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ckdtree_cKDTreeNode, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    class cKDTreeNode\n\n    This class exposes a Python view of a node in the cKDTree object.\n    \n    All attributes are read-only.\n    \n    Attributes\n    ----------\n    level : int\n        The depth of the node. 0 is the level of the root node.\n    split_dim : int\n        The dimension along which this node is split. If this value is -1  \n        the node is a leafnode in the kd-tree. Leafnodes are not split further\n        and scanned by brute force.\n    split : float\n        The value used to separate split this node. Points with value >= split\n        in the split_dim dimension are sorted to the 'greater' subnode \n        whereas those with value < split are sorted to the 'lesser' subnode.\n    children : int\n        The number of data points sorted to this node.\n    data_points : ndarray of float64\n        An array with the data points sorted to this node.\n    indices : ndarray of intp\n        An array with the indices of the data points sorted to this node. The\n        indices refer to the position in the data set used to construct the\n        kd-tree.\n    lesser : cKDTreeNode or None\n        Subnode with the 'lesser' data points. This attribute is None for\n        leafnodes.\n    greater : cKDTreeNode or None\n        Subnode with the 'greater' data points. This attribute is None for\n        leafnodes.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7ckdtree_cKDTreeNode, /*tp_traverse*/
  __pyx_tp_clear_7ckdtree_cKDTreeNode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7ckdtree_cKDTreeNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ckdtree_cKDTreeNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7ckdtree_cKDTree __pyx_vtable_7ckdtree_cKDTree;

static PyObject *__pyx_tp_new_7ckdtree_cKDTree(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct ckdtree *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct ckdtree *)o);
  p->__pyx_vtab = __pyx_vtabptr_7ckdtree_cKDTree;
  p->tree = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)Py_None); Py_INCREF(Py_None);
  p->data = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->maxes = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->mins = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->indices = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_median_workspace = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7ckdtree_cKDTree(PyObject *o) {
  struct ckdtree *p = (struct ckdtree *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->tree);
  Py_CLEAR(p->data);
  Py_CLEAR(p->maxes);
  Py_CLEAR(p->mins);
  Py_CLEAR(p->indices);
  Py_CLEAR(p->_median_workspace);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7ckdtree_cKDTree(PyObject *o, visitproc v, void *a) {
  int e;
  struct ckdtree *p = (struct ckdtree *)o;
  if (p->tree) {
    e = (*v)(((PyObject*)p->tree), a); if (e) return e;
  }
  if (p->data) {
    e = (*v)(((PyObject*)p->data), a); if (e) return e;
  }
  if (p->maxes) {
    e = (*v)(((PyObject*)p->maxes), a); if (e) return e;
  }
  if (p->mins) {
    e = (*v)(((PyObject*)p->mins), a); if (e) return e;
  }
  if (p->indices) {
    e = (*v)(((PyObject*)p->indices), a); if (e) return e;
  }
  if (p->_median_workspace) {
    e = (*v)(((PyObject*)p->_median_workspace), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7ckdtree_cKDTree(PyObject *o) {
  PyObject* tmp;
  struct ckdtree *p = (struct ckdtree *)o;
  tmp = ((PyObject*)p->tree);
  p->tree = ((struct __pyx_obj_7ckdtree_cKDTreeNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->data);
  p->data = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->maxes);
  p->maxes = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mins);
  p->mins = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->indices);
  p->indices = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_median_workspace);
  p->_median_workspace = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_tree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_4tree_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_4data_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_n(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_1n_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_m(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_1m_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_leafsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_8leafsize_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_maxes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_5maxes_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_mins(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_4mins_1__get__(o);
}

static PyObject *__pyx_getprop_7ckdtree_7cKDTree_indices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7ckdtree_7cKDTree_7indices_1__get__(o);
}

static PyMethodDef __pyx_methods_7ckdtree_cKDTree[] = {
  {"__deallocate__", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_3__deallocate__, METH_NOARGS, 0},
  {"query", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_5query, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7ckdtree_7cKDTree_4query},
  {"query_ball_point", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_7query_ball_point, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7ckdtree_7cKDTree_6query_ball_point},
  {"query_ball_tree", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_9query_ball_tree, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7ckdtree_7cKDTree_8query_ball_tree},
  {"query_pairs", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_11query_pairs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7ckdtree_7cKDTree_10query_pairs},
  {"count_neighbors", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_13count_neighbors, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7ckdtree_7cKDTree_12count_neighbors},
  {"sparse_distance_matrix", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_15sparse_distance_matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7ckdtree_7cKDTree_14sparse_distance_matrix},
  {"__reduce__", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_17__reduce__, METH_NOARGS, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_19__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_7ckdtree_7cKDTree_21__setstate__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7ckdtree_cKDTree[] = {
  {(char *)"tree", __pyx_getprop_7ckdtree_7cKDTree_tree, 0, 0, 0},
  {(char *)"data", __pyx_getprop_7ckdtree_7cKDTree_data, 0, 0, 0},
  {(char *)"n", __pyx_getprop_7ckdtree_7cKDTree_n, 0, 0, 0},
  {(char *)"m", __pyx_getprop_7ckdtree_7cKDTree_m, 0, 0, 0},
  {(char *)"leafsize", __pyx_getprop_7ckdtree_7cKDTree_leafsize, 0, 0, 0},
  {(char *)"maxes", __pyx_getprop_7ckdtree_7cKDTree_maxes, 0, 0, 0},
  {(char *)"mins", __pyx_getprop_7ckdtree_7cKDTree_mins, 0, 0, 0},
  {(char *)"indices", __pyx_getprop_7ckdtree_7cKDTree_indices, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

DL_EXPORT(PyTypeObject) ckdtree_type = {
  PyVarObject_HEAD_INIT(0, 0)
  "ckdtree.cKDTree", /*tp_name*/
  sizeof(struct ckdtree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7ckdtree_cKDTree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    cKDTree(data, leafsize=16, compact_nodes=True, copy_data=False,\n            balanced_tree=True)\n\n    kd-tree for quick nearest-neighbor lookup\n\n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point. \n\n    The algorithm used is described in Maneewongvatana and Mount 1999. \n    The general idea is that the kd-tree is a binary trie, each of whose\n    nodes represents an axis-aligned hyperrectangle. Each node specifies\n    an axis and splits the set of points based on whether their coordinate\n    along that axis is greater than or less than a particular value. \n\n    During construction, the axis and splitting point are chosen by the \n    \"sliding midpoint\" rule, which ensures that the cells do not all\n    become long and thin. \n\n    The tree can be queried for the r closest neighbors of any given point \n    (optionally returning only those within some maximum distance of the \n    point). It can also be queried, with a substantial gain in efficiency, \n    for the r approximate closest neighbors.\n\n    For large dimensions (20 is already large) do not expect this to run \n    significantly faster than brute force. High-dimensional nearest-neighbor\n    queries are a substantial open problem in computer science.\n\n    Parameters\n    ----------\n    data : array_like, shape (n,m)\n        The n data points of dimension m to be indexed. This array is \n        not copied unless this is necessary to produce a contiguous \n        array of doubles, and so modifying this data will result in \n        bogus results. The data are also copied if the kd-tree is built\n        with copy_data=True.\n    leafsize : positive int, optional\n        The number of points at which the algorithm switches over to\n        brute-force. Default: 16.\n    compact_nodes : bool, optional    \n        If True, the kd-tree is built to shrink the hyperrectangles to\n        the actual data range. This usually gives a more compact tree and \n        faster queries at the expense of longer build time. Default: True.\n    copy_data : bool, optional\n        If True the data is always copied to protect the kd-tree against \n        data corruption. Default: False.\n    balanced_tree : bool, optional    \n        If True, the median is used to split the hyperrectangles instead of \n        the midpoint. This usually gives a more compact tree and \n        faster queries at the expense of longer build time. Default: True.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7ckdtree_cKDTree, /*tp_traverse*/
  __pyx_tp_clear_7ckdtree_cKDTree, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7ckdtree_cKDTree, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7ckdtree_cKDTree, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7ckdtree_7cKDTree_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7ckdtree_cKDTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "ckdtree",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_CHUNK, __pyx_k_CHUNK, sizeof(__pyx_k_CHUNK), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_Only_p_norms_with_1_p_infinity_p, __pyx_k_Only_p_norms_with_1_p_infinity_p, sizeof(__pyx_k_Only_p_norms_with_1_p_infinity_p), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Searching_for_a_d_dimensional_po, __pyx_k_Searching_for_a_d_dimensional_po, sizeof(__pyx_k_Searching_for_a_d_dimensional_po), 0, 0, 1, 0},
  {&__pyx_n_s_Thread, __pyx_k_Thread, sizeof(__pyx_k_Thread), 0, 0, 1, 1},
  {&__pyx_kp_s_Trees_passed_to_count_neighbors, __pyx_k_Trees_passed_to_count_neighbors, sizeof(__pyx_k_Trees_passed_to_count_neighbors), 0, 0, 1, 0},
  {&__pyx_kp_s_Trees_passed_to_query_ball_tree, __pyx_k_Trees_passed_to_query_ball_tree, sizeof(__pyx_k_Trees_passed_to_query_ball_tree), 0, 0, 1, 0},
  {&__pyx_kp_s_Trees_passed_to_sparse_distance, __pyx_k_Trees_passed_to_sparse_distance, sizeof(__pyx_k_Trees_passed_to_sparse_distance), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_amax, __pyx_k_amax, sizeof(__pyx_k_amax), 0, 0, 1, 1},
  {&__pyx_n_s_amin, __pyx_k_amin, sizeof(__pyx_k_amin), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_balanced_tree, __pyx_k_balanced_tree, sizeof(__pyx_k_balanced_tree), 0, 0, 1, 1},
  {&__pyx_n_s_cKDTree, __pyx_k_cKDTree, sizeof(__pyx_k_cKDTree), 0, 0, 1, 1},
  {&__pyx_kp_u_cKDTree_query_ball_point_line_14, __pyx_k_cKDTree_query_ball_point_line_14, sizeof(__pyx_k_cKDTree_query_ball_point_line_14), 0, 1, 0, 0},
  {&__pyx_n_s_ckdtree, __pyx_k_ckdtree, sizeof(__pyx_k_ckdtree), 0, 0, 1, 1},
  {&__pyx_n_s_compact_nodes, __pyx_k_compact_nodes, sizeof(__pyx_k_compact_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_coo_matrix, __pyx_k_coo_matrix, sizeof(__pyx_k_coo_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_copy_data, __pyx_k_copy_data, sizeof(__pyx_k_copy_data), 0, 0, 1, 1},
  {&__pyx_n_s_cpu_count, __pyx_k_cpu_count, sizeof(__pyx_k_cpu_count), 0, 0, 1, 1},
  {&__pyx_n_s_daemon, __pyx_k_daemon, sizeof(__pyx_k_daemon), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_dd, __pyx_k_dd, sizeof(__pyx_k_dd), 0, 0, 1, 1},
  {&__pyx_n_s_dd_2, __pyx_k_dd_2, sizeof(__pyx_k_dd_2), 0, 0, 1, 1},
  {&__pyx_n_s_distance_upper_bound, __pyx_k_distance_upper_bound, sizeof(__pyx_k_distance_upper_bound), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dub, __pyx_k_dub, sizeof(__pyx_k_dub), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_eps, __pyx_k_eps, sizeof(__pyx_k_eps), 0, 0, 1, 1},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_greater, __pyx_k_greater, sizeof(__pyx_k_greater), 0, 0, 1, 1},
  {&__pyx_kp_s_home_rgommers_Code_scipy_scipy, __pyx_k_home_rgommers_Code_scipy_scipy, sizeof(__pyx_k_home_rgommers_Code_scipy_scipy), 0, 0, 1, 0},
  {&__pyx_n_s_hstack, __pyx_k_hstack, sizeof(__pyx_k_hstack), 0, 0, 1, 1},
  {&__pyx_n_s_ii, __pyx_k_ii, sizeof(__pyx_k_ii), 0, 0, 1, 1},
  {&__pyx_n_s_ii_2, __pyx_k_ii_2, sizeof(__pyx_k_ii_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_intp, __pyx_k_intp, sizeof(__pyx_k_intp), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_j_2, __pyx_k_j_2, sizeof(__pyx_k_j_2), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_leafsize, __pyx_k_leafsize, sizeof(__pyx_k_leafsize), 0, 0, 1, 1},
  {&__pyx_kp_s_leafsize_must_be_at_least_1, __pyx_k_leafsize_must_be_at_least_1, sizeof(__pyx_k_leafsize_must_be_at_least_1), 0, 0, 1, 0},
  {&__pyx_n_s_lesser, __pyx_k_lesser, sizeof(__pyx_k_lesser), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_distance, __pyx_k_max_distance, sizeof(__pyx_k_max_distance), 0, 0, 1, 1},
  {&__pyx_n_s_maxes_arr, __pyx_k_maxes_arr, sizeof(__pyx_k_maxes_arr), 0, 0, 1, 1},
  {&__pyx_n_s_mins_arr, __pyx_k_mins_arr, sizeof(__pyx_k_mins_arr), 0, 0, 1, 1},
  {&__pyx_n_s_multiprocessing, __pyx_k_multiprocessing, sizeof(__pyx_k_multiprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_jobs, __pyx_k_n_jobs, sizeof(__pyx_k_n_jobs), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_ndindex, __pyx_k_ndindex, sizeof(__pyx_k_ndindex), 0, 0, 1, 1},
  {&__pyx_n_s_ndmin, __pyx_k_ndmin, sizeof(__pyx_k_ndmin), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_object, __pyx_k_new_object, sizeof(__pyx_k_new_object), 0, 0, 1, 1},
  {&__pyx_n_s_newaxis, __pyx_k_newaxis, sizeof(__pyx_k_newaxis), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_prod, __pyx_k_prod, sizeof(__pyx_k_prod), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_u_query_ball_point_self_x_r_p_2_e, __pyx_k_query_ball_point_self_x_r_p_2_e, sizeof(__pyx_k_query_ball_point_self_x_r_p_2_e), 0, 1, 0, 0},
  {&__pyx_n_s_query_locals__thread_func, __pyx_k_query_locals__thread_func, sizeof(__pyx_k_query_locals__thread_func), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_kp_s_r_must_be_either_a_single_value, __pyx_k_r_must_be_either_a_single_value, sizeof(__pyx_k_r_must_be_either_a_single_value), 0, 0, 1, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rect1, __pyx_k_rect1, sizeof(__pyx_k_rect1), 0, 0, 1, 1},
  {&__pyx_kp_s_rect1_and_rect2_have_different_d, __pyx_k_rect1_and_rect2_have_different_d, sizeof(__pyx_k_rect1_and_rect2_have_different_d), 0, 0, 1, 0},
  {&__pyx_n_s_rect2, __pyx_k_rect2, sizeof(__pyx_k_rect2), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_scipy, __pyx_k_scipy, sizeof(__pyx_k_scipy), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sparse, __pyx_k_sparse, sizeof(__pyx_k_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thread_func, __pyx_k_thread_func, sizeof(__pyx_k_thread_func), 0, 0, 1, 1},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_to_matrix, __pyx_k_to_matrix, sizeof(__pyx_k_to_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_todok, __pyx_k_todok, sizeof(__pyx_k_todok), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_upper_bound, __pyx_k_upper_bound, sizeof(__pyx_k_upper_bound), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_kp_s_x_must_consist_of_vectors_of_len, __pyx_k_x_must_consist_of_vectors_of_len, sizeof(__pyx_k_x_must_consist_of_vectors_of_len), 0, 0, 1, 0},
  {&__pyx_n_s_xx, __pyx_k_xx, sizeof(__pyx_k_xx), 0, 0, 1, 1},
  {&__pyx_n_s_xx_2, __pyx_k_xx_2, sizeof(__pyx_k_xx_2), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ckdtree.pyx":346
 * 
 *         if rect1.m != rect2.m:
 *             raise ValueError("rect1 and rect2 have different dimensions")             # <<<<<<<<<<<<<<
 * 
 *         self.rect1 = rect1
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_rect1_and_rect2_have_different_d); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "ckdtree.pyx":752
 *     property data_points:
 *         def __get__(cKDTreeNode self):
 *             return self._data[self.indices,:]             # <<<<<<<<<<<<<<
 * 
 *     property indices:
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);

  /* "ckdtree.pyx":895
 *         self.leafsize = leafsize
 *         if self.leafsize<1:
 *             raise ValueError("leafsize must be at least 1")             # <<<<<<<<<<<<<<
 * 
 *         self.maxes = np.ascontiguousarray(np.amax(self.data,axis=0), dtype=np.float64)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_leafsize_must_be_at_least_1); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "ckdtree.pyx":1303
 *                              "has shape %s" % (int(self.m), np.shape(x)))
 *         if p < 1:
 *             raise ValueError("Only p-norms with 1<=p<=infinity permitted")             # <<<<<<<<<<<<<<
 *         if x_arr.ndim == 1:
 *             single = True
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Only_p_norms_with_1_p_infinity_p); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "ckdtree.pyx":1306
 *         if x_arr.ndim == 1:
 *             single = True
 *             x_arr = x_arr[np.newaxis,:]             # <<<<<<<<<<<<<<
 *         else:
 *             single = False
 */
  __pyx_slice__6 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);

  /* "ckdtree.pyx":1309
 *         else:
 *             single = False
 *         retshape = np.shape(x)[:-1]             # <<<<<<<<<<<<<<
 *         n = <np.intp_t> np.prod(retshape)
 *         xx = np.ascontiguousarray(x_arr).reshape(n, self.m)
 */
  __pyx_slice__7 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__7);
  __Pyx_GIVEREF(__pyx_slice__7);

  /* "ckdtree.pyx":1327
 *             CHUNK = n//n_jobs if n//n_jobs else n
 * 
 *             def _thread_func(self, _dd, _ii, _xx, _j, n, CHUNK, p, k, eps, dub):             # <<<<<<<<<<<<<<
 *                 cdef np.intp_t j = _j
 *                 cdef np.ndarray[np.intp_t,ndim=2] ii = _ii
 */
  __pyx_tuple__8 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_dd, __pyx_n_s_ii, __pyx_n_s_xx, __pyx_n_s_j, __pyx_n_s_n, __pyx_n_s_CHUNK, __pyx_n_s_p, __pyx_n_s_k, __pyx_n_s_eps, __pyx_n_s_dub, __pyx_n_s_j_2, __pyx_n_s_ii_2, __pyx_n_s_dd_2, __pyx_n_s_xx_2, __pyx_n_s_start, __pyx_n_s_stop); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(11, 0, 17, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_rgommers_Code_scipy_scipy, __pyx_n_s_thread_func, 1327, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "ckdtree.pyx":1377
 *                             # C long overlow, return array of dtype=np.int_p
 *                             if k==1:
 *                                 return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,))
 */
  __pyx_tuple__10 = PyTuple_Pack(2, Py_Ellipsis, __pyx_int_0); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_tuple__11 = PyTuple_Pack(2, Py_Ellipsis, __pyx_int_0); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "ckdtree.pyx":1383
 *                 # no C long overlow, return array of dtype=int
 *                 if k==1:
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape).astype(int)             # <<<<<<<<<<<<<<
 *                 else:
 *                     return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,)).astype(int)
 */
  __pyx_tuple__12 = PyTuple_Pack(2, Py_Ellipsis, __pyx_int_0); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_tuple__13 = PyTuple_Pack(2, Py_Ellipsis, __pyx_int_0); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "ckdtree.pyx":1390
 *                 # ... most other platforms
 *                 if k==1:
 *                     return np.reshape(dd[...,0],retshape), np.reshape(ii[...,0],retshape)             # <<<<<<<<<<<<<<
 *                 else:
 *                     return np.reshape(dd,retshape+(k,)), np.reshape(ii,retshape+(k,))
 */
  __pyx_tuple__14 = PyTuple_Pack(2, Py_Ellipsis, __pyx_int_0); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__15 = PyTuple_Pack(2, Py_Ellipsis, __pyx_int_0); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "ckdtree.pyx":1520
 *             return self.__query_ball_point(&xx[0], r, p, eps)
 *         else:
 *             retshape = x.shape[:-1]             # <<<<<<<<<<<<<<
 *             result = np.empty(retshape, dtype=object)
 *             for c in np.ndindex(retshape):
 */
  __pyx_slice__16 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__16);
  __Pyx_GIVEREF(__pyx_slice__16);

  /* "ckdtree.pyx":1687
 *         # Make sure trees are compatible
 *         if self.m != other.m:
 *             raise ValueError("Trees passed to query_ball_tree have different "             # <<<<<<<<<<<<<<
 *                              "dimensionality")
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Trees_passed_to_query_ball_tree); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "ckdtree.pyx":2039
 *         # Make sure trees are compatible
 *         if self.m != other.m:
 *             raise ValueError("Trees passed to count_neighbors have different "             # <<<<<<<<<<<<<<
 *                              "dimensionality")
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Trees_passed_to_count_neighbors); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "ckdtree.pyx":2046
 *         r_ndim = len(np.shape(r))
 *         if r_ndim > 1:
 *             raise ValueError("r must be either a single value or a "             # <<<<<<<<<<<<<<
 *                              "one-dimensional array of values")
 *         real_r = np.array(r, ndmin=1, dtype=np.float64, copy=True)
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_r_must_be_either_a_single_value); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "ckdtree.pyx":2208
 *         # Make sure trees are compatible
 *         if self.m != other.m:
 *             raise ValueError("Trees passed to sparse_distance_matrix have "             # <<<<<<<<<<<<<<
 *                              "different dimensionality")
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Trees_passed_to_sparse_distance); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "ckdtree.pyx":63
 * # ======================
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_rgommers_Code_scipy_scipy, __pyx_n_s_new_object, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initckdtree(void); /*proto*/
PyMODINIT_FUNC initckdtree(void)
#else
PyMODINIT_FUNC PyInit_ckdtree(void); /*proto*/
PyMODINIT_FUNC PyInit_ckdtree(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_ckdtree(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ckdtree", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_ckdtree) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "ckdtree")) {
      if (unlikely(PyDict_SetItemString(modules, "ckdtree", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7ckdtree_coo_entries = &__pyx_vtable_7ckdtree_coo_entries;
  __pyx_vtable_7ckdtree_coo_entries.add = (int (*)(struct __pyx_obj_7ckdtree_coo_entries *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t))__pyx_f_7ckdtree_11coo_entries_add;
  if (PyType_Ready(&__pyx_type_7ckdtree_coo_entries) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7ckdtree_coo_entries.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7ckdtree_coo_entries.tp_dict, __pyx_vtabptr_7ckdtree_coo_entries) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "coo_entries", (PyObject *)&__pyx_type_7ckdtree_coo_entries) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7ckdtree_coo_entries = &__pyx_type_7ckdtree_coo_entries;
  if (PyType_Ready(&__pyx_type_7ckdtree_Rectangle) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7ckdtree_Rectangle.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Rectangle", (PyObject *)&__pyx_type_7ckdtree_Rectangle) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7ckdtree_Rectangle = &__pyx_type_7ckdtree_Rectangle;
  __pyx_vtabptr_7ckdtree_RectRectDistanceTracker = &__pyx_vtable_7ckdtree_RectRectDistanceTracker;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker._init_stack = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_23RectRectDistanceTracker__init_stack;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker._resize_stack = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t))__pyx_f_7ckdtree_23RectRectDistanceTracker__resize_stack;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker._free_stack = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_23RectRectDistanceTracker__free_stack;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker.push = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t))__pyx_f_7ckdtree_23RectRectDistanceTracker_push;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker.push_less_of = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, struct ckdtreenode *))__pyx_f_7ckdtree_23RectRectDistanceTracker_push_less_of;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker.push_greater_of = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *, __pyx_t_5numpy_intp_t, struct ckdtreenode *))__pyx_f_7ckdtree_23RectRectDistanceTracker_push_greater_of;
  __pyx_vtable_7ckdtree_RectRectDistanceTracker.pop = (int (*)(struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_23RectRectDistanceTracker_pop;
  if (PyType_Ready(&__pyx_type_7ckdtree_RectRectDistanceTracker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7ckdtree_RectRectDistanceTracker.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7ckdtree_RectRectDistanceTracker.tp_dict, __pyx_vtabptr_7ckdtree_RectRectDistanceTracker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "RectRectDistanceTracker", (PyObject *)&__pyx_type_7ckdtree_RectRectDistanceTracker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7ckdtree_RectRectDistanceTracker = &__pyx_type_7ckdtree_RectRectDistanceTracker;
  __pyx_vtabptr_7ckdtree_PointRectDistanceTracker = &__pyx_vtable_7ckdtree_PointRectDistanceTracker;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker._init_stack = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *))__pyx_f_7ckdtree_24PointRectDistanceTracker__init_stack;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker._resize_stack = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, __pyx_t_5numpy_intp_t))__pyx_f_7ckdtree_24PointRectDistanceTracker__resize_stack;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker._free_stack = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *))__pyx_f_7ckdtree_24PointRectDistanceTracker__free_stack;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker.init = (PyObject *(*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, __pyx_t_5numpy_float64_t *, struct __pyx_obj_7ckdtree_Rectangle *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t))__pyx_f_7ckdtree_24PointRectDistanceTracker_init;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker.push = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t))__pyx_f_7ckdtree_24PointRectDistanceTracker_push;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker.push_less_of = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, struct ckdtreenode *))__pyx_f_7ckdtree_24PointRectDistanceTracker_push_less_of;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker.push_greater_of = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *, struct ckdtreenode *))__pyx_f_7ckdtree_24PointRectDistanceTracker_push_greater_of;
  __pyx_vtable_7ckdtree_PointRectDistanceTracker.pop = (int (*)(struct __pyx_obj_7ckdtree_PointRectDistanceTracker *))__pyx_f_7ckdtree_24PointRectDistanceTracker_pop;
  if (PyType_Ready(&__pyx_type_7ckdtree_PointRectDistanceTracker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7ckdtree_PointRectDistanceTracker.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7ckdtree_PointRectDistanceTracker.tp_dict, __pyx_vtabptr_7ckdtree_PointRectDistanceTracker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PointRectDistanceTracker", (PyObject *)&__pyx_type_7ckdtree_PointRectDistanceTracker) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7ckdtree_PointRectDistanceTracker = &__pyx_type_7ckdtree_PointRectDistanceTracker;
  __pyx_vtabptr_7ckdtree_cKDTreeNode = &__pyx_vtable_7ckdtree_cKDTreeNode;
  __pyx_vtable_7ckdtree_cKDTreeNode._setup = (void (*)(struct __pyx_obj_7ckdtree_cKDTreeNode *))__pyx_f_7ckdtree_11cKDTreeNode__setup;
  if (PyType_Ready(&__pyx_type_7ckdtree_cKDTreeNode) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7ckdtree_cKDTreeNode.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7ckdtree_cKDTreeNode.tp_dict, __pyx_vtabptr_7ckdtree_cKDTreeNode) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "cKDTreeNode", (PyObject *)&__pyx_type_7ckdtree_cKDTreeNode) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7ckdtree_cKDTreeNode = &__pyx_type_7ckdtree_cKDTreeNode;
  __pyx_vtabptr_7ckdtree_cKDTree = &__pyx_vtable_7ckdtree_cKDTree;
  __pyx_vtable_7ckdtree_cKDTree._post_init = (int (*)(struct ckdtree *, struct ckdtreenode *))__pyx_f_7ckdtree_7cKDTree__post_init;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___build = (__pyx_t_5numpy_intp_t (*)(struct ckdtree *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int))__pyx_f_7ckdtree_7cKDTree___build;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___build_compact = (__pyx_t_5numpy_intp_t (*)(struct ckdtree *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int))__pyx_f_7ckdtree_7cKDTree___build_compact;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_ball_point_traverse_no_checking = (int (*)(struct ckdtree *, PyObject *, struct ckdtreenode *))__pyx_f_7ckdtree_7cKDTree___query_ball_point_traverse_no_checking;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_ball_point_traverse_checking = (int (*)(struct ckdtree *, PyObject *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_PointRectDistanceTracker *))__pyx_f_7ckdtree_7cKDTree___query_ball_point_traverse_checking;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_ball_point = (PyObject *(*)(struct ckdtree *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t))__pyx_f_7ckdtree_7cKDTree___query_ball_point;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_ball_tree_traverse_no_checking = (int (*)(struct ckdtree *, struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *))__pyx_f_7ckdtree_7cKDTree___query_ball_tree_traverse_no_checking;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_ball_tree_traverse_checking = (int (*)(struct ckdtree *, struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_7cKDTree___query_ball_tree_traverse_checking;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_pairs_traverse_no_checking = (int (*)(struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *))__pyx_f_7ckdtree_7cKDTree___query_pairs_traverse_no_checking;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___query_pairs_traverse_checking = (int (*)(struct ckdtree *, PyObject *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_7cKDTree___query_pairs_traverse_checking;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___count_neighbors_traverse = (int (*)(struct ckdtree *, struct ckdtree *, __pyx_t_5numpy_intp_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_intp_t *, __pyx_t_5numpy_intp_t *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_7cKDTree___count_neighbors_traverse;
  __pyx_vtable_7ckdtree_cKDTree.__pyx___sparse_distance_matrix_traverse = (int (*)(struct ckdtree *, struct ckdtree *, struct __pyx_obj_7ckdtree_coo_entries *, struct ckdtreenode *, struct ckdtreenode *, struct __pyx_obj_7ckdtree_RectRectDistanceTracker *))__pyx_f_7ckdtree_7cKDTree___sparse_distance_matrix_traverse;
  if (PyType_Ready(&ckdtree_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ckdtree_type.tp_print = 0;
  if (__Pyx_SetVtable(ckdtree_type.tp_dict, __pyx_vtabptr_7ckdtree_cKDTree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "cKDTree", (PyObject *)&ckdtree_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7ckdtree_cKDTree = &ckdtree_type;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "ckdtree.pyx":9
 * # distutils: language = c++
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * import scipy.sparse
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":10
 * 
 * import numpy as np
 * import scipy.sparse             # <<<<<<<<<<<<<<
 * 
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_sparse, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scipy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":18
 * cimport cython
 * 
 * from multiprocessing import cpu_count             # <<<<<<<<<<<<<<
 * import threading
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_cpu_count);
  __Pyx_GIVEREF(__pyx_n_s_cpu_count);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_cpu_count);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_multiprocessing, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cpu_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cpu_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":19
 * 
 * from multiprocessing import cpu_count
 * import threading             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "limits.h":
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_threading, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_threading, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ckdtree.pyx":31
 *     np.float64_t _distance_p(np.float64_t *x, np.float64_t *y,
 *                        np.float64_t p, np.intp_t k, np.float64_t upperbound)
 * infinity = np.inf             # <<<<<<<<<<<<<<
 * number_of_processors = cpu_count()
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (npy_float64)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  infinity = __pyx_t_3;

  /* "ckdtree.pyx":32
 *                        np.float64_t p, np.intp_t k, np.float64_t upperbound)
 * infinity = np.inf
 * number_of_processors = cpu_count()             # <<<<<<<<<<<<<<
 * 
 * from libcpp.vector cimport vector
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_cpu_count); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  number_of_processors = __pyx_t_5;

  /* "ckdtree.pyx":36
 * from libcpp.vector cimport vector
 * 
 * __all__ = ['cKDTree']             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_cKDTree);
  __Pyx_GIVEREF(__pyx_n_s_cKDTree);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_cKDTree);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":63
 * # ======================
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7ckdtree_1new_object, NULL, __pyx_n_s_ckdtree); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_object, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ckdtree.pyx":304
 *     np.float64_t min_distance, max_distance
 * 
 * cdef np.intp_t LESS = 1             # <<<<<<<<<<<<<<
 * cdef np.intp_t GREATER = 2
 * 
 */
  __pyx_v_7ckdtree_LESS = 1;

  /* "ckdtree.pyx":305
 * 
 * cdef np.intp_t LESS = 1
 * cdef np.intp_t GREATER = 2             # <<<<<<<<<<<<<<
 * 
 * cdef class RectRectDistanceTracker(object):
 */
  __pyx_v_7ckdtree_GREATER = 2;

  /* "ckdtree.pyx":1249
 *     @cython.boundscheck(False)
 *     def query(cKDTree self, object x, np.intp_t k=1, np.float64_t eps=0,
 *               np.float64_t p=2, np.float64_t distance_upper_bound=infinity,             # <<<<<<<<<<<<<<
 *               np.intp_t n_jobs=1):
 *         """
 */
  __pyx_k__4 = infinity;

  /* "ckdtree.pyx":1
 * # Copyright Anne M. Archibald 2008             # <<<<<<<<<<<<<<
 * # Additional contributions by Patrick Varilly and Sturla Molden 2012
 * # Revision by Sturla Molden 2015
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_cKDTree_query_ball_point_line_14, __pyx_kp_u_query_ball_point_self_x_r_p_2_e) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../.local/lib/python3.4/site-packages/Cython/Includes/numpy/__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ckdtree", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ckdtree");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


              static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyLong_AsLong(x))
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
